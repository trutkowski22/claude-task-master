```mermaid
flowchart TB
    subgraph Imports["Imports"]
        I1["IMPORT: fs, FROM: fs"]
        I2["IMPORT: path, FROM: path"]
        I3["IMPORT: url, FROM: url"]
        I4["IMPORT: chalk, FROM: chalk"]
        I5["IMPORT: zod, FROM: zod"]
        I6["IMPORT: ../../src/constants/commands.js, FROM: /claude-task-master/src/constants/commands.js"]
        I7["IMPORT: ../../src/utils/path-utils.js, FROM: /claude-task-master/src/utils/path-utils.js"]
        I8["IMPORT: ./utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
    end
    subgraph Dependencies["Dependencies"]
        D1["DEP: File system"]
        D2["DEP: Path resolution"]
    end
    subgraph FunctionsDefined["Functions Defined"]
        FU1["FUNCTION: _loadAndValidateConfig"]
        FU2["FUNCTION: getConfig"]
        FU3["FUNCTION: validateProvider"]
        FU4["FUNCTION: validateProviderModelCombination"]
        FU5["FUNCTION: validateClaudeCodeSettings"]
        FU6["FUNCTION: getClaudeCodeSettings"]
        FU7["FUNCTION: getClaudeCodeSettingsForCommand"]
        FU8["FUNCTION: getModelConfigForRole"]
        FU9["FUNCTION: getMainProvider"]
        FU10["FUNCTION: getMainModelId"]
        FU11["FUNCTION: getMainMaxTokens"]
        FU12["FUNCTION: getMainTemperature"]
        FU13["FUNCTION: getResearchProvider"]
        FU14["FUNCTION: getResearchModelId"]
        FU15["FUNCTION: getResearchMaxTokens"]
        FU16["FUNCTION: getResearchTemperature"]
        FU17["FUNCTION: getFallbackProvider"]
        FU18["FUNCTION: getFallbackModelId"]
        FU19["FUNCTION: getFallbackMaxTokens"]
        FU20["FUNCTION: getFallbackTemperature"]
        FU21["FUNCTION: getGlobalConfig"]
        FU22["FUNCTION: getLogLevel"]
        FU23["FUNCTION: getDebugFlag"]
        FU24["FUNCTION: getDefaultSubtasks"]
        FU25["FUNCTION: getDefaultNumTasks"]
        FU26["FUNCTION: getDefaultPriority"]
        FU27["FUNCTION: getProjectName"]
        FU28["FUNCTION: getOllamaBaseURL"]
        FU29["FUNCTION: getAzureBaseURL"]
        FU30["FUNCTION: getBedrockBaseURL"]
        FU31["FUNCTION: getVertexProjectId"]
        FU32["FUNCTION: getVertexLocation"]
        FU33["FUNCTION: getResponseLanguage"]
        FU34["FUNCTION: getParametersForRole"]
        FU35["FUNCTION: isApiKeySet"]
        FU36["FUNCTION: getMcpApiKeyStatus"]
        FU37["FUNCTION: getAvailableModels"]
        FU38["FUNCTION: writeConfig"]
        FU39["FUNCTION: isConfigFilePresent"]
        FU40["FUNCTION: getUserId"]
        FU41["FUNCTION: getAllProviders"]
        FU42["FUNCTION: getBaseUrlForRole"]
    end
    subgraph Exports["Exports"]
        E1["EXP: providersWithoutApiKeys"]
        E2["EXP: // Core config access
	getConfig"]
        E3["EXP: writeConfig"]
        E4["EXP: ConfigurationError"]
        E5["EXP: isConfigFilePresent"]
        E6["EXP: // Claude Code settings
	getClaudeCodeSettings"]
        E7["EXP: getClaudeCodeSettingsForCommand"]
        E8["EXP: // Validation
	validateProvider"]
        E9["EXP: validateProviderModelCombination"]
        E10["EXP: validateClaudeCodeSettings"]
        E11["EXP: VALIDATED_PROVIDERS"]
        E12["EXP: CUSTOM_PROVIDERS"]
        E13["EXP: ALL_PROVIDERS"]
        E14["EXP: MODEL_MAP"]
        E15["EXP: getAvailableModels"]
        E16["EXP: // Role-specific getters (No env var overrides)
	getMainProvider"]
        E17["EXP: getMainModelId"]
        E18["EXP: getMainMaxTokens"]
        E19["EXP: getMainTemperature"]
        E20["EXP: getResearchProvider"]
        E21["EXP: getResearchModelId"]
        E22["EXP: getResearchMaxTokens"]
        E23["EXP: getResearchTemperature"]
        E24["EXP: getFallbackProvider"]
        E25["EXP: getFallbackModelId"]
        E26["EXP: getFallbackMaxTokens"]
        E27["EXP: getFallbackTemperature"]
        E28["EXP: getBaseUrlForRole"]
        E29["EXP: // Global setting getters (No env var overrides)
	getLogLevel"]
        E30["EXP: getDebugFlag"]
        E31["EXP: getDefaultNumTasks"]
        E32["EXP: getDefaultSubtasks"]
        E33["EXP: getDefaultPriority"]
        E34["EXP: getProjectName"]
        E35["EXP: getOllamaBaseURL"]
        E36["EXP: getAzureBaseURL"]
        E37["EXP: getBedrockBaseURL"]
        E38["EXP: getResponseLanguage"]
        E39["EXP: getParametersForRole"]
        E40["EXP: getUserId"]
        E41["EXP: // API Key Checkers (still relevant)
	isApiKeySet"]
        E42["EXP: getMcpApiKeyStatus"]
        E43["EXP: // ADD: Function to get all provider names
	getAllProviders"]
        E44["EXP: getVertexProjectId"]
        E45["EXP: getVertexLocation"]
    end
    subgraph Parameters["Parameters"]
        P1["PARAM: {string|null} explicitRoot - Optional explicit path to the project root."]
        P2["PARAM: {boolean} forceReload - Force reloading the config file."]
        P3["PARAM: {string|null} explicitRoot - Optional explicit path to the project root."]
        P4["PARAM: {string|null} explicitRoot - Optional explicit path to the project root."]
        P5["PARAM: {string} role - The role ('main', 'research', 'fallback')."]
        P6["PARAM: {string|null} explicitRoot - Optional explicit path to the project root."]
        P7["PARAM: {string} providerName - The name of the provider (e.g., 'openai', 'anthropic')."]
        P8["PARAM: {string|null} projectRoot - Optional explicit path to the project root."]
        P9["PARAM: {string|null} explicitRoot - Optional explicit path to the project root."]
        P10["PARAM: {string|null} explicitRoot - Optional explicit path to the project root"]
        P11["PARAM: {string|null} explicitRoot - Optional explicit path to the project root."]
    end
    subgraph Constants["Const Declarations"]
        C1["CONST: __filename, VALUE: fileURLToPath(import.meta.url)"]
        C2["CONST: __dirname, VALUE: path.dirname(__filename)"]
        C3["CONST: supportedModelsRaw, VALUE: fs.readFileSync("]
        C4["CONST: DEFAULTS, VALUE: {"]
        C5["CONST: defaults, VALUE: DEFAULTS"]
        C6["CONST: hasProjectMarkers, VALUE: fs.existsSync(path.join(rootToUse, TASKMASTER_DIR)) ||"]
        C7["CONST: isLegacy, VALUE: configPath.endsWith(LEGACY_CONFIG_FILE)"]
        C8["CONST: rawData, VALUE: fs.readFileSync(configPath, 'utf-8')"]
        C9["CONST: parsedConfig, VALUE: JSON.parse(rawData)"]
        C10["CONST: hasTaskmasterDir, VALUE: fs.existsSync("]
        C11["CONST: hasLegacyMarker, VALUE: fs.existsSync("]
        C12["CONST: needsLoad, VALUE: !loadedConfig ||"]
        C13["CONST: newConfig, VALUE: _loadAndValidateConfig(explicitRoot)"]
        C14["CONST: BaseSettingsSchema, VALUE: z.object({"]
        C15["CONST: CommandSpecificSchema, VALUE: z.record("]
        C16["CONST: SettingsSchema, VALUE: BaseSettingsSchema.extend({"]
        C17["CONST: config, VALUE: getConfig(explicitRoot, forceReload)"]
        C18["CONST: settings, VALUE: getClaudeCodeSettings(explicitRoot, forceReload)"]
        C19["CONST: commandSpecific, VALUE: settings?.commandSpecific || {}"]
        C20["CONST: config, VALUE: getConfig(explicitRoot)"]
        C21["CONST: roleConfig, VALUE: config?.models?.[role]"]
        C22["CONST: config, VALUE: getConfig(explicitRoot)"]
        C23["CONST: val, VALUE: getGlobalConfig(explicitRoot).defaultSubtasks"]
        C24["CONST: parsedVal, VALUE: parseInt(val, 10)"]
        C25["CONST: val, VALUE: getGlobalConfig(explicitRoot).defaultNumTasks"]
        C26["CONST: parsedVal, VALUE: parseInt(val, 10)"]
        C27["CONST: roleConfig, VALUE: getModelConfigForRole(role, explicitRoot)"]
        C28["CONST: roleMaxTokens, VALUE: roleConfig.maxTokens"]
        C29["CONST: roleTemperature, VALUE: roleConfig.temperature"]
        C30["CONST: modelId, VALUE: roleConfig.modelId"]
        C31["CONST: providerName, VALUE: roleConfig.provider"]
        C32["CONST: providerModels, VALUE: MODEL_MAP[providerName]"]
        C33["CONST: modelDefinition, VALUE: providerModels.find((m) => m.id === modelId)"]
        C34["CONST: modelSpecificMaxTokens, VALUE: modelDefinition.max_tokens"]
        C35["CONST: openrouterDefault, VALUE: 32768"]
        C36["CONST: providersWithoutApiKeys, VALUE: ["]
        C37["CONST: keyMap, VALUE: {"]
        C38["CONST: providerKey, VALUE: providerName?.toLowerCase()"]
        C39["CONST: envVarName, VALUE: keyMap[providerKey]"]
        C40["CONST: apiKeyValue, VALUE: resolveEnvVariable(envVarName, session, projectRoot)"]
        C41["CONST: rootDir, VALUE: projectRoot || findProjectRoot()"]
        C42["CONST: mcpConfigPath, VALUE: path.join(rootDir, '.cursor', 'mcp.json')"]
        C43["CONST: mcpConfigRaw, VALUE: fs.readFileSync(mcpConfigPath, 'utf-8')"]
        C44["CONST: mcpConfig, VALUE: JSON.parse(mcpConfigRaw)"]
        C45["CONST: mcpEnv, VALUE: mcpConfig?.mcpServers?.['task-master-ai']?.env ||"]
        C46["CONST: available, VALUE: []"]
        C47["CONST: modelId, VALUE: modelObj.id"]
        C48["CONST: sweScore, VALUE: modelObj.swe_score"]
        C49["CONST: cost, VALUE: modelObj.cost_per_1m_tokens"]
        C50["CONST: allowedRoles, VALUE: modelObj.allowed_roles || ['main', 'fallback']"]
        C51["CONST: nameParts, VALUE: modelId"]
        C52["CONST: foundRoot, VALUE: findProjectRoot()"]
        C53["CONST: taskmasterDir, VALUE: path.join(rootPath, '.taskmaster')"]
        C54["CONST: configPath, VALUE: path.join(taskmasterDir, 'config.json')"]
        C55["CONST: config, VALUE: getConfig(explicitRoot)"]
        C56["CONST: success, VALUE: writeConfig(config, explicitRoot)"]
        C57["CONST: roleConfig, VALUE: getModelConfigForRole(role, explicitRoot)"]
        C58["CONST: provider, VALUE: roleConfig?.provider"]
        C59["CONST: envVarName, VALUE: `${provider.toUpperCase()}_BASE_URL`"]
        C60["CONST: providersWithoutApiKeys, VALUE: ["]
    end
    subgraph ExecutionFlow["Execution Flow"]
        FL1["Identify and load dependencies and modules"]
        FL2["Define functions and core logic for this module"]
        FL3["Expose public API via exports"]
    end
    subgraph FileName["config-manager.js"]
        Imports
        Dependencies
        FunctionsDefined
        Exports
        Parameters
        Constants
        ExecutionFlow
    end
    FL1 --> FL2
    FL2 --> FL3
```