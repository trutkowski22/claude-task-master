```mermaid
flowchart TB
    subgraph Imports["Imports"]
        I1["IMPORT: path, FROM: path"]
        I2["IMPORT: fs, FROM: fs"]
        I3["IMPORT: ../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        I4["IMPORT: ./base-profile.js, FROM: /claude-task-master/src/profiles/base-profile.js"]
    end
    subgraph Dependencies["Dependencies"]
        D1["DEP: File system"]
        D2["DEP: Path resolution"]
    end
    subgraph FunctionsDefined["Functions Defined"]
        FU1["FUNCTION: copyRecursiveSync"]
        FU2["FUNCTION: removeDirectoryRecursive"]
        FU3["FUNCTION: onAddRulesProfile"]
        FU4["FUNCTION: onRemoveRulesProfile"]
        FU5["FUNCTION: transformToClaudeFormat"]
        FU6["FUNCTION: onPostConvertRulesProfile"]
    end
    subgraph Exports["Exports"]
        E1["EXP: claudeProfile"]
        E2["EXP: onAddRulesProfile"]
        E3["EXP: onRemoveRulesProfile"]
        E4["EXP: onPostConvertRulesProfile"]
    end
    subgraph Parameters["Parameters"]
        P1["PARAM: {Object} mcpConfig - Standard MCP configuration object"]
    end
    subgraph Constants["Const Declarations"]
        C1["CONST: exists, VALUE: fs.existsSync(src)"]
        C2["CONST: stats, VALUE: exists && fs.statSync(src)"]
        C3["CONST: isDirectory, VALUE: exists && stats.isDirectory()"]
        C4["CONST: claudeSourceDir, VALUE: path.join(assetsDir, 'claude')"]
        C5["CONST: claudeDestDir, VALUE: path.join(targetDir, '.claude')"]
        C6["CONST: sourceFile, VALUE: path.join(assetsDir, 'AGENTS.md')"]
        C7["CONST: userClaudeFile, VALUE: path.join(targetDir, 'CLAUDE.md')"]
        C8["CONST: taskMasterClaudeFile, VALUE: path.join(targetDir, '.taskmaster', 'CLAUDE.md')"]
        C9["CONST: importLine, VALUE: '@./.taskmaster/CLAUDE.md'"]
        C10["CONST: importSection, VALUE: `\\n## Task Master AI Instructions\\n**Import Task Master's development workflow commands and guidelines, treat as if i..."]
        C11["CONST: taskMasterDir, VALUE: path.join(targetDir, '.taskmaster')"]
        C12["CONST: content, VALUE: fs.readFileSync(userClaudeFile, 'utf8')"]
        C13["CONST: updatedContent, VALUE: content.trim() + '\\n' + importSection + '\\n'"]
        C14["CONST: minimalContent, VALUE: `# Claude Code Instructions\\n${importSection}\\n`"]
        C15["CONST: claudeDir, VALUE: path.join(targetDir, '.claude')"]
        C16["CONST: userClaudeFile, VALUE: path.join(targetDir, 'CLAUDE.md')"]
        C17["CONST: taskMasterClaudeFile, VALUE: path.join(targetDir, '.taskmaster', 'CLAUDE.md')"]
        C18["CONST: importLine, VALUE: '@./.taskmaster/CLAUDE.md'"]
        C19["CONST: content, VALUE: fs.readFileSync(userClaudeFile, 'utf8')"]
        C20["CONST: lines, VALUE: content.split('\\n')"]
        C21["CONST: filteredLines, VALUE: []"]
        C22["CONST: claudeConfig, VALUE: {}"]
        C23["CONST: reorderedServer, VALUE: {}"]
        C24["CONST: mcpConfigPath, VALUE: path.join(targetDir, '.mcp.json')"]
        C25["CONST: mcpConfig, VALUE: JSON.parse(fs.readFileSync(mcpConfigPath, 'utf8'))"]
        C26["CONST: claudeConfig, VALUE: transformToClaudeFormat(mcpConfig)"]
        C27["CONST: claudeProfile, VALUE: createProfile({"]
    end
    subgraph ExecutionFlow["Execution Flow"]
        FL1["Identify and load dependencies and modules"]
        FL2["Define functions and core logic for this module"]
        FL3["Expose public API via exports"]
    end
    subgraph FileName["claude.js"]
        Imports
        Dependencies
        FunctionsDefined
        Exports
        Parameters
        Constants
        ExecutionFlow
    end
    FL1 --> FL2
    FL2 --> FL3
```