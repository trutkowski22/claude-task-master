```mermaid
flowchart TB
    subgraph Imports["Imports"]
        I1["IMPORT: commander, FROM: commander"]
        I2["IMPORT: path, FROM: path"]
        I3["IMPORT: chalk, FROM: chalk"]
        I4["IMPORT: boxen, FROM: boxen"]
        I5["IMPORT: fs, FROM: fs"]
        I6["IMPORT: https, FROM: https"]
        I7["IMPORT: http, FROM: http"]
        I8["IMPORT: inquirer, FROM: inquirer"]
        I9["IMPORT: @inquirer/search, FROM: @inquirer/search"]
        I10["IMPORT: ora, FROM: ora"]
        I11["IMPORT: ../../src/constants/providers.js, FROM: /claude-task-master/src/constants/providers.js"]
        I12["IMPORT: ../../src/task-master.js, FROM: /claude-task-master/src/task-master.js"]
        I13["IMPORT: ../init.js, FROM: /claude-task-master/scripts/init.js"]
        I14["IMPORT: ../../src/utils/getVersion.js, FROM: /claude-task-master/src/utils/getVersion.js"]
        I15["IMPORT: ./sync-readme.js, FROM: /claude-task-master/scripts/modules/sync-readme.js"]
        I16["IMPORT: ../../src/constants/profiles.js, FROM: /claude-task-master/src/constants/profiles.js"]
    end
    subgraph Dependencies["Dependencies"]
        D1["DEP: File system"]
        D2["DEP: Path resolution"]
    end
    subgraph FunctionsDefined["Functions Defined"]
        FU1["FUNCTION: runInteractiveSetup"]
        FU2["FUNCTION: fetchOpenRouterModelsCLI"]
        FU3["FUNCTION: fetchOllamaModelsCLI"]
        FU4["FUNCTION: handleSetModel"]
        FU5["FUNCTION: registerCommands"]
        FU6["FUNCTION: confirmOverwriteIfNeeded"]
        FU7["FUNCTION: showAddSubtaskHelp"]
        FU8["FUNCTION: showRemoveSubtaskHelp"]
        FU9["FUNCTION: showTagsHelp"]
        FU10["FUNCTION: showAddTagHelp"]
        FU11["FUNCTION: showDeleteTagHelp"]
        FU12["FUNCTION: showUseTagHelp"]
        FU13["FUNCTION: showResearchHelp"]
        FU14["FUNCTION: setupCLI"]
        FU15["FUNCTION: checkForUpdate"]
        FU16["FUNCTION: compareVersions"]
        FU17["FUNCTION: displayUpgradeNotification"]
        FU18["FUNCTION: runCLI"]
        FU19["FUNCTION: resolveComplexityReportPath"]
        FU20["FUNCTION: getPromptData"]
        FU21["FUNCTION: createSearchSource"]
    end
    subgraph Exports["Exports"]
        E1["EXP: resolveComplexityReportPath"]
        E2["EXP: registerCommands"]
        E3["EXP: setupCLI"]
        E4["EXP: runCLI"]
        E5["EXP: checkForUpdate"]
        E6["EXP: compareVersions"]
        E7["EXP: displayUpgradeNotification"]
    end
    subgraph Parameters["Parameters"]
        P1["PARAM: {string|null} projectRoot - The resolved project root directory."]
        P2["PARAM: {Object} program - Commander program instance"]
        P3["PARAM: {string} v1 - First version"]
        P4["PARAM: {string} v2 - Second version"]
        P5["PARAM: {string} currentVersion - Current version"]
        P6["PARAM: {string} latestVersion - Latest version"]
        P7["PARAM: {Array} argv - Command-line arguments"]
        P8["PARAM: {string|undefined} outputOpt - -output value from CLI (may be undefined)"]
    end
    subgraph Constants["Const Declarations"]
        C1["CONST: currentConfigResult, VALUE: await getModelConfiguration({ projectRoot })"]
        C2["CONST: currentModels, VALUE: currentConfigResult.success"]
        C3["CONST: options, VALUE: {"]
        C4["CONST: req, VALUE: https.request(options, (res) => {"]
        C5["CONST: parsedData, VALUE: JSON.parse(data)"]
        C6["CONST: url, VALUE: new URL(baseURL)"]
        C7["CONST: isHttps, VALUE: url.protocol === 'https:'"]
        C8["CONST: port, VALUE: url.port || (isHttps ? 443 : 80)"]
        C9["CONST: basePath, VALUE: url.pathname.endsWith('/')"]
        C10["CONST: options, VALUE: {"]
        C11["CONST: requestLib, VALUE: isHttps ? https : http"]
        C12["CONST: req, VALUE: requestLib.request(options, (res) => {"]
        C13["CONST: parsedData, VALUE: JSON.parse(data)"]
        C14["CONST: getPromptData, VALUE: (role, allowNone = false) => {"]
        C15["CONST: currentModel, VALUE: currentModels[role]"]
        C16["CONST: allModelsRaw, VALUE: getAvailableModels()"]
        C17["CONST: modelsByProvider, VALUE: allModelsRaw.reduce((acc, model) => {"]
        C18["CONST: cancelOption, VALUE: { name: '⏹ Cancel Model Setup', value: '__CANCEL__' }"]
        C19["CONST: noChangeOption, VALUE: currentModel?.modelId"]
        C20["CONST: customProviderOptions, VALUE: ["]
        C21["CONST: roleChoices, VALUE: Object.entries(modelsByProvider)"]
        C22["CONST: providerModels, VALUE: models"]
        C23["CONST: systemOptions, VALUE: []"]
        C24["CONST: systemLength, VALUE: systemOptions.length"]
        C25["CONST: noneOptionIndex, VALUE: systemLength + 1"]
        C26["CONST: mainPromptData, VALUE: getPromptData('main')"]
        C27["CONST: researchPromptData, VALUE: getPromptData('research')"]
        C28["CONST: fallbackPromptData, VALUE: getPromptData('fallback', true)"]
        C29["CONST: createSearchSource, VALUE: (choices, defaultValue) => {"]
        C30["CONST: filteredChoices, VALUE: choices.filter((choice) => {"]
        C31["CONST: searchText, VALUE: choice.name || ''"]
        C32["CONST: answers, VALUE: {}"]
        C33["CONST: coreOptionsSetup, VALUE: { projectRoot }"]
        C34["CONST: openRouterModels, VALUE: await fetchOpenRouterModelsCLI()"]
        C35["CONST: ollamaBaseURL, VALUE: getBaseUrlForRole(role, projectRoot)"]
        C36["CONST: ollamaModels, VALUE: await fetchOllamaModelsCLI(ollamaBaseURL)"]
        C37["CONST: result, VALUE: await setModel(role, modelIdToSet, {"]
        C38["CONST: currentCfg, VALUE: getConfig(projectRoot)"]
        C39["CONST: commandName, VALUE: this._name || 'unknown'"]
        C40["CONST: initOptions, VALUE: {"]
        C41["CONST: numTasks, VALUE: parseInt(options.numTasks, 10)"]
        C42["CONST: force, VALUE: options.force || false"]
        C43["CONST: append, VALUE: options.append || false"]
        C44["CONST: research, VALUE: options.research || false"]
        C45["CONST: useAppend, VALUE: append"]
        C46["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
        C47["CONST: tasksPath, VALUE: taskMaster.getTasksPath()"]
        C48["CONST: existingFileContent, VALUE: fs.readFileSync(tasksPath, 'utf8')"]
        C49["CONST: allData, VALUE: JSON.parse(existingFileContent)"]
        C50["CONST: overwrite, VALUE: await confirmTaskOverwrite(tasksPath)"]
        C51["CONST: outputPath, VALUE: taskMaster.getTasksPath() ||"]
        C52["CONST: taskMaster, VALUE: initTaskMaster({"]
        C53["CONST: fromId, VALUE: parseInt(options.from, 10)"]
        C54["CONST: prompt, VALUE: options.prompt"]
        C55["CONST: useResearch, VALUE: options.research || false"]
        C56["CONST: tasksPath, VALUE: taskMaster.getTasksPath()"]
        C57["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
        C58["CONST: taskMaster, VALUE: initTaskMaster({"]
        C59["CONST: tasksPath, VALUE: taskMaster.getTasksPath()"]
        C60["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
        C61["CONST: taskId, VALUE: parseInt(options.id, 10)"]
        C62["CONST: prompt, VALUE: options.prompt"]
        C63["CONST: useResearch, VALUE: options.research || false"]
        C64["CONST: result, VALUE: await updateTaskById("]
        C65["CONST: taskMaster, VALUE: initTaskMaster({"]
        C66["CONST: tasksPath, VALUE: taskMaster.getTasksPath()"]
        C67["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
        C68["CONST: subtaskId, VALUE: options.id"]
        C69["CONST: prompt, VALUE: options.prompt"]
        C70["CONST: useResearch, VALUE: options.research || false"]
        C71["CONST: result, VALUE: await updateSubtaskById("]
        C72["CONST: taskMaster, VALUE: initTaskMaster({"]
        C73["CONST: tasksPath, VALUE: taskMaster.getTasksPath()"]
        C74["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
        C75["CONST: taskIds, VALUE: options.id.split(',').map((id) => {"]
        C76["CONST: parsed, VALUE: parseInt(id.trim(), 10)"]
        C77["CONST: context, VALUE: {"]
        C78["CONST: result, VALUE: await scopeUpTask("]
        C79["CONST: taskMaster, VALUE: initTaskMaster({"]
        C80["CONST: tasksPath, VALUE: taskMaster.getTasksPath()"]
        C81["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
        C82["CONST: taskIds, VALUE: options.id.split(',').map((id) => {"]
        C83["CONST: parsed, VALUE: parseInt(id.trim(), 10)"]
        C84["CONST: context, VALUE: {"]
        C85["CONST: result, VALUE: await scopeDownTask("]
        C86["CONST: taskMaster, VALUE: initTaskMaster({"]
        C87["CONST: outputDir, VALUE: options.output"]
        C88["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
        C89["CONST: taskMaster, VALUE: initTaskMaster({"]
        C90["CONST: taskId, VALUE: options.id"]
        C91["CONST: status, VALUE: options.status"]
        C92["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
        C93["CONST: initOptions, VALUE: {"]
        C94["CONST: taskMaster, VALUE: initTaskMaster(initOptions)"]
        C95["CONST: statusFilter, VALUE: options.status"]
        C96["CONST: withSubtasks, VALUE: options.withSubtasks || false"]
        C97["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
        C98["CONST: initOptions, VALUE: {"]
        C99["CONST: taskMaster, VALUE: initTaskMaster(initOptions)"]
        C100["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
        C101["CONST: result, VALUE: await expandAllTasks("]
        C102["CONST: initOptions, VALUE: {"]
        C103["CONST: taskMaster, VALUE: initTaskMaster(initOptions)"]
        C104["CONST: modelOverride, VALUE: options.model"]
        C105["CONST: thresholdScore, VALUE: parseFloat(options.threshold)"]
        C106["CONST: useResearch, VALUE: options.research || false"]
        C107["CONST: targetTag, VALUE: taskMaster.getCurrentTag()"]
        C108["CONST: outputPath, VALUE: taskMaster.getComplexityReportPath()"]
        C109["CONST: fromStr, VALUE: options.from ? options.from : 'first'"]
        C110["CONST: toStr, VALUE: options.to ? options.to : 'last'"]
        C111["CONST: updatedOptions, VALUE: {"]
        C112["CONST: initOptions, VALUE: {"]
        C113["CONST: taskMaster, VALUE: initTaskMaster(initOptions)"]
        C114["CONST: validDetailLevels, VALUE: ['low', 'medium', 'high']"]
        C115["CONST: trimmedId, VALUE: id.trim()"]
        C116["CONST: trimmedPath, VALUE: filePath.trim()"]
        C117["CONST: saveToId, VALUE: options.saveTo.trim()"]
        C118["CONST: saveTarget, VALUE: options.save.trim()"]
        C119["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
        C120["CONST: tasksData, VALUE: readJSON("]
        C121["CONST: fullPath, VALUE: path.isAbsolute(filePath)"]
        C122["CONST: validatedParams, VALUE: {"]
        C123["CONST: researchOptions, VALUE: {"]
        C124["CONST: result, VALUE: await performResearch("]
        C125["CONST: isSubtask, VALUE: validatedParams.saveToId.includes('.')"]
        C126["CONST: researchContent, VALUE: `## Research Query: ${validatedParams.prompt}"]
        C127["CONST: updateTaskById, VALUE: ("]
        C128["CONST: taskIdNum, VALUE: parseInt(validatedParams.saveToId, 10)"]
        C129["CONST: saveContent, VALUE: `# Research Query: ${validatedParams.prompt}"]
        C130["CONST: taskIds, VALUE: options.id"]
        C131["CONST: all, VALUE: options.all"]
        C132["CONST: taskMaster, VALUE: initTaskMaster({"]
        C133["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
        C134["CONST: data, VALUE: readJSON("]
        C135["CONST: allIds, VALUE: data.tasks.map((t) => t.id).join(',')"]
        C136["CONST: isManualCreation, VALUE: options.title && options.description"]
        C137["CONST: tasksPath, VALUE: options.file || TASKMASTER_TASKS_FILE"]
        C138["CONST: taskMaster, VALUE: initTaskMaster({"]
        C139["CONST: projectRoot, VALUE: taskMaster.getProjectRoot()"]
        C140["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
        C141["CONST: dependenciesArray, VALUE: options.dependencies"]
        C142["CONST: context, VALUE: {"]
        C143["CONST: initOptions, VALUE: {"]
        C144["CONST: taskMaster, VALUE: initTaskMaster({"]
        C145["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
        C146["CONST: context, VALUE: {"]
        C147["CONST: initOptions, VALUE: {"]
        C148["CONST: taskMaster, VALUE: initTaskMaster(initOptions)"]
        C149["CONST: idArg, VALUE: taskId || options.id"]
        C150["CONST: statusFilter, VALUE: options.status"]
        C151["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
        C152["CONST: taskIds, VALUE: idArg"]
        C153["CONST: initOptions, VALUE: {"]
        C154["CONST: taskMaster, VALUE: initTaskMaster(initOptions)"]
        C155["CONST: taskId, VALUE: options.id"]
        C156["CONST: dependencyId, VALUE: options.dependsOn"]
        C157["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
        C158["CONST: formattedTaskId, VALUE: taskId.includes('.')"]
        C159["CONST: formattedDependencyId, VALUE: dependencyId.includes('.')"]
        C160["CONST: initOptions, VALUE: {"]
        C161["CONST: taskMaster, VALUE: initTaskMaster(initOptions)"]
        C162["CONST: taskId, VALUE: options.id"]
        C163["CONST: dependencyId, VALUE: options.dependsOn"]
        C164["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
        C165["CONST: formattedTaskId, VALUE: taskId.includes('.')"]
        C166["CONST: formattedDependencyId, VALUE: dependencyId.includes('.')"]
        C167["CONST: initOptions, VALUE: {"]
        C168["CONST: taskMaster, VALUE: initTaskMaster(initOptions)"]
        C169["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
        C170["CONST: initOptions, VALUE: {"]
        C171["CONST: taskMaster, VALUE: initTaskMaster(initOptions)"]
        C172["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
        C173["CONST: initOptions, VALUE: {"]
        C174["CONST: taskMaster, VALUE: initTaskMaster(initOptions)"]
        C175["CONST: taskMaster, VALUE: initTaskMaster({"]
        C176["CONST: parentId, VALUE: options.parent"]
        C177["CONST: existingTaskId, VALUE: options.taskId"]
        C178["CONST: generateFiles, VALUE: options.generate || false"]
        C179["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
        C180["CONST: newSubtaskData, VALUE: {"]
        C181["CONST: subtask, VALUE: await addSubtask("]
        C182["CONST: taskMaster, VALUE: initTaskMaster({"]
        C183["CONST: subtaskIds, VALUE: options.id"]
        C184["CONST: convertToTask, VALUE: options.convert || false"]
        C185["CONST: generateFiles, VALUE: options.generate || false"]
        C186["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
        C187["CONST: subtaskIdArray, VALUE: subtaskIds.split(',').map((id) => id.trim())"]
        C188["CONST: result, VALUE: await removeSubtask("]
        C189["CONST: taskMaster, VALUE: initTaskMaster({"]
        C190["CONST: taskIdsString, VALUE: options.id"]
        C191["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
        C192["CONST: taskIdsToRemove, VALUE: taskIdsString"]
        C193["CONST: data, VALUE: readJSON("]
        C194["CONST: existingTasksToRemove, VALUE: []"]
        C195["CONST: nonExistentIds, VALUE: []"]
        C196["CONST: dependentTaskMessages, VALUE: []"]
        C197["CONST: findResult, VALUE: findTaskById(data.tasks, taskId)"]
        C198["CONST: taskObject, VALUE: findResult.task"]
        C199["CONST: dependentTasks, VALUE: data.tasks.filter("]
        C200["CONST: indicator, VALUE: startLoadingIndicator("]
        C201["CONST: existingIdsString, VALUE: existingTasksToRemove"]
        C202["CONST: result, VALUE: await removeTask("]
        C203["CONST: userSpecifiedProfiles, VALUE: cmdOptions.rules"]
        C204["CONST: taskMaster, VALUE: initTaskMaster({"]
        C205["CONST: projectRoot, VALUE: taskMaster.getProjectRoot()"]
        C206["CONST: providerFlags, VALUE: ["]
        C207["CONST: isSetup, VALUE: options.setup"]
        C208["CONST: isSetOperation, VALUE: options.setMain || options.setResearch || options.setFallback"]
        C209["CONST: result, VALUE: await setModel('main', options.setMain, {"]
        C210["CONST: result, VALUE: await setModel('research', options.setResearch, {"]
        C211["CONST: result, VALUE: await setModel('fallback', options.setFallback, {"]
        C212["CONST: configResult, VALUE: await getModelConfiguration({ projectRoot })"]
        C213["CONST: availableResult, VALUE: await getAvailableModelsList({ projectRoot })"]
        C214["CONST: apiKeyStatusResult, VALUE: await getApiKeyStatusReport({ projectRoot })"]
        C215["CONST: activeIds, VALUE: configResult.success"]
        C216["CONST: displayableAvailable, VALUE: availableResult.data.models.filter("]
        C217["CONST: configExists, VALUE: isConfigFilePresent(projectRoot)"]
        C218["CONST: taskMaster, VALUE: initTaskMaster({})"]
        C219["CONST: projectRoot, VALUE: taskMaster.getProjectRoot()"]
        C220["CONST: userResponse, VALUE: await inquirer.prompt(["]
        C221["CONST: result, VALUE: setResponseLanguage(responseLanguage, {"]
        C222["CONST: taskMaster, VALUE: initTaskMaster({"]
        C223["CONST: sourceId, VALUE: options.from"]
        C224["CONST: destinationId, VALUE: options.to"]
        C225["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
        C226["CONST: sourceIds, VALUE: sourceId.split(',').map((id) => id.trim())"]
        C227["CONST: destinationIds, VALUE: destinationId.split(',').map((id) => id.trim())"]
        C228["CONST: tasksData, VALUE: readJSON("]
        C229["CONST: fromId, VALUE: sourceIds[i]"]
        C230["CONST: toId, VALUE: destinationIds[i]"]
        C231["CONST: result, VALUE: await moveTask("]
        C232["CONST: taskMaster, VALUE: initTaskMaster({})"]
        C233["CONST: projectRoot, VALUE: taskMaster.getProjectRoot()"]
        C234["CONST: selectedRuleProfiles, VALUE: await runInteractiveProfilesSetup()"]
        C235["CONST: profile, VALUE: selectedRuleProfiles[i]"]
        C236["CONST: profileConfig, VALUE: getRulesProfile(profile)"]
        C237["CONST: addResult, VALUE: convertAllRulesToProfileRules("]
        C238["CONST: expandedProfiles, VALUE: profiles"]
        C239["CONST: installedProfiles, VALUE: getInstalledProfiles(projectRoot)"]
        C240["CONST: removalResults, VALUE: []"]
        C241["CONST: addResults, VALUE: []"]
        C242["CONST: profileConfig, VALUE: getRulesProfile(profile)"]
        C243["CONST: addResult, VALUE: convertAllRulesToProfileRules("]
        C244["CONST: result, VALUE: removeProfileRules(projectRoot, profileConfig)"]
        C245["CONST: totalProcessed, VALUE: removalResults.length"]
        C246["CONST: totalSuccessful, VALUE: successfulRemovals.length"]
        C247["CONST: totalSkipped, VALUE: skippedRemovals.length"]
        C248["CONST: totalFailed, VALUE: failedRemovals.length"]
        C249["CONST: taskMaster, VALUE: initTaskMaster({"]
        C250["CONST: withSubtasks, VALUE: options.withSubtasks || false"]
        C251["CONST: status, VALUE: options.status || null"]
        C252["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
        C253["CONST: success, VALUE: await syncTasksToReadme(taskMaster.getProjectRoot(), {"]
        C254["CONST: taskMaster, VALUE: initTaskMaster({"]
        C255["CONST: tasksPath, VALUE: taskMaster.getTasksPath()"]
        C256["CONST: context, VALUE: {"]
        C257["CONST: gitUtils, VALUE: await import('./utils/git-utils.js')"]
        C258["CONST: currentBranch, VALUE: await gitUtils.getCurrentBranch(projectRoot)"]
        C259["CONST: branchOptions, VALUE: {"]
        C260["CONST: createOptions, VALUE: {"]
        C261["CONST: finalTagName, VALUE: options.fromBranch"]
        C262["CONST: taskMaster, VALUE: initTaskMaster({"]
        C263["CONST: tasksPath, VALUE: taskMaster.getTasksPath()"]
        C264["CONST: deleteOptions, VALUE: {"]
        C265["CONST: context, VALUE: {"]
        C266["CONST: taskMaster, VALUE: initTaskMaster({"]
        C267["CONST: tasksPath, VALUE: taskMaster.getTasksPath()"]
        C268["CONST: listOptions, VALUE: {"]
        C269["CONST: context, VALUE: {"]
        C270["CONST: taskMaster, VALUE: initTaskMaster({"]
        C271["CONST: tasksPath, VALUE: taskMaster.getTasksPath()"]
        C272["CONST: context, VALUE: {"]
        C273["CONST: taskMaster, VALUE: initTaskMaster({"]
        C274["CONST: tasksPath, VALUE: taskMaster.getTasksPath()"]
        C275["CONST: context, VALUE: {"]
        C276["CONST: taskMaster, VALUE: initTaskMaster({"]
        C277["CONST: tasksPath, VALUE: taskMaster.getTasksPath()"]
        C278["CONST: copyOptions, VALUE: {"]
        C279["CONST: context, VALUE: {"]
        C280["CONST: programInstance, VALUE: program"]
        C281["CONST: packageJsonPath, VALUE: path.join(process.cwd(), 'package.json')"]
        C282["CONST: packageJson, VALUE: JSON.parse("]
        C283["CONST: originalHelpInformation, VALUE: programInstance.helpInformation.bind(programInstance)"]
        C284["CONST: currentVersion, VALUE: getTaskMasterVersion()"]
        C285["CONST: options, VALUE: {"]
        C286["CONST: req, VALUE: https.request(options, (res) => {"]
        C287["CONST: npmData, VALUE: JSON.parse(data)"]
        C288["CONST: latestVersion, VALUE: npmData['dist-tags']?.latest || currentVersion"]
        C289["CONST: needsUpdate, VALUE: compareVersions(currentVersion, latestVersion) < 0"]
        C290["CONST: v1Parts, VALUE: v1.split('.').map((p) => parseInt(p, 10))"]
        C291["CONST: v2Parts, VALUE: v2.split('.').map((p) => parseInt(p, 10))"]
        C292["CONST: v1Part, VALUE: v1Parts[i] || 0"]
        C293["CONST: v2Part, VALUE: v2Parts[i] || 0"]
        C294["CONST: message, VALUE: boxen("]
        C295["CONST: updateCheckPromise, VALUE: checkForUpdate()"]
        C296["CONST: programInstance, VALUE: setupCLI()"]
        C297["CONST: updateInfo, VALUE: await updateCheckPromise"]
        C298["CONST: taskMaster, VALUE: initTaskMaster({})"]
        C299["CONST: tasksPath, VALUE: taskMaster.getTasksPath()"]
        C300["CONST: statePath, VALUE: taskMaster.getStatePath()"]
        C301["CONST: rawData, VALUE: fs.readFileSync(tasksPath, 'utf8')"]
        C302["CONST: parsedData, VALUE: JSON.parse(rawData)"]
        C303["CONST: rawStateData, VALUE: fs.readFileSync(statePath, 'utf8')"]
        C304["CONST: base, VALUE: path.join(projectRoot, COMPLEXITY_REPORT_FILE)"]
    end
    subgraph EnvironmentVariables["Environment Variables"]
        ENV1["ENV: AWS_ACCESS_KEY_ID, USAGE: accessed via process.env"]
        ENV2["ENV: AWS_SECRET_ACCESS_KEY, USAGE: accessed via process.env"]
        ENV3["ENV: AZURE_OPENAI_API_KEY, USAGE: accessed via process.env"]
        ENV4["ENV: AZURE_OPENAI_ENDPOINT, USAGE: accessed via process.env"]
        ENV5["ENV: GOOGLE_API_KEY, USAGE: accessed via process.env"]
        ENV6["ENV: GOOGLE_APPLICATION_CREDENTIALS, USAGE: accessed via process.env"]
    end
    subgraph ExecutionFlow["Execution Flow"]
        FL1["Identify and load dependencies and modules"]
        FL2["Define functions and core logic for this module"]
        FL3["Expose public API via exports"]
    end
    subgraph FileName["commands.js"]
        Imports
        Dependencies
        FunctionsDefined
        Exports
        Parameters
        Constants
        EnvironmentVariables
        ExecutionFlow
    end
    FL1 --> FL2
    FL2 --> FL3
```