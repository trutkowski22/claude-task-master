```mermaid
flowchart TB
    subgraph Imports["Imports"]
        I1["IMPORT: ai, FROM: ai"]
        I2["IMPORT: jsonc-parser, FROM: jsonc-parser"]
        I3["IMPORT: ./base-provider.js, FROM: /claude-task-master/src/ai-providers/base-provider.js"]
        I4["IMPORT: ../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
    end
    subgraph FunctionsDefined["Functions Defined"]
        FU1["FUNCTION: loadGeminiCliModule"]
        FU2["FUNCTION: tryParse"]
    end
    subgraph Exports["Exports"]
        E1["EXP: GeminiCliProvider"]
    end
    subgraph Parameters["Parameters"]
        P1["PARAM: {object} params - Parameters to validate"]
        P2["PARAM: {object} params - Parameters for client initialization"]
        P3["PARAM: {string} [params.apiKey] - Optional Gemini API key (rarely used with gemini-cli)"]
        P4["PARAM: {string} [params.baseURL] - Optional custom API endpoint"]
        P5["PARAM: {Array} messages - Array of message objects"]
        P6["PARAM: {Object} options - Options for system prompt enhancement"]
        P7["PARAM: {boolean} options.enforceJsonOutput - Whether to add JSON enforcement to system prompt"]
        P8["PARAM: {string} text - Text to validate"]
        P9["PARAM: {Array} messages - Array of message objects"]
        P10["PARAM: {Array} messages - Array of message objects"]
        P11["PARAM: {string} text - Raw text which may contain JSON"]
    end
    subgraph Constants["Const Declarations"]
        C1["CONST: mod, VALUE: await import('ai-sdk-provider-gemini-cli')"]
        C2["CONST: systemMessages, VALUE: messages.filter((msg) => msg.role === 'system')"]
        C3["CONST: nonSystemMessages, VALUE: messages.filter((msg) => msg.role !== 'system')"]
        C4["CONST: jsonEnforcement, VALUE: this._getJsonEnforcementPrompt()"]
        C5["CONST: userMessages, VALUE: messages.filter((msg) => msg.role === 'user')"]
        C6["CONST: combinedText, VALUE: userMessages"]
        C7["CONST: jsonIndicators, VALUE: ["]
        C8["CONST: systemMsg, VALUE: messages.find((m) => m.role === 'system')"]
        C9["CONST: isExpandTask, VALUE: systemMsg &&"]
        C10["CONST: subtaskCountMatch, VALUE: systemMsg.content.match("]
        C11["CONST: subtaskCount, VALUE: subtaskCountMatch ? subtaskCountMatch[1] : '10'"]
        C12["CONST: simplifiedPrompt, VALUE: `Generate exactly ${subtaskCount} subtasks in the following JSON format."]
        C13["CONST: firstObj, VALUE: content.indexOf('{')"]
        C14["CONST: firstArr, VALUE: content.indexOf('[')"]
        C15["CONST: start, VALUE: firstArr === -1"]
        C16["CONST: tryParse, VALUE: (value) => {"]
        C17["CONST: errors, VALUE: []"]
        C18["CONST: result, VALUE: parse(value, errors, {"]
        C19["CONST: fullParse, VALUE: tryParse(content)"]
        C20["CONST: openChar, VALUE: content[0]"]
        C21["CONST: closeChar, VALUE: openChar === '{' ? '}' : ']'"]
        C22["CONST: char, VALUE: content[i]"]
        C23["CONST: candidate, VALUE: content.slice(0, lastValidEnd)"]
        C24["CONST: parsed, VALUE: tryParse(candidate)"]
        C25["CONST: maxAttempts, VALUE: Math.min(5, Math.floor(lastValidEnd / 100))"]
        C26["CONST: testEnd, VALUE: Math.max("]
        C27["CONST: candidate, VALUE: content.slice(0, testEnd)"]
        C28["CONST: parsed, VALUE: tryParse(candidate)"]
        C29["CONST: enforceJsonOutput, VALUE: this._detectJsonRequest(params.messages)"]
        C30["CONST: client, VALUE: await this.getClient(params)"]
        C31["CONST: result, VALUE: await generateText({"]
        C32["CONST: extractedJson, VALUE: this.extractJson(result.text)"]
        C33["CONST: enforceJsonOutput, VALUE: this._detectJsonRequest(params.messages)"]
        C34["CONST: client, VALUE: await this.getClient(params)"]
        C35["CONST: stream, VALUE: await streamText({"]
        C36["CONST: client, VALUE: await this.getClient(params)"]
        C37["CONST: result, VALUE: await generateObject({"]
        C38["CONST: extractedJson, VALUE: this.extractJson(result.rawResponse.text)"]
    end
    subgraph ExecutionFlow["Execution Flow"]
        FL1["Identify and load dependencies and modules"]
        FL2["Define functions and core logic for this module"]
        FL3["Expose public API via exports"]
    end
    subgraph FileName["gemini-cli.js"]
        Imports
        FunctionsDefined
        Exports
        Parameters
        Constants
        ExecutionFlow
    end
    FL1 --> FL2
    FL2 --> FL3
```