```mermaid
flowchart TB
    %% SHARED INFRASTRUCTURE SECTIONS
    subgraph SharedImports["Shared-Infrastructure-Imports"]
        I1["IMPORT: url, FROM: url"]
        I2["IMPORT: path, FROM: path"]
        I3["IMPORT: module, FROM: module"]
        I4["IMPORT: child_process, FROM: child_process"]
        I5["IMPORT: commander, FROM: commander"]
        I6["IMPORT: ./package.json, FROM: /claude-task-master/package.json"]
        I7["IMPORT: ./src/index.js, FROM: /claude-task-master/mcp-server/src/index.js"]
        I8["IMPORT: dotenv, FROM: dotenv"]
        I9["IMPORT: ./src/logger.js, FROM: /claude-task-master/mcp-server/src/logger.js"]
        I10["IMPORT: fastmcp, FROM: fastmcp"]
        I11["IMPORT: lru-cache, FROM: lru-cache"]
        I12["IMPORT: ./direct-functions/list-tasks.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/list-tasks.js"]
        I13["IMPORT: ./direct-functions/cache-stats.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/cache-stats.js"]
        I14["IMPORT: ./direct-functions/parse-prd.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/parse-prd.js"]
        I15["IMPORT: ./direct-functions/update-tasks.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/update-tasks.js"]
        I16["IMPORT: ./direct-functions/update-task-by-id.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/update-task-by-id.js"]
        I17["IMPORT: ./direct-functions/update-subtask-by-id.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/update-subtask-by-id.js"]
        I18["IMPORT: ./direct-functions/generate-task-files.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/generate-task-files.js"]
        I19["IMPORT: ./direct-functions/set-task-status.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/set-task-status.js"]
        I20["IMPORT: ./direct-functions/show-task.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/show-task.js"]
        I21["IMPORT: ./direct-functions/next-task.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/next-task.js"]
        I22["IMPORT: ./direct-functions/expand-task.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/expand-task.js"]
        I23["IMPORT: ./direct-functions/add-task.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/add-task.js"]
        I24["IMPORT: ./direct-functions/add-subtask.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/add-subtask.js"]
        I25["IMPORT: ./direct-functions/remove-subtask.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/remove-subtask.js"]
        I26["IMPORT: ./direct-functions/analyze-task-complexity.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/analyze-task-complexity.js"]
        I27["IMPORT: ./direct-functions/clear-subtasks.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/clear-subtasks.js"]
        I28["IMPORT: ./direct-functions/expand-all-tasks.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/expand-all-tasks.js"]
        I29["IMPORT: ./direct-functions/remove-dependency.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/remove-dependency.js"]
        I30["IMPORT: ./direct-functions/validate-dependencies.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/validate-dependencies.js"]
        I31["IMPORT: ./direct-functions/fix-dependencies.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/fix-dependencies.js"]
        I32["IMPORT: ./direct-functions/complexity-report.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/complexity-report.js"]
        I33["IMPORT: ./direct-functions/add-dependency.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/add-dependency.js"]
        I34["IMPORT: ./direct-functions/remove-task.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/remove-task.js"]
        I35["IMPORT: ./direct-functions/initialize-project.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/initialize-project.js"]
        I36["IMPORT: ./direct-functions/models.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/models.js"]
        I37["IMPORT: ./direct-functions/move-task.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/move-task.js"]
        I38["IMPORT: ./direct-functions/research.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/research.js"]
        I39["IMPORT: ./direct-functions/add-tag.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/add-tag.js"]
        I40["IMPORT: ./direct-functions/delete-tag.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/delete-tag.js"]
        I41["IMPORT: ./direct-functions/list-tags.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/list-tags.js"]
        I42["IMPORT: ./direct-functions/use-tag.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/use-tag.js"]
        I43["IMPORT: ./direct-functions/rename-tag.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/rename-tag.js"]
        I44["IMPORT: ./direct-functions/copy-tag.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/copy-tag.js"]
        I45["IMPORT: ./direct-functions/scope-up.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/scope-up.js"]
        I46["IMPORT: ./direct-functions/scope-down.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/scope-down.js"]
        I47["IMPORT: ../../../../src/constants/paths.js, FROM: /claude-task-master/src/constants/paths.js"]
        I48["IMPORT: ./language-model.js, FROM: /claude-task-master/mcp-server/src/custom-sdk/language-model.js"]
        I49["IMPORT: ./errors.js, FROM: /claude-task-master/mcp-server/src/custom-sdk/errors.js"]
        I50["IMPORT: ./json-extractor.js, FROM: /claude-task-master/mcp-server/src/custom-sdk/json-extractor.js"]
        I51["IMPORT: fs, FROM: fs"]
        I52["IMPORT: ./logger.js, FROM: /claude-task-master/mcp-server/src/logger.js"]
        I53["IMPORT: ./tools/index.js, FROM: /claude-task-master/mcp-server/src/tools/index.js"]
        I54["IMPORT: ../../src/provider-registry/index.js, FROM: /claude-task-master/src/provider-registry/index.js"]
        I55["IMPORT: ./providers/mcp-provider.js, FROM: /claude-task-master/mcp-server/src/providers/mcp-provider.js"]
        I56["IMPORT: chalk, FROM: chalk"]
        I57["IMPORT: ../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        I58["IMPORT: ../../scripts/modules/config-manager.js, FROM: /claude-task-master/scripts/modules/config-manager.js"]
        I59["IMPORT: ../custom-sdk/index.js, FROM: /claude-task-master/mcp-server/src/custom-sdk/index.js"]
        I60["IMPORT: ../../../src/ai-providers/base-provider.js, FROM: /claude-task-master/src/ai-providers/base-provider.js"]
        I61["IMPORT: ./modules/commands.js, FROM: /claude-task-master/scripts/modules/commands.js"]
        I62["IMPORT: readline, FROM: readline"]
        I63["IMPORT: figlet, FROM: figlet"]
        I64["IMPORT: boxen, FROM: boxen"]
        I65["IMPORT: gradient-string, FROM: gradient-string"]
        I66["IMPORT: ./modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        I67["IMPORT: ./modules/utils/git-utils.js, FROM: /claude-task-master/scripts/modules/utils/git-utils.js"]
        I68["IMPORT: ../src/utils/manage-gitignore.js, FROM: /claude-task-master/src/utils/manage-gitignore.js"]
        I69["IMPORT: ../src/constants/profiles.js, FROM: /claude-task-master/src/constants/profiles.js"]
        I70["IMPORT: ./modules/update-config-tokens.js, FROM: /claude-task-master/scripts/modules/update-config-tokens.js"]
        I71["IMPORT: gpt-tokens, FROM: gpt-tokens"]
        I72["IMPORT: fuse.js, FROM: fuse.js"]
        I73["IMPORT: util, FROM: util"]
        I74["IMPORT: @ai-sdk/anthropic, FROM: @ai-sdk/anthropic"]
        I75["IMPORT: ./base-provider.js, FROM: /claude-task-master/src/ai-providers/base-provider.js"]
        I76["IMPORT: jsonrepair, FROM: jsonrepair"]
        I77["IMPORT: ./custom-sdk/claude-code/index.js, FROM: /claude-task-master/src/ai-providers/custom-sdk/claude-code/index.js"]
        I78["IMPORT: @ai-sdk/provider, FROM: @ai-sdk/provider"]
        I79["IMPORT: ./language-model.js, FROM: /claude-task-master/src/ai-providers/custom-sdk/claude-code/language-model.js"]
        I80["IMPORT: @ai-sdk/provider-utils, FROM: @ai-sdk/provider-utils"]
        I81["IMPORT: ./message-converter.js, FROM: /claude-task-master/src/ai-providers/custom-sdk/claude-code/message-converter.js"]
        I82["IMPORT: ./json-extractor.js, FROM: /claude-task-master/src/ai-providers/custom-sdk/claude-code/json-extractor.js"]
        I83["IMPORT: ./errors.js, FROM: /claude-task-master/src/ai-providers/custom-sdk/claude-code/errors.js"]
        I84["IMPORT: ai, FROM: ai"]
        I85["IMPORT: jsonc-parser, FROM: jsonc-parser"]
        I86["IMPORT: @ai-sdk/google-vertex, FROM: @ai-sdk/google-vertex"]
        I87["IMPORT: @ai-sdk/google, FROM: @ai-sdk/google"]
        I88["IMPORT: ollama-ai-provider, FROM: ollama-ai-provider"]
        I89["IMPORT: @ai-sdk/openai, FROM: @ai-sdk/openai"]
        I90["IMPORT: @openrouter/ai-sdk-provider, FROM: @openrouter/ai-sdk-provider"]
        I91["IMPORT: @ai-sdk/perplexity, FROM: @ai-sdk/perplexity"]
        I92["IMPORT: ./base-profile.js, FROM: /claude-task-master/src/profiles/base-profile.js"]
        I93["IMPORT: ../constants/profiles.js, FROM: /claude-task-master/src/constants/profiles.js"]
        I94["IMPORT: ./utils/path-utils.js, FROM: /claude-task-master/src/utils/path-utils.js"]
        I95["IMPORT: ./logger-utils.js, FROM: /claude-task-master/src/utils/logger-utils.js"]
        I96["IMPORT: inquirer, FROM: inquirer"]
        I97["IMPORT: ./rule-transformer.js, FROM: /claude-task-master/src/utils/rule-transformer.js"]
        I98["IMPORT: ../profiles/index.js, FROM: /claude-task-master/src/profiles/index.js"]
    end
    subgraph SharedDependencies["Shared-Infrastructure-Dependencies"]
        D1["DEP: Path resolution"]
        D2["DEP: FastMCP"]
        D3["DEP: File system"]
    end
    subgraph SharedParameters["Shared-Infrastructure-Parameters"]
        P1["PARAM: {ContextManagerConfig} config - Configuration options"]
        P2["PARAM: {string} contextId - Unique identifier for the context"]
        P3["PARAM: {Object} metadata - Additional metadata for the context"]
        P4["PARAM: {string} contextId - Context identifier"]
        P5["PARAM: {Object} updates - Updates to apply to the context"]
        P6["PARAM: {Object} metadata - Metadata used in the cache key"]
        P7["PARAM: {string} key - The cache key."]
        P8["PARAM: {any} data - The data to cache."]
        P9["PARAM: {string} key - The cache key to invalidate."]
        P10["PARAM: {object | undefined} sessionEnv - The environment object from the session."]
        P11["PARAM: {Function} actionFn - An async function to execute with the temporary environment."]
        P12["PARAM: {string} [explicitPath] - Explicit path to PRD file (highest priority)"]
        P13["PARAM: {Object} [args] - Arguments object for context"]
        P14["PARAM: {Object} [log] - Logger object to prevent console logging"]
        P15["PARAM: {Object} args - Arguments object containing projectRoot and optional file path"]
        P16["PARAM: {Object} args - Arguments object containing projectRoot and optional input path"]
        P17["PARAM: {Object} args - Arguments object containing projectRoot and optional complexityReport path"]
        P18["PARAM: {string} relativePath - Relative path to resolve"]
        P19["PARAM: {Object} args - Arguments object containing projectRoot"]
        P20["PARAM: {string} [startDir] - Directory to start searching from"]
        P21["PARAM: {Object} [log] - Log function to prevent console logging"]
        P22["PARAM: {string} [explicitPath] - Explicit path to PRD file"]
        P23["PARAM: {Object} [args] - Arguments object for context (not used in current implementation)"]
        P24["PARAM: {Error} error - Original error"]
        P25["PARAM: {Error} error - Error to check"]
        P26["PARAM: {object} options - Provider options"]
        P27["PARAM: {object} options.session - MCP session object"]
        P28["PARAM: {object} options.defaultSettings - Default settings for the provider"]
        P29["PARAM: {string} text - The text to extract JSON from"]
        P30["PARAM: {object} options - Generation options"]
        P31["PARAM: {Array} options.prompt - AI SDK prompt format"]
        P32["PARAM: {AbortSignal} options.abortSignal - Abort signal"]
        P33["PARAM: {import('zod').ZodSchema} options.schema - Zod schema for validation"]
        P34["PARAM: {object} result - Complete generation result"]
        P35["PARAM: {Array} prompt - AI SDK prompt array"]
        P36["PARAM: {object} response - MCP sampling response"]
        P37["PARAM: {string|Array|object} content - Content in various formats"]
        P38["PARAM: {import('zod').ZodSchema} schema - Zod schema object"]
        P39["PARAM: {import('zod').ZodSchema} schema - Zod schema"]
        P40["PARAM: {string} jsonInstructions - JSON generation instructions"]
        P41["PARAM: {string} level - The log level (debug, info, warn, error, success)"]
        P42["PARAM: {...any} args - Arguments to log"]
        P43["PARAM: {object} params - Parameters to validate"]
        P44["PARAM: {object} params - Parameters for client initialization"]
        P45["PARAM: {object} session - MCP session object"]
        P46["PARAM: {string} text - Text to count tokens for"]
        P47["PARAM: {Object} options - Context gathering options"]
        P48["PARAM: {Array<string>} [options.tasks] - Task/subtask IDs to include"]
        P49["PARAM: {Array<string>} [options.files] - File paths to include"]
        P50["PARAM: {string} [options.customContext] - Additional custom context"]
        P51["PARAM: {boolean} [options.includeProjectTree] - Include project file tree"]
        P52["PARAM: {string} [options.format] - Output format: 'research', 'chat', 'system-prompt'"]
        P53["PARAM: {boolean} [options.includeTokenCounts] - Whether to include token breakdown"]
        P54["PARAM: {string} [options.semanticQuery] - A query string for semantic task searching."]
        P55["PARAM: {number} [options.maxSemanticResults] - Max number of semantic results."]
        P56["PARAM: {Array<number>} [options.dependencyTasks] - Array of task IDs to build dependency graphs from."]
        P57["PARAM: {Array<string>} taskIds - Array of task ID strings"]
        P58["PARAM: {Array<string>} taskIds - Task/subtask IDs"]
        P59["PARAM: {string} format - Output format"]
        P60["PARAM: {boolean} includeTokenCounts - Whether to include token breakdown"]
        P61["PARAM: {Object} task - Task object"]
        P62["PARAM: {Object} subtask - Subtask object"]
        P63["PARAM: {Object} parentTask - Parent task object"]
        P64["PARAM: {Array<string>} filePaths - File paths to read"]
        P65["PARAM: {Object} fileData - File data object"]
        P66["PARAM: {string} dirPath - Directory path"]
        P67["PARAM: {number} maxDepth - Maximum depth to traverse"]
        P68["PARAM: {number} currentDepth - Current depth"]
        P69["PARAM: {string} customContext - Custom context string"]
        P70["PARAM: {Array<string>} taskItems - Formatted task items"]
        P71["PARAM: {Array<Object>} fileContents - File content objects"]
        P72["PARAM: {Object} tree - File tree structure"]
        P73["PARAM: {string} prefix - Current prefix for indentation"]
        P74["PARAM: {Array<string>} sections - Context sections"]
        P75["PARAM: {string} projectRoot - Project root directory"]
        P76["PARAM: {string} tag - Tag for the task"]
        P77["PARAM: {Array} tasks - Array of task objects"]
        P78["PARAM: {string} prompt - The search prompt"]
        P79["PARAM: {Object} options - Search options"]
        P80["PARAM: {Object} searchResults - Results from findRelevantTasks"]
        P81["PARAM: {Object} options - Formatting options"]
        P82["PARAM: {string} prompt - Search prompt"]
        P83["PARAM: {string} projectRoot - Directory to check (required)"]
        P84["PARAM: {string} [projectRoot] - Directory context (optional for this check)"]
        P85["PARAM: {string} branchName - Git branch name"]
        P86["PARAM: {string} projectRoot - Directory to start search from (required)"]
        P87["PARAM: {string} projectRoot - Project root directory (required)"]
        P88["PARAM: {string} tasksPath - Path to tasks.json file"]
        P89["PARAM: {string} params.apiKey - Anthropic API key"]
        P90["PARAM: {string} [params.baseURL] - Optional custom API endpoint"]
        P91["PARAM: {string} modelId - The model ID to check"]
        P92["PARAM: {string} modelId - The model ID"]
        P93["PARAM: {number} maxTokens - The maximum tokens value"]
        P94["PARAM: {string} [params.commandName] - Name of the command invoking the service"]
        P95["PARAM: {string} [params.baseURL] - Optional custom API endpoint (not used by Claude Code)"]
        P96["PARAM: {Object} params - Error parameters"]
        P97["PARAM: {string} params.message - Error message"]
        P98["PARAM: {string} [params.code] - Error code"]
        P99["PARAM: {number} [params.exitCode] - Process exit code"]
        P100["PARAM: {string} [params.stderr] - Standard error output"]
        P101["PARAM: {string} [params.promptExcerpt] - Excerpt of the prompt"]
        P102["PARAM: {number} params.timeoutMs - Timeout in milliseconds"]
        P103["PARAM: {unknown} error - Error to check"]
        P104["PARAM: {unknown} error - Error to extract metadata from"]
        P105["PARAM: {ClaudeCodeModelId} modelId - Model ID"]
        P106["PARAM: {ClaudeCodeSettings} [settings] - Model settings"]
        P107["PARAM: {Object} options - Generation options"]
        P108["PARAM: {Object} options - Stream options"]
        P109["PARAM: {Object} [mode] - Generation mode"]
        P110["PARAM: {string} mode.type - Mode type ('regular', 'object-json', 'object-tool')"]
        P111["PARAM: {string} [params.apiKey] - Optional Gemini API key (rarely used with gemini-cli)"]
        P112["PARAM: {Array} messages - Array of message objects"]
        P113["PARAM: {Object} options - Options for system prompt enhancement"]
        P114["PARAM: {boolean} options.enforceJsonOutput - Whether to add JSON enforcement to system prompt"]
        P115["PARAM: {string} text - Text to validate"]
        P116["PARAM: {string} text - Raw text which may contain JSON"]
        P117["PARAM: {string} [params.apiKey] - Google API key"]
        P118["PARAM: {string} params.projectId - Google Cloud project ID"]
        P119["PARAM: {string} params.location - Google Cloud location (e.g., \"us-central1\")"]
        P120["PARAM: {object} [params.credentials] - Service account credentials object"]
        P121["PARAM: {string} operation - Description of the operation that failed"]
        P122["PARAM: {Error} error - The error object"]
        P123["PARAM: {string} params.apiKey - Google API key"]
        P124["PARAM: {string} [params.baseURL] - Optional Ollama base URL (defaults to http://localhost:11434)"]
        P125["PARAM: {string} params.apiKey - OpenAI API key"]
        P126["PARAM: {string} params.apiKey - OpenRouter API key"]
        P127["PARAM: {string} params.apiKey - Perplexity API key"]
        P128["PARAM: {string} rulesProfile - The rule profile to check"]
        P129["PARAM: {string} action - The action to check"]
        P130["PARAM: {string} priority - The priority to check"]
        P131["PARAM: {string} priority - The priority to normalize"]
        P132["PARAM: {string} status - The status to check"]
        P133["PARAM: {Object} editorConfig - Editor-specific configuration"]
        P134["PARAM: {string} editorConfig.name - Profile name (e.g., 'cursor', 'vscode')"]
        P135["PARAM: {string} [editorConfig.displayName] - Display name for the editor (defaults to name)"]
        P136["PARAM: {string} editorConfig.url - Editor website URL"]
        P137["PARAM: {string} editorConfig.docsUrl - Editor documentation URL"]
        P138["PARAM: {string} editorConfig.profileDir - Directory for profile configuration"]
        P139["PARAM: {string} [editorConfig.rulesDir] - Directory for rules files (defaults to profileDir/rules)"]
        P140["PARAM: {Function} [editorConfig.onAdd] - Lifecycle hook for profile addition"]
        P141["PARAM: {Function} [editorConfig.onRemove] - Lifecycle hook for profile removal"]
        P142["PARAM: {Function} [editorConfig.onPostConvert] - Lifecycle hook for post-conversion"]
        P143["PARAM: {Object} mcpConfig - Standard MCP configuration object"]
        P144["PARAM: {string} targetDir - Target project directory"]
        P145["PARAM: {string} assetsDir - Assets directory (unused for VS Code)"]
        P146["PARAM: {string} providerName - The name of the provider"]
        P147["PARAM: {object} provider - The provider instance"]
        P148["PARAM: {object} options - Additional options for registration"]
        P149["PARAM: {object} paths - A pre-resolved object of all application paths."]
        P150["PARAM: {string|undefined} tag - The current tag."]
        P151["PARAM: {string} projectRoot - Target project directory"]
        P152["PARAM: {string} mcpConfigPath - Relative path to MCP config file (e.g., '.cursor/mcp.json')"]
        P153["PARAM: {Object|null} providedLogger - Optional logger object passed from caller"]
        P154["PARAM: {string} line - Line to normalize"]
        P155["PARAM: {string} line - Line to check"]
        P156["PARAM: {string[]} templateLines - Array of template lines"]
        P157["PARAM: {boolean} storeTasksInGit - Whether to comment out task lines"]
        P158["PARAM: {string[]} existingLines - Existing file lines"]
        P159["PARAM: {string[]} templateLines - Template lines"]
        P160["PARAM: {Set<string>} existingLinesSet - Set of existing trimmed lines"]
        P161["PARAM: {string[]} lines - Current lines array"]
        P162["PARAM: {string} targetPath - Path to .gitignore file"]
        P163["PARAM: {string} content - Template content"]
        P164["PARAM: {boolean} storeTasksInGit - Storage preference"]
        P165["PARAM: {string} targetPath - Path to create file at"]
        P166["PARAM: {string[]} templateLines - Adjusted template lines"]
        P167["PARAM: {function} log - Logging function"]
        P168["PARAM: {string} targetPath - Path to existing file"]
        P169["PARAM: {string} targetPath - Path to the .gitignore file"]
        P170["PARAM: {string} content - Template content for .gitignore"]
        P171["PARAM: {boolean} storeTasksInGit - Whether to store tasks in git or not"]
        P172["PARAM: {function} log - Logging function (level, message)"]
        P173["PARAM: {string} projectRoot - The project root path to normalize"]
        P174["PARAM: {string} startDir - Directory to start searching from"]
        P175["PARAM: {string|null} explicitPath - Explicit path provided by user (highest priority)"]
        P176["PARAM: {Object|null} args - Args object from MCP args (optional)"]
        P177["PARAM: {Object|null} log - Logger object (optional)"]
        P178["PARAM: {Object|null} args - Args object for MCP context (optional)"]
        P179["PARAM: {string|null} explicitPath - Explicit output path provided by user"]
        P180["PARAM: {string} profileName - The profile name"]
        P181["PARAM: {string} projectRoot - Project directory path"]
        P182["PARAM: {string[]} profilesToRemove - Array of profile names to remove"]
        P183["PARAM: {string} profileName - Name of the profile"]
        P184["PARAM: {Object} addResult - Result object with success/failed counts"]
        P185["PARAM: {Object} removeResult - Result object from removal operation"]
        P186["PARAM: {Array} addResults - Array of add result objects"]
        P187["PARAM: {Array} removalResults - Array of removal result objects"]
        P188["PARAM: {string} name - Profile name"]
        P189["PARAM: {string} content - The content to transform"]
        P190["PARAM: {Object} conversionConfig - The conversion configuration"]
        P191["PARAM: {Object} globalReplacements - Global text replacements"]
        P192["PARAM: {string} sourcePath - Path to the source .mdc file"]
        P193["PARAM: {string} targetPath - Path to the target file"]
        P194["PARAM: {Object} profile - The profile configuration"]
        P195["PARAM: {Object} profile - Profile configuration"]
    end
    subgraph SharedConstants["Shared-Infrastructure-Constants"]
        C1["CONST: __filename, VALUE: fileURLToPath(import.meta.url)"]
        C2["CONST: __dirname, VALUE: dirname(__filename)"]
        C3["CONST: require, VALUE: createRequire(import.meta.url)"]
        C4["CONST: packageJson, VALUE: require('./package.json')"]
        C5["CONST: devScriptPath, VALUE: resolve(__dirname, './scripts/dev.js')"]
        C6["CONST: initProject, VALUE: async (options = {}) => {"]
        C7["CONST: init, VALUE: await import('./scripts/init.js')"]
        C8["CONST: runInitCLI, VALUE: async (options = {}) => {"]
        C9["CONST: result, VALUE: await init.initializeProject(options)"]
        C10["CONST: version, VALUE: packageJson.version"]
        C11["CONST: program, VALUE: new Command()"]
        C12["CONST: args, VALUE: process.argv.slice(process.argv.indexOf('dev') + 1)"]
        C13["CONST: child, VALUE: spawn('node', [devScriptPath, ...args], {"]
        C14["CONST: child, VALUE: spawn('node', [devScriptPath, 'list'], {"]
        C15["CONST: child, VALUE: spawn('node', [devScriptPath, 'next'], {"]
        C16["CONST: child, VALUE: spawn('node', [devScriptPath, 'generate'], {"]
        C17["CONST: server, VALUE: new TaskMasterMCPServer()"]
        C18["CONST: cacheKey, VALUE: this._getCacheKey(contextId, metadata)"]
        C19["CONST: cached, VALUE: this.cache.get(cacheKey)"]
        C20["CONST: context, VALUE: {"]
        C21["CONST: context, VALUE: await this.getContext(contextId)"]
        C22["CONST: cacheKey, VALUE: this._getCacheKey(contextId, context.metadata)"]
        C23["CONST: cached, VALUE: this.cache.get(key)"]
        C24["CONST: contextManager, VALUE: new ContextManager()"]
        C25["CONST: directFunctions, VALUE: new Map(["]
        C26["CONST: originalEnv, VALUE: {}"]
        C27["CONST: keysToRestore, VALUE: []"]
        C28["CONST: silentLogger, VALUE: {"]
        C29["CONST: lastFoundProjectRoot, VALUE: null"]
        C30["CONST: explicitPath, VALUE: args?.file"]
        C31["CONST: rawProjectRoot, VALUE: args?.projectRoot"]
        C32["CONST: projectRoot, VALUE: rawProjectRoot"]
        C33["CONST: explicitPath, VALUE: args?.input"]
        C34["CONST: explicitPath, VALUE: args?.complexityReport"]
        C35["CONST: tag, VALUE: args?.tag"]
        C36["CONST: projectRoot, VALUE: normalizeProjectRoot(args.projectRoot)"]
        C37["CONST: findTasksJsonPath, VALUE: findTasksPath"]
        C38["CONST: findComplexityReportJsonPath, VALUE: findComplexityReportPath"]
        C39["CONST: message, VALUE: error.message || 'Unknown MCP error'"]
        C40["CONST: originalError, VALUE: error"]
        C41["CONST: message, VALUE: error.message?.toLowerCase() || ''"]
        C42["CONST: provider, VALUE: function (modelId, settings = {}) {"]
        C43["CONST: varName, VALUE: \""]
        C44["CONST: lines, VALUE: jsonText.split('\\n')"]
        C45["CONST: char, VALUE: jsonText[i]"]
        C46["CONST: objectMatch, VALUE: jsonText.match(/{[\\s\\S]*}/)"]
        C47["CONST: arrayMatch, VALUE: jsonText.match(/\\[[\\s\\S]*\\]/)"]
        C48["CONST: converted, VALUE: jsonText"]
        C49["CONST: response, VALUE: await this.session.requestSampling("]
        C50["CONST: result, VALUE: convertFromMCPFormat(response)"]
        C51["CONST: objectName, VALUE: restOptions.objectName || 'generated_object'"]
        C52["CONST: jsonInstructions, VALUE: convertSchemaToInstructions(schema, objectName)"]
        C53["CONST: enhancedPrompt, VALUE: enhancePromptForJSON("]
        C54["CONST: jsonText, VALUE: extractJson(result.text)"]
        C55["CONST: validatedObject, VALUE: schema.parse(parsedObject)"]
        C56["CONST: result, VALUE: await this.doGenerate(options)"]
        C57["CONST: text, VALUE: result.text"]
        C58["CONST: chunkSize, VALUE: Math.max(1, Math.floor(text.length / 10))"]
        C59["CONST: chunk, VALUE: text.slice(i, i + chunkSize)"]
        C60["CONST: isLast, VALUE: i + chunkSize >= text.length"]
        C61["CONST: messages, VALUE: []"]
        C62["CONST: exampleStructure, VALUE: generateExampleFromSchema(schema)"]
        C63["CONST: def, VALUE: schema._def"]
        C64["CONST: result, VALUE: {}"]
        C65["CONST: shape, VALUE: def.shape()"]
        C66["CONST: elementExample, VALUE: generateExampleFromSchema(def.type)"]
        C67["CONST: enhancedPrompt, VALUE: [...prompt]"]
        C68["CONST: currentContent, VALUE: enhancedPrompt[systemMessageIndex].content"]
        C69["CONST: __dirname, VALUE: path.dirname(__filename)"]
        C70["CONST: packagePath, VALUE: path.join(__dirname, '../../package.json')"]
        C71["CONST: packageJson, VALUE: JSON.parse(fs.readFileSync(packagePath, 'utf8'))"]
        C72["CONST: mcpProvider, VALUE: new MCPProvider()"]
        C73["CONST: providerRegistry, VALUE: ProviderRegistry.getInstance()"]
        C74["CONST: LOG_LEVELS, VALUE: {"]
        C75["CONST: LOG_LEVEL, VALUE: LOG_LEVELS[getLogLevel().toLowerCase()] ?? LOG_LEVELS.info"]
        C76["CONST: prefixes, VALUE: {"]
        C77["CONST: prefix, VALUE: prefixes[level] || ''"]
        C78["CONST: createLogMethod, VALUE: (level) =>"]
        C79["CONST: logger, VALUE: createLogger()"]
        C80["CONST: LOG_LEVEL, VALUE: process.env.TASKMASTER_LOG_LEVEL"]
        C81["CONST: coolGradient, VALUE: gradient(['#00b4d8', '#0077b6', '#03045e'])"]
        C82["CONST: warmGradient, VALUE: gradient(['#fb8b24', '#e36414', '#9a031e'])"]
        C83["CONST: bannerText, VALUE: figlet.textSync('Task Master AI', {"]
        C84["CONST: icons, VALUE: {"]
        C85["CONST: icon, VALUE: icons[level] || ''"]
        C86["CONST: logMessage, VALUE: `[${level.toUpperCase()}] ${args.join(' ')}\\n`"]
        C87["CONST: homeDir, VALUE: process.env.HOME || process.env.USERPROFILE"]
        C88["CONST: configContent, VALUE: fs.readFileSync(shellConfigFile, 'utf8')"]
        C89["CONST: aliasBlock, VALUE: `"]
        C90["CONST: stateFilePath, VALUE: path.join(targetDir, TASKMASTER_STATE_FILE)"]
        C91["CONST: initialState, VALUE: {"]
        C92["CONST: regex, VALUE: new RegExp(`\\\\{\\\\{${key}\\\\}\\\\}`, 'g')"]
        C93["CONST: filename, VALUE: path.basename(targetPath)"]
        C94["CONST: existingContent, VALUE: fs.readFileSync(targetPath, 'utf8')"]
        C95["CONST: existingLines, VALUE: new Set("]
        C96["CONST: newLines, VALUE: content"]
        C97["CONST: updatedContent, VALUE: `${existingContent.trim()}\\n\\n# Added by Task Master AI\\n${newLines.join('\\n')}`"]
        C98["CONST: taskMasterReadmePath, VALUE: path.join("]
        C99["CONST: skipPrompts, VALUE: options.yes || (options.name && options.description)"]
        C100["CONST: projectName, VALUE: options.name || 'task-master-project'"]
        C101["CONST: projectDescription, VALUE: options.description || 'A project managed with Task Master AI'"]
        C102["CONST: projectVersion, VALUE: options.version || '0.1.0'"]
        C103["CONST: authorName, VALUE: options.author || 'Vibe coder'"]
        C104["CONST: dryRun, VALUE: options.dryRun || false"]
        C105["CONST: addAliases, VALUE: options.addAliases !== undefined ? options.addAliases : true"]
        C106["CONST: initGit, VALUE: options.initGit !== undefined ? options.initGit : true"]
        C107["CONST: storeTasksInGit, VALUE: options.storeTasksInGit !== undefined ? options.storeTasksInGit : true"]
        C108["CONST: rl, VALUE: readline.createInterface({"]
        C109["CONST: addAliasesInput, VALUE: await promptQuestion("]
        C110["CONST: gitInitInput, VALUE: await promptQuestion("]
        C111["CONST: gitTasksInput, VALUE: await promptQuestion("]
        C112["CONST: confirmInput, VALUE: await promptQuestion("]
        C113["CONST: shouldContinue, VALUE: confirmInput.trim().toLowerCase() !== 'n'"]
        C114["CONST: targetDir, VALUE: process.cwd()"]
        C115["CONST: replacements, VALUE: {"]
        C116["CONST: profile, VALUE: getRulesProfile(profileName)"]
        C117["CONST: configPath, VALUE: path.join(targetDir, TASKMASTER_CONFIG_FILE)"]
        C118["CONST: gitignoreTemplatePath, VALUE: path.join("]
        C119["CONST: templateContent, VALUE: fs.readFileSync(gitignoreTemplatePath, 'utf8')"]
        C120["CONST: npmInstallOptions, VALUE: {"]
        C121["CONST: aliasResult, VALUE: addShellAliases()"]
        C122["CONST: data, VALUE: readJSON(this.tasksPath, this.projectRoot, this.tag)"]
        C123["CONST: tasks, VALUE: data?.tasks || []"]
        C124["CONST: contextSections, VALUE: []"]
        C125["CONST: finalTaskIds, VALUE: new Set(tasks.map(String))"]
        C126["CONST: semanticResults, VALUE: this._performSemanticSearch("]
        C127["CONST: dependencyResults, VALUE: this._buildDependencyGraphs(dependencyTasks)"]
        C128["CONST: formattedCustomContext, VALUE: this._formatCustomContext("]
        C129["CONST: taskContextResult, VALUE: await this._gatherTaskContext("]
        C130["CONST: taskTokens, VALUE: taskContextResult.breakdown.reduce("]
        C131["CONST: fileContextResult, VALUE: await this._gatherFileContext("]
        C132["CONST: fileTokens, VALUE: fileContextResult.breakdown.reduce("]
        C133["CONST: treeContextResult, VALUE: await this._gatherProjectTreeContext("]
        C134["CONST: finalContext, VALUE: this._joinContextSections(contextSections, format)"]
        C135["CONST: result, VALUE: {"]
        C136["CONST: searchableTasks, VALUE: this.allTasks.map((task) => {"]
        C137["CONST: dependencyTitles, VALUE: task.dependencies?.length > 0"]
        C138["CONST: searchOptions, VALUE: {"]
        C139["CONST: fuse, VALUE: new Fuse(searchableTasks, searchOptions)"]
        C140["CONST: promptWords, VALUE: query"]
        C141["CONST: fuzzyResults, VALUE: fuse.search(query)"]
        C142["CONST: wordResults, VALUE: []"]
        C143["CONST: results, VALUE: fuse.search(word)"]
        C144["CONST: mergedResults, VALUE: [...fuzzyResults]"]
        C145["CONST: highRelevance, VALUE: mergedResults"]
        C146["CONST: mediumRelevance, VALUE: mergedResults"]
        C147["CONST: recentTasks, VALUE: [...this.allTasks]"]
        C148["CONST: allRelevantTasks, VALUE: [...highRelevance]"]
        C149["CONST: finalResults, VALUE: allRelevantTasks.slice(0, maxResults)"]
        C150["CONST: dependentTasks, VALUE: Array.from(allRelatedTaskIds)"]
        C151["CONST: uniqueDetailedTasks, VALUE: dependentTasks.slice(0, 8)"]
        C152["CONST: directDeps, VALUE: this.allTasks.filter((t) => taskIds.includes(t.id))"]
        C153["CONST: indirectDeps, VALUE: dependentTasks.filter((t) => !taskIds.includes(t.id))"]
        C154["CONST: isDirect, VALUE: taskIds.includes(depTask.id)"]
        C155["CONST: visited, VALUE: new Set()"]
        C156["CONST: depthMap, VALUE: new Map()"]
        C157["CONST: graphs, VALUE: []"]
        C158["CONST: graph, VALUE: this._buildDependencyGraph(id, visited, depthMap)"]
        C159["CONST: task, VALUE: this.allTasks.find((t) => t.id === taskId)"]
        C160["CONST: dependencies, VALUE: task.dependencies"]
        C161["CONST: connector, VALUE: isLast ? '└── ' : '├── '"]
        C162["CONST: childPrefix, VALUE: prefix + (isLast ? '    ' : '│   ')"]
        C163["CONST: parsed, VALUE: []"]
        C164["CONST: parsedIds, VALUE: this._parseTaskIds(taskIds)"]
        C165["CONST: contextItems, VALUE: []"]
        C166["CONST: breakdown, VALUE: []"]
        C167["CONST: result, VALUE: findTaskById(this.allTasks, parsed.taskId)"]
        C168["CONST: parentResult, VALUE: findTaskById(this.allTasks, parsed.parentId)"]
        C169["CONST: subtask, VALUE: parentResult.task.subtasks.find("]
        C170["CONST: finalContext, VALUE: this._formatTaskContextSection(contextItems, format)"]
        C171["CONST: sections, VALUE: []"]
        C172["CONST: details, VALUE: truncate(task.details, 500)"]
        C173["CONST: testStrategy, VALUE: truncate(task.testStrategy, 300)"]
        C174["CONST: details, VALUE: truncate(subtask.details, 500)"]
        C175["CONST: fileContents, VALUE: []"]
        C176["CONST: fullPath, VALUE: path.isAbsolute(filePath)"]
        C177["CONST: stats, VALUE: fs.statSync(fullPath)"]
        C178["CONST: content, VALUE: fs.readFileSync(fullPath, 'utf-8')"]
        C179["CONST: relativePath, VALUE: path.relative(this.projectRoot, fullPath)"]
        C180["CONST: fileData, VALUE: {"]
        C181["CONST: formattedFile, VALUE: this._formatSingleFileForContext("]
        C182["CONST: finalContext, VALUE: this._formatFileContextSection(fileContents, format)"]
        C183["CONST: tree, VALUE: this._generateFileTree(this.projectRoot, 5)"]
        C184["CONST: finalContext, VALUE: this._formatProjectTreeSection(tree, format)"]
        C185["CONST: breakdown, VALUE: includeTokenCounts"]
        C186["CONST: header, VALUE: `**File: ${fileData.path}** (${Math.round(fileData.size / 1024)}KB)`"]
        C187["CONST: content, VALUE: `\\`\\`\\`\\n${fileData.content}\\n\\`\\`\\``"]
        C188["CONST: ignoreDirs, VALUE: ["]
        C189["CONST: ignoreFiles, VALUE: ['.DS_Store', '.env', '.env.local', '.env.production']"]
        C190["CONST: items, VALUE: fs.readdirSync(dirPath)"]
        C191["CONST: tree, VALUE: {"]
        C192["CONST: itemPath, VALUE: path.join(dirPath, item)"]
        C193["CONST: stats, VALUE: fs.statSync(itemPath)"]
        C194["CONST: subtree, VALUE: this._generateFileTree("]
        C195["CONST: fileItems, VALUE: fileContents.map((file) => {"]
        C196["CONST: header, VALUE: `**File: ${file.path}** (${Math.round(file.size / 1024)}KB)`"]
        C197["CONST: content, VALUE: `\\`\\`\\`\\n${file.content}\\n\\`\\`\\``"]
        C198["CONST: treeString, VALUE: this._renderFileTree(tree)"]
        C199["CONST: isLast, VALUE: index === tree.children.length - 1"]
        C200["CONST: childPrefix, VALUE: prefix + (isLast ? '└── ' : '├── ')"]
        C201["CONST: nextPrefix, VALUE: prefix + (isLast ? '    ' : '│   ')"]
        C202["CONST: SEARCH_CONFIGS, VALUE: {"]
        C203["CONST: PURPOSE_CATEGORIES, VALUE: ["]
        C204["CONST: RELEVANCE_THRESHOLDS, VALUE: {"]
        C205["CONST: depTask, VALUE: tasks.find((t) => t.id === depId)"]
        C206["CONST: promptWords, VALUE: this._extractPromptWords(prompt)"]
        C207["CONST: fuzzyResults, VALUE: this.fuse.search(prompt)"]
        C208["CONST: results, VALUE: this.fuse.search(word)"]
        C209["CONST: lowRelevance, VALUE: mergedResults"]
        C210["CONST: recentTasks, VALUE: includeRecent"]
        C211["CONST: taskIds, VALUE: []"]
        C212["CONST: parts, VALUE: []"]
        C213["CONST: fuzzySearch, VALUE: new FuzzyTaskSearch(tasks, searchType)"]
        C214["CONST: results, VALUE: fuzzySearch.findRelevantTasks(prompt, { maxResults })"]
        C215["CONST: execAsync, VALUE: promisify(exec)"]
        C216["CONST: options, VALUE: projectRoot ? { cwd: projectRoot } : {}"]
        C217["CONST: reservedBranches, VALUE: ['main', 'master', 'develop', 'dev', 'HEAD']"]
        C218["CONST: sanitized, VALUE: sanitizeBranchNameForTag(branchName)"]
        C219["CONST: gitRoot, VALUE: await getGitRepositoryRoot(projectRoot)"]
        C220["CONST: repoInfo, VALUE: await getGitHubRepoInfo(projectRoot)"]
        C221["CONST: commonDefaults, VALUE: ['main', 'master']"]
        C222["CONST: branches, VALUE: await getLocalBranches(projectRoot)"]
        C223["CONST: currentBranch, VALUE: await getCurrentBranch(projectRoot)"]
        C224["CONST: defaultBranch, VALUE: await getDefaultBranch(projectRoot)"]
        C225["CONST: stdout, VALUE: execSync('git rev-parse --abbrev-ref HEAD', {"]
        C226["CONST: maxTokens, VALUE: Number(params.maxTokens)"]
        C227["CONST: errorMessage, VALUE: error.message || 'Unknown error occurred'"]
        C228["CONST: tokenValue, VALUE: Math.floor(Number(maxTokens))"]
        C229["CONST: client, VALUE: await this.getClient(params)"]
        C230["CONST: result, VALUE: await generateText({"]
        C231["CONST: stream, VALUE: await streamText({"]
        C232["CONST: result, VALUE: await generateObject({"]
        C233["CONST: repairedJson, VALUE: jsonrepair(error.cause.text)"]
        C234["CONST: parsed, VALUE: JSON.parse(repairedJson)"]
        C235["CONST: metadata, VALUE: {"]
        C236["CONST: createModel, VALUE: (modelId, settings = {}) => {"]
        C237["CONST: provider, VALUE: function (modelId, settings) {"]
        C238["CONST: claudeCode, VALUE: createClaudeCode()"]
        C239["CONST: mod, VALUE: await import('@anthropic-ai/claude-code')"]
        C240["CONST: modelMap, VALUE: {"]
        C241["CONST: mapped, VALUE: modelMap[this.modelId]"]
        C242["CONST: warnings, VALUE: []"]
        C243["CONST: unsupportedParams, VALUE: []"]
        C244["CONST: abortController, VALUE: new AbortController()"]
        C245["CONST: queryOptions, VALUE: {"]
        C246["CONST: warnings, VALUE: this.generateUnsupportedWarnings(options)"]
        C247["CONST: response, VALUE: query({"]
        C248["CONST: isJsonTruncation, VALUE: error instanceof SyntaxError &&"]
        C249["CONST: stream, VALUE: new ReadableStream({"]
        C250["CONST: text, VALUE: message.message.content"]
        C251["CONST: extractedJson, VALUE: extractJson(accumulatedText)"]
        C252["CONST: finalText, VALUE: options.mode?.type === 'object-json'"]
        C253["CONST: textParts, VALUE: message.content"]
        C254["CONST: imageParts, VALUE: message.content.filter("]
        C255["CONST: toolCalls, VALUE: message.content.filter("]
        C256["CONST: formattedMessages, VALUE: []"]
        C257["CONST: msg, VALUE: messages[i]"]
        C258["CONST: mod, VALUE: await import('ai-sdk-provider-gemini-cli')"]
        C259["CONST: systemMessages, VALUE: messages.filter((msg) => msg.role === 'system')"]
        C260["CONST: nonSystemMessages, VALUE: messages.filter((msg) => msg.role !== 'system')"]
        C261["CONST: jsonEnforcement, VALUE: this._getJsonEnforcementPrompt()"]
        C262["CONST: userMessages, VALUE: messages.filter((msg) => msg.role === 'user')"]
        C263["CONST: combinedText, VALUE: userMessages"]
        C264["CONST: jsonIndicators, VALUE: ["]
        C265["CONST: systemMsg, VALUE: messages.find((m) => m.role === 'system')"]
        C266["CONST: isExpandTask, VALUE: systemMsg &&"]
        C267["CONST: subtaskCountMatch, VALUE: systemMsg.content.match("]
        C268["CONST: subtaskCount, VALUE: subtaskCountMatch ? subtaskCountMatch[1] : '10'"]
        C269["CONST: simplifiedPrompt, VALUE: `Generate exactly ${subtaskCount} subtasks in the following JSON format."]
        C270["CONST: firstObj, VALUE: content.indexOf('{')"]
        C271["CONST: firstArr, VALUE: content.indexOf('[')"]
        C272["CONST: start, VALUE: firstArr === -1"]
        C273["CONST: tryParse, VALUE: (value) => {"]
        C274["CONST: errors, VALUE: []"]
        C275["CONST: result, VALUE: parse(value, errors, {"]
        C276["CONST: fullParse, VALUE: tryParse(content)"]
        C277["CONST: openChar, VALUE: content[0]"]
        C278["CONST: closeChar, VALUE: openChar === '{' ? '}' : ']'"]
        C279["CONST: char, VALUE: content[i]"]
        C280["CONST: candidate, VALUE: content.slice(0, lastValidEnd)"]
        C281["CONST: parsed, VALUE: tryParse(candidate)"]
        C282["CONST: maxAttempts, VALUE: Math.min(5, Math.floor(lastValidEnd / 100))"]
        C283["CONST: testEnd, VALUE: Math.max("]
        C284["CONST: candidate, VALUE: content.slice(0, testEnd)"]
        C285["CONST: enforceJsonOutput, VALUE: this._detectJsonRequest(params.messages)"]
        C286["CONST: extractedJson, VALUE: this.extractJson(result.text)"]
        C287["CONST: extractedJson, VALUE: this.extractJson(result.rawResponse.text)"]
        C288["CONST: authOptions, VALUE: {}"]
        C289["CONST: statusCode, VALUE: error.response.status"]
        C290["CONST: errorMessage, VALUE: error.response.data?.error?.message || error.message"]
        C291["CONST: AI_COMMAND_NAMES, VALUE: ["]
        C292["CONST: TASKMASTER_DIR, VALUE: '.taskmaster'"]
        C293["CONST: TASKMASTER_TASKS_DIR, VALUE: '.taskmaster/tasks'"]
        C294["CONST: TASKMASTER_DOCS_DIR, VALUE: '.taskmaster/docs'"]
        C295["CONST: TASKMASTER_REPORTS_DIR, VALUE: '.taskmaster/reports'"]
        C296["CONST: TASKMASTER_TEMPLATES_DIR, VALUE: '.taskmaster/templates'"]
        C297["CONST: TASKMASTER_CONFIG_FILE, VALUE: '.taskmaster/config.json'"]
        C298["CONST: TASKMASTER_STATE_FILE, VALUE: '.taskmaster/state.json'"]
        C299["CONST: LEGACY_CONFIG_FILE, VALUE: '.taskmasterconfig'"]
        C300["CONST: COMPLEXITY_REPORT_FILE, VALUE: '.taskmaster/reports/task-complexity-report.json'"]
        C301["CONST: LEGACY_COMPLEXITY_REPORT_FILE, VALUE: 'scripts/task-complexity-report.json'"]
        C302["CONST: PRD_FILE, VALUE: '.taskmaster/docs/prd.txt'"]
        C303["CONST: LEGACY_PRD_FILE, VALUE: 'scripts/prd.txt'"]
        C304["CONST: EXAMPLE_PRD_FILE, VALUE: '.taskmaster/templates/example_prd.txt'"]
        C305["CONST: LEGACY_EXAMPLE_PRD_FILE, VALUE: 'scripts/example_prd.txt'"]
        C306["CONST: TASKMASTER_TASKS_FILE, VALUE: '.taskmaster/tasks/tasks.json'"]
        C307["CONST: LEGACY_TASKS_FILE, VALUE: 'tasks/tasks.json'"]
        C308["CONST: ENV_EXAMPLE_FILE, VALUE: '.env.example'"]
        C309["CONST: GITIGNORE_FILE, VALUE: '.gitignore'"]
        C310["CONST: TASK_FILE_PREFIX, VALUE: 'task_'"]
        C311["CONST: TASK_FILE_EXTENSION, VALUE: '.txt'"]
        C312["CONST: PROJECT_MARKERS, VALUE: ["]
        C313["CONST: RULE_PROFILES, VALUE: ["]
        C314["CONST: ROO_MODES, VALUE: ["]
        C315["CONST: VALIDATED_PROVIDERS, VALUE: ["]
        C316["CONST: CUSTOM_PROVIDERS, VALUE: {"]
        C317["CONST: CUSTOM_PROVIDERS_ARRAY, VALUE: Object.values(CUSTOM_PROVIDERS)"]
        C318["CONST: ALL_PROVIDERS, VALUE: ["]
        C319["CONST: RULES_ACTIONS, VALUE: {"]
        C320["CONST: RULES_SETUP_ACTION, VALUE: 'setup'"]
        C321["CONST: TASK_PRIORITY_OPTIONS, VALUE: ['high', 'medium', 'low']"]
        C322["CONST: DEFAULT_TASK_PRIORITY, VALUE: 'medium'"]
        C323["CONST: normalized, VALUE: priority.toLowerCase()"]
        C324["CONST: TASK_STATUS_OPTIONS, VALUE: ["]
        C325["CONST: mcpConfigPath, VALUE: mcpConfigName"]
        C326["CONST: taskmasterPrefix, VALUE: supportsRulesSubdirectories ? 'taskmaster/' : ''"]
        C327["CONST: defaultFileMap, VALUE: {"]
        C328["CONST: finalFileMap, VALUE: includeDefaultRules"]
        C329["CONST: baseGlobalReplacements, VALUE: ["]
        C330["CONST: defaultToolMappings, VALUE: {"]
        C331["CONST: conversionConfig, VALUE: {"]
        C332["CONST: baseName, VALUE: path.basename(filePath, '.mdc')"]
        C333["CONST: newFileName, VALUE: finalFileMap[`rules/${baseName}.mdc`] ||"]
        C334["CONST: newLinkText, VALUE: path.basename(newFileName)"]
        C335["CONST: COMMON_TOOL_MAPPINGS, VALUE: {"]
        C336["CONST: exists, VALUE: fs.existsSync(src)"]
        C337["CONST: stats, VALUE: exists && fs.statSync(src)"]
        C338["CONST: isDirectory, VALUE: exists && stats.isDirectory()"]
        C339["CONST: claudeSourceDir, VALUE: path.join(assetsDir, 'claude')"]
        C340["CONST: claudeDestDir, VALUE: path.join(targetDir, '.claude')"]
        C341["CONST: sourceFile, VALUE: path.join(assetsDir, 'AGENTS.md')"]
        C342["CONST: userClaudeFile, VALUE: path.join(targetDir, 'CLAUDE.md')"]
        C343["CONST: taskMasterClaudeFile, VALUE: path.join(targetDir, '.taskmaster', 'CLAUDE.md')"]
        C344["CONST: importLine, VALUE: '@./.taskmaster/CLAUDE.md'"]
        C345["CONST: importSection, VALUE: `\\n## Task Master AI Instructions\\n**Import Task Master's development workflow commands and guidelines, treat as if i..."]
        C346["CONST: taskMasterDir, VALUE: path.join(targetDir, '.taskmaster')"]
        C347["CONST: content, VALUE: fs.readFileSync(userClaudeFile, 'utf8')"]
        C348["CONST: updatedContent, VALUE: content.trim() + '\\n' + importSection + '\\n'"]
        C349["CONST: minimalContent, VALUE: `# Claude Code Instructions\\n${importSection}\\n`"]
        C350["CONST: claudeDir, VALUE: path.join(targetDir, '.claude')"]
        C351["CONST: lines, VALUE: content.split('\\n')"]
        C352["CONST: filteredLines, VALUE: []"]
        C353["CONST: claudeConfig, VALUE: {}"]
        C354["CONST: reorderedServer, VALUE: {}"]
        C355["CONST: mcpConfigPath, VALUE: path.join(targetDir, '.mcp.json')"]
        C356["CONST: mcpConfig, VALUE: JSON.parse(fs.readFileSync(mcpConfigPath, 'utf8'))"]
        C357["CONST: claudeConfig, VALUE: transformToClaudeFormat(mcpConfig)"]
        C358["CONST: claudeProfile, VALUE: createProfile({"]
        C359["CONST: clineProfile, VALUE: createProfile({"]
        C360["CONST: codexProfile, VALUE: createProfile({"]
        C361["CONST: cursorProfile, VALUE: createProfile({"]
        C362["CONST: geminiProfile, VALUE: createProfile({"]
        C363["CONST: sourceDir, VALUE: path.join(assetsDir, 'roocode')"]
        C364["CONST: rooModesDir, VALUE: path.join(sourceDir, '.roo')"]
        C365["CONST: roomodesSrc, VALUE: path.join(sourceDir, '.roomodes')"]
        C366["CONST: roomodesDest, VALUE: path.join(targetDir, '.roomodes')"]
        C367["CONST: src, VALUE: path.join(rooModesDir, `rules-${mode}`, `${mode}-rules`)"]
        C368["CONST: dest, VALUE: path.join(targetDir, '.roo', `rules-${mode}`, `${mode}-rules`)"]
        C369["CONST: destDir, VALUE: path.dirname(dest)"]
        C370["CONST: roomodesPath, VALUE: path.join(targetDir, '.roomodes')"]
        C371["CONST: rooDir, VALUE: path.join(targetDir, '.roo')"]
        C372["CONST: modeDir, VALUE: path.join(rooDir, entry)"]
        C373["CONST: rooProfile, VALUE: createProfile({"]
        C374["CONST: vscodeConfig, VALUE: {}"]
        C375["CONST: transformedServer, VALUE: {"]
        C376["CONST: vscodeConfigPath, VALUE: path.join(targetDir, '.vscode', 'mcp.json')"]
        C377["CONST: mcpConfigContent, VALUE: fs.readFileSync(vscodeConfigPath, 'utf8')"]
        C378["CONST: mcpConfig, VALUE: JSON.parse(mcpConfigContent)"]
        C379["CONST: vscodeConfig, VALUE: transformToVSCodeFormat(mcpConfig)"]
        C380["CONST: configContent, VALUE: fs.readFileSync(vscodeConfigPath, 'utf8')"]
        C381["CONST: config, VALUE: JSON.parse(configContent)"]
        C382["CONST: remainingServers, VALUE: Object.keys(config.servers)"]
        C383["CONST: vscodeDir, VALUE: path.dirname(vscodeConfigPath)"]
        C384["CONST: dirContents, VALUE: fs.readdirSync(vscodeDir)"]
        C385["CONST: vscodeProfile, VALUE: createProfile({"]
        C386["CONST: providerEntry, VALUE: this._providers.get(providerName)"]
        C387["CONST: complexityReportFile, VALUE: this.getCurrentTag() !== 'master'"]
        C388["CONST: rawState, VALUE: fs.readFileSync(this.#paths.statePath, 'utf8')"]
        C389["CONST: stateData, VALUE: JSON.parse(rawState)"]
        C390["CONST: rawConfig, VALUE: fs.readFileSync(this.#paths.configPath, 'utf8')"]
        C391["CONST: configData, VALUE: JSON.parse(rawConfig)"]
        C392["CONST: resolvePath, VALUE: ("]
        C393["CONST: resolvedPath, VALUE: path.isAbsolute(override)"]
        C394["CONST: parentDir, VALUE: path.dirname(resolvedPath)"]
        C395["CONST: fullPath, VALUE: path.isAbsolute(defaultPath)"]
        C396["CONST: paths, VALUE: {}"]
        C397["CONST: resolvedOverride, VALUE: path.resolve(overrides.projectRoot)"]
        C398["CONST: hasTaskmasterDir, VALUE: fs.existsSync("]
        C399["CONST: hasLegacyConfig, VALUE: fs.existsSync("]
        C400["CONST: singleLineContent, VALUE: content"]
        C401["CONST: mcpPath, VALUE: path.join(projectRoot, mcpConfigPath)"]
        C402["CONST: configDir, VALUE: path.dirname(mcpPath)"]
        C403["CONST: newMCPServer, VALUE: {"]
        C404["CONST: mcpConfig, VALUE: JSON.parse(fs.readFileSync(mcpPath, 'utf8'))"]
        C405["CONST: hasMCPString, VALUE: Object.values(mcpConfig.mcpServers).some("]
        C406["CONST: backupPath, VALUE: `${mcpPath}.backup-${Date.now()}`"]
        C407["CONST: newMCPConfig, VALUE: {"]
        C408["CONST: hasTaskMaster, VALUE: mcpConfig.mcpServers['task-master-ai'] ||"]
        C409["CONST: server, VALUE: mcpConfig.mcpServers[serverName]"]
        C410["CONST: remainingServers, VALUE: Object.keys(mcpConfig.mcpServers)"]
        C411["CONST: currentModuleFilename, VALUE: fileURLToPath(import.meta.url)"]
        C412["CONST: currentModuleDirname, VALUE: path.dirname(currentModuleFilename)"]
        C413["CONST: packageJsonPath, VALUE: path.join("]
        C414["CONST: packageJsonContent, VALUE: fs.readFileSync(packageJsonPath, 'utf8')"]
        C415["CONST: packageJson, VALUE: JSON.parse(packageJsonContent)"]
        C416["CONST: TASK_FILES_COMMENT, VALUE: '# Task files'"]
        C417["CONST: TASK_JSON_PATTERN, VALUE: 'tasks.json'"]
        C418["CONST: TASK_DIR_PATTERN, VALUE: 'tasks/'"]
        C419["CONST: normalized, VALUE: normalizeLine(line)"]
        C420["CONST: originalTrailingSpace, VALUE: line.match(/\\s*$/)[0]"]
        C421["CONST: cleanedLines, VALUE: []"]
        C422["CONST: trimmed, VALUE: line.trim()"]
        C423["CONST: section, VALUE: [TASK_FILES_COMMENT]"]
        C424["CONST: lastLine, VALUE: lines[lines.length - 1]"]
        C425["CONST: existingLines, VALUE: existingContent.split('\\n')"]
        C426["CONST: cleanedExistingLines, VALUE: removeExistingTaskSection(existingLines)"]
        C427["CONST: existingLinesSet, VALUE: new Set("]
        C428["CONST: newLines, VALUE: filterNewTemplateLines(templateLines, existingLinesSet)"]
        C429["CONST: finalLines, VALUE: [...cleanedExistingLines]"]
        C430["CONST: hasNewContent, VALUE: newLines.length > 0 ? ' and merged new content' : ''"]
        C431["CONST: templateLines, VALUE: content.split('\\n')"]
        C432["CONST: adjustedTemplateLines, VALUE: adjustTaskLinesInTemplate("]
        C433["CONST: segments, VALUE: projectRoot.split(path.sep)"]
        C434["CONST: taskmasterIndex, VALUE: segments.findIndex("]
        C435["CONST: normalizedSegments, VALUE: segments.slice(0, taskmasterIndex)"]
        C436["CONST: projectMarkers, VALUE: ["]
        C437["CONST: rootDir, VALUE: path.parse(currentDir).root"]
        C438["CONST: maxDepth, VALUE: 50"]
        C439["CONST: markerPath, VALUE: path.join(currentDir, marker)"]
        C440["CONST: logger, VALUE: getLoggerOrDefault(log)"]
        C441["CONST: rawProjectRoot, VALUE: args?.projectRoot || findProjectRoot()"]
        C442["CONST: projectRoot, VALUE: normalizeProjectRoot(rawProjectRoot)"]
        C443["CONST: resolvedPath, VALUE: path.isAbsolute(explicitPath)"]
        C444["CONST: possiblePaths, VALUE: ["]
        C445["CONST: locations, VALUE: ["]
        C446["CONST: fileNames, VALUE: ['PRD.md', 'prd.md', 'PRD.txt', 'prd.txt']"]
        C447["CONST: prdPath, VALUE: path.join(projectRoot, location, fileName)"]
        C448["CONST: fileNames, VALUE: ["]
        C449["CONST: reportPath, VALUE: path.join(projectRoot, location, fileName)"]
        C450["CONST: rawProjectRoot, VALUE: args?.projectRoot || findProjectRoot() || process.cwd()"]
        C451["CONST: defaultPath, VALUE: path.join(projectRoot, TASKMASTER_TASKS_FILE)"]
        C452["CONST: outputDir, VALUE: path.dirname(defaultPath)"]
        C453["CONST: defaultPath, VALUE: path.join(projectRoot, '.taskmaster/reports', filename)"]
        C454["CONST: installedProfiles, VALUE: []"]
        C455["CONST: profileDir, VALUE: path.join(projectRoot, profile.profileDir)"]
        C456["CONST: rulesDir, VALUE: path.join(projectRoot, profile.rulesDir)"]
        C457["CONST: ruleFiles, VALUE: Object.values(profile.fileMap)"]
        C458["CONST: hasRuleFiles, VALUE: ruleFiles.some((ruleFile) =>"]
        C459["CONST: installedProfiles, VALUE: getInstalledProfiles(projectRoot)"]
        C460["CONST: remainingProfiles, VALUE: installedProfiles.filter("]
        C461["CONST: profileDescriptions, VALUE: RULE_PROFILES.map((profileName) => {"]
        C462["CONST: displayName, VALUE: getProfileDisplayName(profileName)"]
        C463["CONST: hasRules, VALUE: Object.keys(profile.fileMap).length > 0"]
        C464["CONST: hasMcpConfig, VALUE: profile.mcpConfig === true"]
        C465["CONST: profileListText, VALUE: profileDescriptions"]
        C466["CONST: sortedChoices, VALUE: profileDescriptions.map("]
        C467["CONST: ruleProfilesQuestion, VALUE: {"]
        C468["CONST: profileConfig, VALUE: getRulesProfile(profileName)"]
        C469["CONST: baseMessage, VALUE: `Summary for ${profileName}: Integration guide removed`"]
        C470["CONST: baseMessage, VALUE: `Summary for ${profileName}: Rule profile removed`"]
        C471["CONST: successfulProfiles, VALUE: []"]
        C472["CONST: successfulRemovals, VALUE: []"]
        C473["CONST: skippedRemovals, VALUE: []"]
        C474["CONST: failedRemovals, VALUE: []"]
        C475["CONST: removalsWithNotices, VALUE: []"]
        C476["CONST: profileKey, VALUE: `${name}Profile`"]
        C477["CONST: profile, VALUE: profilesModule[profileKey]"]
        C478["CONST: toolNames, VALUE: conversionConfig.toolNames"]
        C479["CONST: toolReferencePattern, VALUE: new RegExp("]
        C480["CONST: content, VALUE: fs.readFileSync(sourcePath, 'utf8')"]
        C481["CONST: transformedContent, VALUE: transformRuleContent("]
        C482["CONST: targetDir, VALUE: path.dirname(targetPath)"]
        C483["CONST: sourceDir, VALUE: path.join(__dirname, '..', '..', 'assets', 'rules')"]
        C484["CONST: targetDir, VALUE: path.join(projectRoot, profile.rulesDir)"]
        C485["CONST: assetsDir, VALUE: path.join(__dirname, '..', '..', 'assets')"]
        C486["CONST: sourceFiles, VALUE: Object.keys(profile.fileMap)"]
        C487["CONST: isAssetFile, VALUE: !sourceFile.startsWith('rules/')"]
        C488["CONST: sourcePath, VALUE: path.join(assetsDir, sourceFile)"]
        C489["CONST: targetFilename, VALUE: profile.fileMap[sourceFile]"]
        C490["CONST: targetPath, VALUE: path.join(targetDir, targetFilename)"]
        C491["CONST: targetFileDir, VALUE: path.dirname(targetPath)"]
        C492["CONST: taskMasterFiles, VALUE: sourceFiles.map("]
        C493["CONST: allFiles, VALUE: fs.readdirSync(targetDir, { recursive: true })"]
        C494["CONST: allFilePaths, VALUE: allFiles"]
        C495["CONST: fullPath, VALUE: path.join(targetDir, file)"]
        C496["CONST: filePath, VALUE: path.join(targetDir, taskMasterFile)"]
        C497["CONST: remainingFiles, VALUE: allFilePaths.filter("]
        C498["CONST: remainingContents, VALUE: fs.readdirSync(profileDir)"]
        C499["CONST: preservedNotice, VALUE: `Preserved ${remainingContents.length} existing files/folders in ${profile.profileDir}`"]
    end
    subgraph file1["index.js"]
        subgraph file1Imports["index.js-Imports"]
            I1["IMPORT: url, FROM: url"]
            I2["IMPORT: path, FROM: path"]
            I3["IMPORT: module, FROM: module"]
            I4["IMPORT: child_process, FROM: child_process"]
            I5["IMPORT: commander, FROM: commander"]
            I6["IMPORT: ./package.json, FROM: /claude-task-master/package.json"]
        end
        subgraph file1Functions["index.js-Functions Defined"]
            FU1["FUNCTION: initProject"]
            FU2["FUNCTION: runInitCLI"]
        end
        subgraph file1Exports["index.js-Exports"]
            E1["EXP: devScriptPath"]
            E2["EXP: initProject"]
            E3["EXP: runInitCLI"]
            E4["EXP: version"]
        end
        subgraph file1Constants["index.js-Const Declarations"]
            C1["CONST: __filename, VALUE: fileURLToPath(import.meta.url)"]
            C2["CONST: __dirname, VALUE: dirname(__filename)"]
            C3["CONST: require, VALUE: createRequire(import.meta.url)"]
            C4["CONST: packageJson, VALUE: require('./package.json')"]
            C5["CONST: devScriptPath, VALUE: resolve(__dirname, './scripts/dev.js')"]
            C6["CONST: initProject, VALUE: async (options = {}) => {"]
            C7["CONST: init, VALUE: await import('./scripts/init.js')"]
            C8["CONST: runInitCLI, VALUE: async (options = {}) => {"]
            C9["CONST: init, VALUE: await import('./scripts/init.js')"]
            C10["CONST: result, VALUE: await init.initializeProject(options)"]
            C11["CONST: version, VALUE: packageJson.version"]
            C12["CONST: program, VALUE: new Command()"]
            C13["CONST: args, VALUE: process.argv.slice(process.argv.indexOf('dev') + 1)"]
            C14["CONST: child, VALUE: spawn('node', [devScriptPath, ...args], {"]
            C15["CONST: child, VALUE: spawn('node', [devScriptPath, 'list'], {"]
            C16["CONST: child, VALUE: spawn('node', [devScriptPath, 'next'], {"]
            C17["CONST: child, VALUE: spawn('node', [devScriptPath, 'generate'], {"]
        end
        subgraph file1Flow["index.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file2["mcp-server/server.js"]
        subgraph file2Imports["server.js-Imports"]
            I1["IMPORT: ./src/index.js, FROM: /claude-task-master/mcp-server/src/index.js"]
            I2["IMPORT: dotenv, FROM: dotenv"]
            I3["IMPORT: ./src/logger.js, FROM: /claude-task-master/mcp-server/src/logger.js"]
        end
        subgraph file2Functions["server.js-Functions Defined"]
            FU1["FUNCTION: startServer"]
        end
        subgraph file2Exports["server.js-Exports"]
            E0["(none)"]
        end
        subgraph file2Constants["server.js-Const Declarations"]
            C1["CONST: server, VALUE: new TaskMasterMCPServer()"]
        end
        subgraph file2Flow["server.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
        end
    end
    subgraph file3["mcp-server/src/core/context-manager.js"]
        subgraph file3Imports["context-manager.js-Imports"]
            I1["IMPORT: fastmcp, FROM: fastmcp"]
            I2["IMPORT: lru-cache, FROM: lru-cache"]
        end
        subgraph file3Functions["context-manager.js-Functions Defined"]
            FU0["(none)"]
        end
        subgraph file3Exports["context-manager.js-Exports"]
            E1["EXP: ContextManager"]
            E2["EXP: contextManager"]
        end
        subgraph file3Constants["context-manager.js-Const Declarations"]
            C1["CONST: cacheKey, VALUE: this._getCacheKey(contextId, metadata)"]
            C2["CONST: cached, VALUE: this.cache.get(cacheKey)"]
            C3["CONST: context, VALUE: {"]
            C4["CONST: context, VALUE: await this.getContext(contextId)"]
            C5["CONST: cacheKey, VALUE: this._getCacheKey(contextId, context.metadata)"]
            C6["CONST: cacheKey, VALUE: this._getCacheKey(contextId, metadata)"]
            C7["CONST: cached, VALUE: this.cache.get(key)"]
            C8["CONST: contextManager, VALUE: new ContextManager()"]
        end
        subgraph file3Flow["context-manager.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Expose public API via exports"]
        end
    end
    subgraph file4["mcp-server/src/core/task-master-core.js"]
        subgraph file4Imports["task-master-core.js-Imports"]
            I1["IMPORT: ./direct-functions/list-tasks.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/list-tasks.js"]
            I2["IMPORT: ./direct-functions/cache-stats.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/cache-stats.js"]
            I3["IMPORT: ./direct-functions/parse-prd.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/parse-prd.js"]
            I4["IMPORT: ./direct-functions/update-tasks.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/update-tasks.js"]
            I5["IMPORT: ./direct-functions/update-task-by-id.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/update-task-by-id.js"]
            I6["IMPORT: ./direct-functions/update-subtask-by-id.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/update-subtask-by-id.js"]
            I7["IMPORT: ./direct-functions/generate-task-files.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/generate-task-files.js"]
            I8["IMPORT: ./direct-functions/set-task-status.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/set-task-status.js"]
            I9["IMPORT: ./direct-functions/show-task.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/show-task.js"]
            I10["IMPORT: ./direct-functions/next-task.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/next-task.js"]
            I11["IMPORT: ./direct-functions/expand-task.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/expand-task.js"]
            I12["IMPORT: ./direct-functions/add-task.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/add-task.js"]
            I13["IMPORT: ./direct-functions/add-subtask.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/add-subtask.js"]
            I14["IMPORT: ./direct-functions/remove-subtask.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/remove-subtask.js"]
            I15["IMPORT: ./direct-functions/analyze-task-complexity.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/analyze-task-complexity.js"]
            I16["IMPORT: ./direct-functions/clear-subtasks.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/clear-subtasks.js"]
            I17["IMPORT: ./direct-functions/expand-all-tasks.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/expand-all-tasks.js"]
            I18["IMPORT: ./direct-functions/remove-dependency.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/remove-dependency.js"]
            I19["IMPORT: ./direct-functions/validate-dependencies.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/validate-dependencies.js"]
            I20["IMPORT: ./direct-functions/fix-dependencies.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/fix-dependencies.js"]
            I21["IMPORT: ./direct-functions/complexity-report.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/complexity-report.js"]
            I22["IMPORT: ./direct-functions/add-dependency.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/add-dependency.js"]
            I23["IMPORT: ./direct-functions/remove-task.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/remove-task.js"]
            I24["IMPORT: ./direct-functions/initialize-project.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/initialize-project.js"]
            I25["IMPORT: ./direct-functions/models.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/models.js"]
            I26["IMPORT: ./direct-functions/move-task.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/move-task.js"]
            I27["IMPORT: ./direct-functions/research.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/research.js"]
            I28["IMPORT: ./direct-functions/add-tag.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/add-tag.js"]
            I29["IMPORT: ./direct-functions/delete-tag.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/delete-tag.js"]
            I30["IMPORT: ./direct-functions/list-tags.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/list-tags.js"]
            I31["IMPORT: ./direct-functions/use-tag.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/use-tag.js"]
            I32["IMPORT: ./direct-functions/rename-tag.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/rename-tag.js"]
            I33["IMPORT: ./direct-functions/copy-tag.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/copy-tag.js"]
            I34["IMPORT: ./direct-functions/scope-up.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/scope-up.js"]
            I35["IMPORT: ./direct-functions/scope-down.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/scope-down.js"]
        end
        subgraph file4Functions["task-master-core.js-Functions Defined"]
            FU0["(none)"]
        end
        subgraph file4Exports["task-master-core.js-Exports"]
            E1["EXP: directFunctions"]
            E2["EXP: findTasksPath"]
            E3["EXP: listTasksDirect"]
            E4["EXP: getCacheStatsDirect"]
            E5["EXP: parsePRDDirect"]
            E6["EXP: updateTasksDirect"]
            E7["EXP: updateTaskByIdDirect"]
            E8["EXP: updateSubtaskByIdDirect"]
            E9["EXP: generateTaskFilesDirect"]
            E10["EXP: setTaskStatusDirect"]
            E11["EXP: showTaskDirect"]
            E12["EXP: nextTaskDirect"]
            E13["EXP: expandTaskDirect"]
            E14["EXP: addTaskDirect"]
            E15["EXP: addSubtaskDirect"]
            E16["EXP: removeSubtaskDirect"]
            E17["EXP: analyzeTaskComplexityDirect"]
            E18["EXP: clearSubtasksDirect"]
            E19["EXP: expandAllTasksDirect"]
            E20["EXP: removeDependencyDirect"]
            E21["EXP: validateDependenciesDirect"]
            E22["EXP: fixDependenciesDirect"]
            E23["EXP: complexityReportDirect"]
            E24["EXP: addDependencyDirect"]
            E25["EXP: removeTaskDirect"]
            E26["EXP: initializeProjectDirect"]
            E27["EXP: modelsDirect"]
            E28["EXP: moveTaskDirect"]
            E29["EXP: researchDirect"]
            E30["EXP: addTagDirect"]
            E31["EXP: deleteTagDirect"]
            E32["EXP: listTagsDirect"]
            E33["EXP: useTagDirect"]
            E34["EXP: renameTagDirect"]
            E35["EXP: copyTagDirect"]
            E36["EXP: scopeUpDirect"]
            E37["EXP: scopeDownDirect"]
        end
        subgraph file4Constants["task-master-core.js-Const Declarations"]
            C1["CONST: directFunctions, VALUE: new Map(["]
        end
        subgraph file4Flow["task-master-core.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Expose public API via exports"]
        end
    end
    subgraph file5["mcp-server/src/core/utils/env-utils.js"]
        subgraph file5Imports["env-utils.js-Imports"]
            I0["(none)"]
        end
        subgraph file5Functions["env-utils.js-Functions Defined"]
            FU1["FUNCTION: withSessionEnv"]
        end
        subgraph file5Exports["env-utils.js-Exports"]
            E0["(none)"]
        end
        subgraph file5Constants["env-utils.js-Const Declarations"]
            C1["CONST: originalEnv, VALUE: {}"]
            C2["CONST: keysToRestore, VALUE: []"]
        end
        subgraph file5Flow["env-utils.js-Execution Flow"]
            FL1["Define functions and core logic for this module"]
        end
    end
    subgraph file6["mcp-server/src/core/utils/path-utils.js"]
        subgraph file6Imports["path-utils.js-Imports"]
            I1["IMPORT: path, FROM: path"]
            I2["IMPORT: ../../../../src/constants/paths.js, FROM: /claude-task-master/src/constants/paths.js"]
        end
        subgraph file6Functions["path-utils.js-Functions Defined"]
            FU1["FUNCTION: findPrdPath"]
            FU2["FUNCTION: resolveTasksPath"]
            FU3["FUNCTION: resolvePrdPath"]
            FU4["FUNCTION: resolveComplexityReportPath"]
            FU5["FUNCTION: resolveProjectPath"]
            FU6["FUNCTION: findProjectRoot"]
            FU7["FUNCTION: findTasksPath"]
            FU8["FUNCTION: findComplexityReportPath"]
            FU9["FUNCTION: findPRDPath"]
        end
        subgraph file6Exports["path-utils.js-Exports"]
            E1["EXP: lastFoundProjectRoot"]
            E2["EXP: findPrdPath"]
            E3["EXP: resolveTasksPath"]
            E4["EXP: resolvePrdPath"]
            E5["EXP: resolveComplexityReportPath"]
            E6["EXP: resolveProjectPath"]
            E7["EXP: findProjectRoot"]
            E8["EXP: findTasksPath"]
            E9["EXP: findComplexityReportPath"]
            E10["EXP: findPRDPath"]
            E11["EXP: findTasksJsonPath"]
            E12["EXP: findComplexityReportJsonPath"]
            E13["EXP: PROJECT_MARKERS"]
        end
        subgraph file6Constants["path-utils.js-Const Declarations"]
            C1["CONST: silentLogger, VALUE: {"]
            C2["CONST: lastFoundProjectRoot, VALUE: null"]
            C3["CONST: explicitPath, VALUE: args?.file"]
            C4["CONST: rawProjectRoot, VALUE: args?.projectRoot"]
            C5["CONST: projectRoot, VALUE: rawProjectRoot"]
            C6["CONST: explicitPath, VALUE: args?.input"]
            C7["CONST: rawProjectRoot, VALUE: args?.projectRoot"]
            C8["CONST: projectRoot, VALUE: rawProjectRoot"]
            C9["CONST: explicitPath, VALUE: args?.complexityReport"]
            C10["CONST: rawProjectRoot, VALUE: args?.projectRoot"]
            C11["CONST: tag, VALUE: args?.tag"]
            C12["CONST: projectRoot, VALUE: rawProjectRoot"]
            C13["CONST: projectRoot, VALUE: normalizeProjectRoot(args.projectRoot)"]
            C14["CONST: findTasksJsonPath, VALUE: findTasksPath"]
            C15["CONST: findComplexityReportJsonPath, VALUE: findComplexityReportPath"]
        end
        subgraph file6Flow["path-utils.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file7["mcp-server/src/custom-sdk/errors.js"]
        subgraph file7Imports["errors.js-Imports"]
            I0["(none)"]
        end
        subgraph file7Functions["errors.js-Functions Defined"]
            FU1["FUNCTION: mapMCPError"]
            FU2["FUNCTION: isRetryableError"]
        end
        subgraph file7Exports["errors.js-Exports"]
            E1["EXP: MCPError"]
            E2["EXP: MCPSessionError"]
            E3["EXP: MCPSamplingError"]
            E4["EXP: mapMCPError"]
            E5["EXP: isRetryableError"]
        end
        subgraph file7Constants["errors.js-Const Declarations"]
            C1["CONST: message, VALUE: error.message || 'Unknown MCP error'"]
            C2["CONST: originalError, VALUE: error"]
            C3["CONST: message, VALUE: error.message?.toLowerCase() || ''"]
        end
        subgraph file7Flow["errors.js-Execution Flow"]
            FL1["Define functions and core logic for this module"]
            FL2["Expose public API via exports"]
        end
    end
    subgraph file8["mcp-server/src/custom-sdk/index.js"]
        subgraph file8Imports["index.js-Imports"]
            I1["IMPORT: ./language-model.js, FROM: /claude-task-master/mcp-server/src/custom-sdk/language-model.js"]
        end
        subgraph file8Functions["index.js-Functions Defined"]
            FU1["FUNCTION: createMCP"]
            FU2["FUNCTION: provider"]
        end
        subgraph file8Exports["index.js-Exports"]
            E1["EXP: createMCP"]
        end
        subgraph file8Constants["index.js-Const Declarations"]
            C1["CONST: provider, VALUE: function (modelId, settings = {}) {"]
        end
        subgraph file8Flow["index.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file9["mcp-server/src/custom-sdk/json-extractor.js"]
        subgraph file9Imports["json-extractor.js-Imports"]
            I0["(none)"]
        end
        subgraph file9Functions["json-extractor.js-Functions Defined"]
            FU1["FUNCTION: extractJson"]
        end
        subgraph file9Exports["json-extractor.js-Exports"]
            E1["EXP: extractJson"]
        end
        subgraph file9Constants["json-extractor.js-Const Declarations"]
            C1["CONST: varName, VALUE: \""]
            C2["CONST: lines, VALUE: jsonText.split('\\n')"]
            C3["CONST: char, VALUE: jsonText[i]"]
            C4["CONST: objectMatch, VALUE: jsonText.match(/{[\\s\\S]*}/)"]
            C5["CONST: arrayMatch, VALUE: jsonText.match(/\\[[\\s\\S]*\\]/)"]
            C6["CONST: converted, VALUE: jsonText"]
        end
        subgraph file9Flow["json-extractor.js-Execution Flow"]
            FL1["Define functions and core logic for this module"]
            FL2["Expose public API via exports"]
        end
    end
    subgraph file10["mcp-server/src/custom-sdk/language-model.js"]
        subgraph file10Imports["language-model.js-Imports"]
            I1["IMPORT: ./errors.js, FROM: /claude-task-master/mcp-server/src/custom-sdk/errors.js"]
            I2["IMPORT: ./json-extractor.js, FROM: /claude-task-master/mcp-server/src/custom-sdk/json-extractor.js"]
        end
        subgraph file10Functions["language-model.js-Functions Defined"]
            FU0["(none)"]
        end
        subgraph file10Exports["language-model.js-Exports"]
            E1["EXP: MCPLanguageModel"]
        end
        subgraph file10Constants["language-model.js-Const Declarations"]
            C1["CONST: response, VALUE: await this.session.requestSampling("]
            C2["CONST: result, VALUE: convertFromMCPFormat(response)"]
            C3["CONST: objectName, VALUE: restOptions.objectName || 'generated_object'"]
            C4["CONST: jsonInstructions, VALUE: convertSchemaToInstructions(schema, objectName)"]
            C5["CONST: enhancedPrompt, VALUE: enhancePromptForJSON("]
            C6["CONST: response, VALUE: await this.session.requestSampling("]
            C7["CONST: result, VALUE: convertFromMCPFormat(response)"]
            C8["CONST: jsonText, VALUE: extractJson(result.text)"]
            C9["CONST: validatedObject, VALUE: schema.parse(parsedObject)"]
            C10["CONST: result, VALUE: await this.doGenerate(options)"]
            C11["CONST: text, VALUE: result.text"]
            C12["CONST: chunkSize, VALUE: Math.max(1, Math.floor(text.length / 10))"]
            C13["CONST: chunk, VALUE: text.slice(i, i + chunkSize)"]
            C14["CONST: isLast, VALUE: i + chunkSize >= text.length"]
        end
        subgraph file10Flow["language-model.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Expose public API via exports"]
        end
    end
    subgraph file11["mcp-server/src/custom-sdk/message-converter.js"]
        subgraph file11Imports["message-converter.js-Imports"]
            I0["(none)"]
        end
        subgraph file11Functions["message-converter.js-Functions Defined"]
            FU1["FUNCTION: convertToMCPFormat"]
            FU2["FUNCTION: convertFromMCPFormat"]
            FU3["FUNCTION: extractTextContent"]
        end
        subgraph file11Exports["message-converter.js-Exports"]
            E1["EXP: convertToMCPFormat"]
            E2["EXP: convertFromMCPFormat"]
        end
        subgraph file11Constants["message-converter.js-Const Declarations"]
            C1["CONST: messages, VALUE: []"]
        end
        subgraph file11Flow["message-converter.js-Execution Flow"]
            FL1["Define functions and core logic for this module"]
            FL2["Expose public API via exports"]
        end
    end
    subgraph file12["mcp-server/src/custom-sdk/schema-converter.js"]
        subgraph file12Imports["schema-converter.js-Imports"]
            I0["(none)"]
        end
        subgraph file12Functions["schema-converter.js-Functions Defined"]
            FU1["FUNCTION: convertSchemaToInstructions"]
            FU2["FUNCTION: generateExampleFromSchema"]
            FU3["FUNCTION: enhancePromptForJSON"]
        end
        subgraph file12Exports["schema-converter.js-Exports"]
            E1["EXP: convertSchemaToInstructions"]
            E2["EXP: enhancePromptForJSON"]
        end
        subgraph file12Constants["schema-converter.js-Const Declarations"]
            C1["CONST: exampleStructure, VALUE: generateExampleFromSchema(schema)"]
            C2["CONST: def, VALUE: schema._def"]
            C3["CONST: result, VALUE: {}"]
            C4["CONST: shape, VALUE: def.shape()"]
            C5["CONST: elementExample, VALUE: generateExampleFromSchema(def.type)"]
            C6["CONST: enhancedPrompt, VALUE: [...prompt]"]
            C7["CONST: currentContent, VALUE: enhancedPrompt[systemMessageIndex].content"]
        end
        subgraph file12Flow["schema-converter.js-Execution Flow"]
            FL1["Define functions and core logic for this module"]
            FL2["Expose public API via exports"]
        end
    end
    subgraph file13["mcp-server/src/index.js"]
        subgraph file13Imports["index.js-Imports"]
            I1["IMPORT: fastmcp, FROM: fastmcp"]
            I2["IMPORT: path, FROM: path"]
            I3["IMPORT: dotenv, FROM: dotenv"]
            I4["IMPORT: url, FROM: url"]
            I5["IMPORT: fs, FROM: fs"]
            I6["IMPORT: ./logger.js, FROM: /claude-task-master/mcp-server/src/logger.js"]
            I7["IMPORT: ./tools/index.js, FROM: /claude-task-master/mcp-server/src/tools/index.js"]
            I8["IMPORT: ../../src/provider-registry/index.js, FROM: /claude-task-master/src/provider-registry/index.js"]
            I9["IMPORT: ./providers/mcp-provider.js, FROM: /claude-task-master/mcp-server/src/providers/mcp-provider.js"]
        end
        subgraph file13Functions["index.js-Functions Defined"]
            FU1["FUNCTION: registerTaskMasterTools"]
        end
        subgraph file13Exports["index.js-Exports"]
            E1["EXP: TaskMasterMCPServer"]
        end
        subgraph file13Constants["index.js-Const Declarations"]
            C1["CONST: __filename, VALUE: fileURLToPath(import.meta.url)"]
            C2["CONST: __dirname, VALUE: path.dirname(__filename)"]
            C3["CONST: packagePath, VALUE: path.join(__dirname, '../../package.json')"]
            C4["CONST: packageJson, VALUE: JSON.parse(fs.readFileSync(packagePath, 'utf8'))"]
            C5["CONST: mcpProvider, VALUE: new MCPProvider()"]
            C6["CONST: providerRegistry, VALUE: ProviderRegistry.getInstance()"]
        end
        subgraph file13Flow["index.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file14["mcp-server/src/logger.js"]
        subgraph file14Imports["logger.js-Imports"]
            I1["IMPORT: chalk, FROM: chalk"]
            I2["IMPORT: ../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
            I3["IMPORT: ../../scripts/modules/config-manager.js, FROM: /claude-task-master/scripts/modules/config-manager.js"]
        end
        subgraph file14Functions["logger.js-Functions Defined"]
            FU1["FUNCTION: log"]
            FU2["FUNCTION: createLogger"]
            FU3["FUNCTION: createLogMethod"]
        end
        subgraph file14Exports["logger.js-Exports"]
            E1["EXP: createLogger"]
            E2["EXP: log"]
            E3["EXP: LOG_LEVELS"]
            E4["EXP: logger"]
        end
        subgraph file14Constants["logger.js-Const Declarations"]
            C1["CONST: LOG_LEVELS, VALUE: {"]
            C2["CONST: LOG_LEVEL, VALUE: LOG_LEVELS[getLogLevel().toLowerCase()] ?? LOG_LEVELS.info"]
            C3["CONST: prefixes, VALUE: {"]
            C4["CONST: prefix, VALUE: prefixes[level] || ''"]
            C5["CONST: createLogMethod, VALUE: (level) =>"]
            C6["CONST: logger, VALUE: createLogger()"]
        end
        subgraph file14Flow["logger.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file15["mcp-server/src/providers/mcp-provider.js"]
        subgraph file15Imports["mcp-provider.js-Imports"]
            I1["IMPORT: ../custom-sdk/index.js, FROM: /claude-task-master/mcp-server/src/custom-sdk/index.js"]
            I2["IMPORT: ../../../src/ai-providers/base-provider.js, FROM: /claude-task-master/src/ai-providers/base-provider.js"]
        end
        subgraph file15Functions["mcp-provider.js-Functions Defined"]
            FU0["(none)"]
        end
        subgraph file15Exports["mcp-provider.js-Exports"]
            E1["EXP: MCPProvider"]
        end
        subgraph file15Constants["mcp-provider.js-Const Declarations"]
            C0["(none)"]
        end
        subgraph file15Flow["mcp-provider.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Expose public API via exports"]
        end
    end
    subgraph file16["scripts/dev.js"]
        subgraph file16Imports["dev.js-Imports"]
            I1["IMPORT: dotenv, FROM: dotenv"]
            I2["IMPORT: ./modules/commands.js, FROM: /claude-task-master/scripts/modules/commands.js"]
        end
        subgraph file16Functions["dev.js-Functions Defined"]
            FU0["(none)"]
        end
        subgraph file16Exports["dev.js-Exports"]
            E0["(none)"]
        end
        subgraph file16Constants["dev.js-Const Declarations"]
            C0["(none)"]
        end
        subgraph file16Flow["dev.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
        end
    end
    subgraph file17["scripts/init.js"]
        subgraph file17Imports["init.js-Imports"]
            I1["IMPORT: fs, FROM: fs"]
            I2["IMPORT: path, FROM: path"]
            I3["IMPORT: readline, FROM: readline"]
            I4["IMPORT: url, FROM: url"]
            I5["IMPORT: path, FROM: path"]
            I6["IMPORT: chalk, FROM: chalk"]
            I7["IMPORT: figlet, FROM: figlet"]
            I8["IMPORT: boxen, FROM: boxen"]
            I9["IMPORT: gradient-string, FROM: gradient-string"]
            I10["IMPORT: ./modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
            I11["IMPORT: ./modules/utils/git-utils.js, FROM: /claude-task-master/scripts/modules/utils/git-utils.js"]
            I12["IMPORT: ../src/utils/manage-gitignore.js, FROM: /claude-task-master/src/utils/manage-gitignore.js"]
            I13["IMPORT: ../src/constants/profiles.js, FROM: /claude-task-master/src/constants/profiles.js"]
            I14["IMPORT: ./modules/update-config-tokens.js, FROM: /claude-task-master/scripts/modules/update-config-tokens.js"]
            I15["IMPORT: child_process, FROM: child_process"]
        end
        subgraph file17Functions["init.js-Functions Defined"]
            FU1["FUNCTION: displayBanner"]
            FU2["FUNCTION: log"]
            FU3["FUNCTION: ensureDirectoryExists"]
            FU4["FUNCTION: addShellAliases"]
            FU5["FUNCTION: createInitialStateFile"]
            FU6["FUNCTION: copyTemplateFile"]
            FU7["FUNCTION: initializeProject"]
            FU8["FUNCTION: promptQuestion"]
            FU9["FUNCTION: createProjectStructure"]
            FU10["FUNCTION: _processSingleProfile"]
        end
        subgraph file17Exports["init.js-Exports"]
            E1["EXP: initializeProject"]
            E2["EXP: log"]
        end
        subgraph file17Constants["init.js-Const Declarations"]
            C1["CONST: __filename, VALUE: fileURLToPath(import.meta.url)"]
            C2["CONST: __dirname, VALUE: dirname(__filename)"]
            C3["CONST: LOG_LEVELS, VALUE: {"]
            C4["CONST: LOG_LEVEL, VALUE: process.env.TASKMASTER_LOG_LEVEL"]
            C5["CONST: coolGradient, VALUE: gradient(['#00b4d8', '#0077b6', '#03045e'])"]
            C6["CONST: warmGradient, VALUE: gradient(['#fb8b24', '#e36414', '#9a031e'])"]
            C7["CONST: bannerText, VALUE: figlet.textSync('Task Master AI', {"]
            C8["CONST: icons, VALUE: {"]
            C9["CONST: icon, VALUE: icons[level] || ''"]
            C10["CONST: logMessage, VALUE: `[${level.toUpperCase()}] ${args.join(' ')}\\n`"]
            C11["CONST: homeDir, VALUE: process.env.HOME || process.env.USERPROFILE"]
            C12["CONST: configContent, VALUE: fs.readFileSync(shellConfigFile, 'utf8')"]
            C13["CONST: aliasBlock, VALUE: `"]
            C14["CONST: stateFilePath, VALUE: path.join(targetDir, TASKMASTER_STATE_FILE)"]
            C15["CONST: initialState, VALUE: {"]
            C16["CONST: regex, VALUE: new RegExp(`\\\\{\\\\{${key}\\\\}\\\\}`, 'g')"]
            C17["CONST: filename, VALUE: path.basename(targetPath)"]
            C18["CONST: existingContent, VALUE: fs.readFileSync(targetPath, 'utf8')"]
            C19["CONST: existingLines, VALUE: new Set("]
            C20["CONST: newLines, VALUE: content"]
            C21["CONST: updatedContent, VALUE: `${existingContent.trim()}\\n\\n# Added by Task Master AI\\n${newLines.join('\\n')}`"]
            C22["CONST: taskMasterReadmePath, VALUE: path.join("]
            C23["CONST: skipPrompts, VALUE: options.yes || (options.name && options.description)"]
            C24["CONST: projectName, VALUE: options.name || 'task-master-project'"]
            C25["CONST: projectDescription, VALUE: options.description || 'A project managed with Task Master AI'"]
            C26["CONST: projectVersion, VALUE: options.version || '0.1.0'"]
            C27["CONST: authorName, VALUE: options.author || 'Vibe coder'"]
            C28["CONST: dryRun, VALUE: options.dryRun || false"]
            C29["CONST: addAliases, VALUE: options.addAliases !== undefined ? options.addAliases : true"]
            C30["CONST: initGit, VALUE: options.initGit !== undefined ? options.initGit : true"]
            C31["CONST: storeTasksInGit, VALUE: options.storeTasksInGit !== undefined ? options.storeTasksInGit : true"]
            C32["CONST: rl, VALUE: readline.createInterface({"]
            C33["CONST: addAliasesInput, VALUE: await promptQuestion("]
            C34["CONST: gitInitInput, VALUE: await promptQuestion("]
            C35["CONST: gitTasksInput, VALUE: await promptQuestion("]
            C36["CONST: confirmInput, VALUE: await promptQuestion("]
            C37["CONST: shouldContinue, VALUE: confirmInput.trim().toLowerCase() !== 'n'"]
            C38["CONST: dryRun, VALUE: options.dryRun || false"]
            C39["CONST: targetDir, VALUE: process.cwd()"]
            C40["CONST: replacements, VALUE: {"]
            C41["CONST: profile, VALUE: getRulesProfile(profileName)"]
            C42["CONST: configPath, VALUE: path.join(targetDir, TASKMASTER_CONFIG_FILE)"]
            C43["CONST: gitignoreTemplatePath, VALUE: path.join("]
            C44["CONST: templateContent, VALUE: fs.readFileSync(gitignoreTemplatePath, 'utf8')"]
            C45["CONST: npmInstallOptions, VALUE: {"]
            C46["CONST: aliasResult, VALUE: addShellAliases()"]
        end
        subgraph file17Flow["init.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file18["scripts/modules/utils/contextGatherer.js"]
        subgraph file18Imports["contextGatherer.js-Imports"]
            I1["IMPORT: fs, FROM: fs"]
            I2["IMPORT: path, FROM: path"]
            I3["IMPORT: gpt-tokens, FROM: gpt-tokens"]
            I4["IMPORT: fuse.js, FROM: fuse.js"]
        end
        subgraph file18Functions["contextGatherer.js-Functions Defined"]
            FU1["FUNCTION: createContextGatherer"]
        end
        subgraph file18Exports["contextGatherer.js-Exports"]
            E1["EXP: ContextGatherer"]
            E2["EXP: createContextGatherer"]
        end
        subgraph file18Constants["contextGatherer.js-Const Declarations"]
            C1["CONST: data, VALUE: readJSON(this.tasksPath, this.projectRoot, this.tag)"]
            C2["CONST: tasks, VALUE: data?.tasks || []"]
            C3["CONST: contextSections, VALUE: []"]
            C4["CONST: finalTaskIds, VALUE: new Set(tasks.map(String))"]
            C5["CONST: semanticResults, VALUE: this._performSemanticSearch("]
            C6["CONST: dependencyResults, VALUE: this._buildDependencyGraphs(dependencyTasks)"]
            C7["CONST: formattedCustomContext, VALUE: this._formatCustomContext("]
            C8["CONST: taskContextResult, VALUE: await this._gatherTaskContext("]
            C9["CONST: taskTokens, VALUE: taskContextResult.breakdown.reduce("]
            C10["CONST: fileContextResult, VALUE: await this._gatherFileContext("]
            C11["CONST: fileTokens, VALUE: fileContextResult.breakdown.reduce("]
            C12["CONST: treeContextResult, VALUE: await this._gatherProjectTreeContext("]
            C13["CONST: finalContext, VALUE: this._joinContextSections(contextSections, format)"]
            C14["CONST: result, VALUE: {"]
            C15["CONST: searchableTasks, VALUE: this.allTasks.map((task) => {"]
            C16["CONST: dependencyTitles, VALUE: task.dependencies?.length > 0"]
            C17["CONST: searchOptions, VALUE: {"]
            C18["CONST: fuse, VALUE: new Fuse(searchableTasks, searchOptions)"]
            C19["CONST: promptWords, VALUE: query"]
            C20["CONST: fuzzyResults, VALUE: fuse.search(query)"]
            C21["CONST: wordResults, VALUE: []"]
            C22["CONST: results, VALUE: fuse.search(word)"]
            C23["CONST: mergedResults, VALUE: [...fuzzyResults]"]
            C24["CONST: highRelevance, VALUE: mergedResults"]
            C25["CONST: mediumRelevance, VALUE: mergedResults"]
            C26["CONST: recentTasks, VALUE: [...this.allTasks]"]
            C27["CONST: allRelevantTasks, VALUE: [...highRelevance]"]
            C28["CONST: finalResults, VALUE: allRelevantTasks.slice(0, maxResults)"]
            C29["CONST: dependentTasks, VALUE: Array.from(allRelatedTaskIds)"]
            C30["CONST: uniqueDetailedTasks, VALUE: dependentTasks.slice(0, 8)"]
            C31["CONST: directDeps, VALUE: this.allTasks.filter((t) => taskIds.includes(t.id))"]
            C32["CONST: indirectDeps, VALUE: dependentTasks.filter((t) => !taskIds.includes(t.id))"]
            C33["CONST: isDirect, VALUE: taskIds.includes(depTask.id)"]
            C34["CONST: visited, VALUE: new Set()"]
            C35["CONST: depthMap, VALUE: new Map()"]
            C36["CONST: graphs, VALUE: []"]
            C37["CONST: graph, VALUE: this._buildDependencyGraph(id, visited, depthMap)"]
            C38["CONST: task, VALUE: this.allTasks.find((t) => t.id === taskId)"]
            C39["CONST: dependencies, VALUE: task.dependencies"]
            C40["CONST: connector, VALUE: isLast ? '└── ' : '├── '"]
            C41["CONST: childPrefix, VALUE: prefix + (isLast ? '    ' : '│   ')"]
            C42["CONST: parsed, VALUE: []"]
            C43["CONST: parsedIds, VALUE: this._parseTaskIds(taskIds)"]
            C44["CONST: contextItems, VALUE: []"]
            C45["CONST: breakdown, VALUE: []"]
            C46["CONST: result, VALUE: findTaskById(this.allTasks, parsed.taskId)"]
            C47["CONST: parentResult, VALUE: findTaskById(this.allTasks, parsed.parentId)"]
            C48["CONST: subtask, VALUE: parentResult.task.subtasks.find("]
            C49["CONST: finalContext, VALUE: this._formatTaskContextSection(contextItems, format)"]
            C50["CONST: sections, VALUE: []"]
            C51["CONST: details, VALUE: truncate(task.details, 500)"]
            C52["CONST: testStrategy, VALUE: truncate(task.testStrategy, 300)"]
            C53["CONST: sections, VALUE: []"]
            C54["CONST: details, VALUE: truncate(subtask.details, 500)"]
            C55["CONST: fileContents, VALUE: []"]
            C56["CONST: breakdown, VALUE: []"]
            C57["CONST: fullPath, VALUE: path.isAbsolute(filePath)"]
            C58["CONST: stats, VALUE: fs.statSync(fullPath)"]
            C59["CONST: content, VALUE: fs.readFileSync(fullPath, 'utf-8')"]
            C60["CONST: relativePath, VALUE: path.relative(this.projectRoot, fullPath)"]
            C61["CONST: fileData, VALUE: {"]
            C62["CONST: formattedFile, VALUE: this._formatSingleFileForContext("]
            C63["CONST: finalContext, VALUE: this._formatFileContextSection(fileContents, format)"]
            C64["CONST: tree, VALUE: this._generateFileTree(this.projectRoot, 5)"]
            C65["CONST: finalContext, VALUE: this._formatProjectTreeSection(tree, format)"]
            C66["CONST: breakdown, VALUE: includeTokenCounts"]
            C67["CONST: header, VALUE: `**File: ${fileData.path}** (${Math.round(fileData.size / 1024)}KB)`"]
            C68["CONST: content, VALUE: `\\`\\`\\`\\n${fileData.content}\\n\\`\\`\\``"]
            C69["CONST: ignoreDirs, VALUE: ["]
            C70["CONST: ignoreFiles, VALUE: ['.DS_Store', '.env', '.env.local', '.env.production']"]
            C71["CONST: items, VALUE: fs.readdirSync(dirPath)"]
            C72["CONST: tree, VALUE: {"]
            C73["CONST: itemPath, VALUE: path.join(dirPath, item)"]
            C74["CONST: stats, VALUE: fs.statSync(itemPath)"]
            C75["CONST: subtree, VALUE: this._generateFileTree("]
            C76["CONST: fileItems, VALUE: fileContents.map((file) => {"]
            C77["CONST: header, VALUE: `**File: ${file.path}** (${Math.round(file.size / 1024)}KB)`"]
            C78["CONST: content, VALUE: `\\`\\`\\`\\n${file.content}\\n\\`\\`\\``"]
            C79["CONST: treeString, VALUE: this._renderFileTree(tree)"]
            C80["CONST: isLast, VALUE: index === tree.children.length - 1"]
            C81["CONST: childPrefix, VALUE: prefix + (isLast ? '└── ' : '├── ')"]
            C82["CONST: nextPrefix, VALUE: prefix + (isLast ? '    ' : '│   ')"]
        end
        subgraph file18Flow["contextGatherer.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file19["scripts/modules/utils/fuzzyTaskSearch.js"]
        subgraph file19Imports["fuzzyTaskSearch.js-Imports"]
            I1["IMPORT: fuse.js, FROM: fuse.js"]
        end
        subgraph file19Functions["fuzzyTaskSearch.js-Functions Defined"]
            FU1["FUNCTION: createFuzzyTaskSearch"]
            FU2["FUNCTION: findRelevantTaskIds"]
        end
        subgraph file19Exports["fuzzyTaskSearch.js-Exports"]
            E1["EXP: FuzzyTaskSearch"]
            E2["EXP: createFuzzyTaskSearch"]
            E3["EXP: findRelevantTaskIds"]
        end
        subgraph file19Constants["fuzzyTaskSearch.js-Const Declarations"]
            C1["CONST: SEARCH_CONFIGS, VALUE: {"]
            C2["CONST: PURPOSE_CATEGORIES, VALUE: ["]
            C3["CONST: RELEVANCE_THRESHOLDS, VALUE: {"]
            C4["CONST: dependencyTitles, VALUE: task.dependencies?.length > 0"]
            C5["CONST: depTask, VALUE: tasks.find((t) => t.id === depId)"]
            C6["CONST: promptWords, VALUE: this._extractPromptWords(prompt)"]
            C7["CONST: fuzzyResults, VALUE: this.fuse.search(prompt)"]
            C8["CONST: results, VALUE: this.fuse.search(word)"]
            C9["CONST: mergedResults, VALUE: [...fuzzyResults]"]
            C10["CONST: highRelevance, VALUE: mergedResults"]
            C11["CONST: mediumRelevance, VALUE: mergedResults"]
            C12["CONST: lowRelevance, VALUE: mergedResults"]
            C13["CONST: recentTasks, VALUE: includeRecent"]
            C14["CONST: allRelevantTasks, VALUE: [...highRelevance]"]
            C15["CONST: finalResults, VALUE: allRelevantTasks.slice(0, maxResults)"]
            C16["CONST: taskIds, VALUE: []"]
            C17["CONST: parts, VALUE: []"]
            C18["CONST: fuzzySearch, VALUE: new FuzzyTaskSearch(tasks, searchType)"]
            C19["CONST: results, VALUE: fuzzySearch.findRelevantTasks(prompt, { maxResults })"]
        end
        subgraph file19Flow["fuzzyTaskSearch.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file20["scripts/modules/utils/git-utils.js"]
        subgraph file20Imports["git-utils.js-Imports"]
            I1["IMPORT: child_process, FROM: child_process"]
            I2["IMPORT: util, FROM: util"]
            I3["IMPORT: path, FROM: path"]
            I4["IMPORT: fs, FROM: fs"]
        end
        subgraph file20Functions["git-utils.js-Functions Defined"]
            FU1["FUNCTION: isGitRepository"]
            FU2["FUNCTION: getCurrentBranch"]
            FU3["FUNCTION: getLocalBranches"]
            FU4["FUNCTION: getRemoteBranches"]
            FU5["FUNCTION: isGhCliAvailable"]
            FU6["FUNCTION: getGitHubRepoInfo"]
            FU7["FUNCTION: sanitizeBranchNameForTag"]
            FU8["FUNCTION: isValidBranchForTag"]
            FU9["FUNCTION: getGitRepositoryRoot"]
            FU10["FUNCTION: isGitRepositoryRoot"]
            FU11["FUNCTION: getDefaultBranch"]
            FU12["FUNCTION: isOnDefaultBranch"]
            FU13["FUNCTION: checkAndAutoSwitchGitTag"]
            FU14["FUNCTION: checkAndAutoSwitchGitTagSync"]
            FU15["FUNCTION: isGitRepositorySync"]
            FU16["FUNCTION: getCurrentBranchSync"]
            FU17["FUNCTION: insideGitWorkTree"]
        end
        subgraph file20Exports["git-utils.js-Exports"]
            E1["EXP: isGitRepository"]
            E2["EXP: getCurrentBranch"]
            E3["EXP: getLocalBranches"]
            E4["EXP: getRemoteBranches"]
            E5["EXP: isGhCliAvailable"]
            E6["EXP: getGitHubRepoInfo"]
            E7["EXP: sanitizeBranchNameForTag"]
            E8["EXP: isValidBranchForTag"]
            E9["EXP: getGitRepositoryRoot"]
            E10["EXP: isGitRepositoryRoot"]
            E11["EXP: getDefaultBranch"]
            E12["EXP: isOnDefaultBranch"]
            E13["EXP: checkAndAutoSwitchGitTag"]
            E14["EXP: checkAndAutoSwitchGitTagSync"]
            E15["EXP: isGitRepositorySync"]
            E16["EXP: getCurrentBranchSync"]
            E17["EXP: insideGitWorkTree"]
        end
        subgraph file20Constants["git-utils.js-Const Declarations"]
            C1["CONST: execAsync, VALUE: promisify(exec)"]
            C2["CONST: options, VALUE: projectRoot ? { cwd: projectRoot } : {}"]
            C3["CONST: reservedBranches, VALUE: ['main', 'master', 'develop', 'dev', 'HEAD']"]
            C4["CONST: sanitized, VALUE: sanitizeBranchNameForTag(branchName)"]
            C5["CONST: gitRoot, VALUE: await getGitRepositoryRoot(projectRoot)"]
            C6["CONST: repoInfo, VALUE: await getGitHubRepoInfo(projectRoot)"]
            C7["CONST: commonDefaults, VALUE: ['main', 'master']"]
            C8["CONST: branches, VALUE: await getLocalBranches(projectRoot)"]
            C9["CONST: currentBranch, VALUE: await getCurrentBranch(projectRoot)"]
            C10["CONST: defaultBranch, VALUE: await getDefaultBranch(projectRoot)"]
            C11["CONST: stdout, VALUE: execSync('git rev-parse --abbrev-ref HEAD', {"]
        end
        subgraph file20Flow["git-utils.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file21["src/ai-providers/anthropic.js"]
        subgraph file21Imports["anthropic.js-Imports"]
            I1["IMPORT: @ai-sdk/anthropic, FROM: @ai-sdk/anthropic"]
            I2["IMPORT: ./base-provider.js, FROM: /claude-task-master/src/ai-providers/base-provider.js"]
        end
        subgraph file21Functions["anthropic.js-Functions Defined"]
            FU0["(none)"]
        end
        subgraph file21Exports["anthropic.js-Exports"]
            E1["EXP: AnthropicAIProvider"]
        end
        subgraph file21Constants["anthropic.js-Const Declarations"]
            C0["(none)"]
        end
        subgraph file21Flow["anthropic.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Expose public API via exports"]
        end
    end
    subgraph file22["src/ai-providers/base-provider.js"]
        subgraph file22Imports["base-provider.js-Imports"]
            I1["IMPORT: jsonrepair, FROM: jsonrepair"]
            I2["IMPORT: ../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        end
        subgraph file22Functions["base-provider.js-Functions Defined"]
            FU0["(none)"]
        end
        subgraph file22Exports["base-provider.js-Exports"]
            E1["EXP: BaseAIProvider"]
        end
        subgraph file22Constants["base-provider.js-Const Declarations"]
            C1["CONST: maxTokens, VALUE: Number(params.maxTokens)"]
            C2["CONST: errorMessage, VALUE: error.message || 'Unknown error occurred'"]
            C3["CONST: tokenValue, VALUE: Math.floor(Number(maxTokens))"]
            C4["CONST: client, VALUE: await this.getClient(params)"]
            C5["CONST: result, VALUE: await generateText({"]
            C6["CONST: client, VALUE: await this.getClient(params)"]
            C7["CONST: stream, VALUE: await streamText({"]
            C8["CONST: client, VALUE: await this.getClient(params)"]
            C9["CONST: result, VALUE: await generateObject({"]
            C10["CONST: repairedJson, VALUE: jsonrepair(error.cause.text)"]
            C11["CONST: parsed, VALUE: JSON.parse(repairedJson)"]
        end
        subgraph file22Flow["base-provider.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Expose public API via exports"]
        end
    end
    subgraph file23["src/ai-providers/claude-code.js"]
        subgraph file23Imports["claude-code.js-Imports"]
            I1["IMPORT: ./custom-sdk/claude-code/index.js, FROM: /claude-task-master/src/ai-providers/custom-sdk/claude-code/index.js"]
            I2["IMPORT: ./base-provider.js, FROM: /claude-task-master/src/ai-providers/base-provider.js"]
            I3["IMPORT: ../../scripts/modules/config-manager.js, FROM: /claude-task-master/scripts/modules/config-manager.js"]
        end
        subgraph file23Functions["claude-code.js-Functions Defined"]
            FU0["(none)"]
        end
        subgraph file23Exports["claude-code.js-Exports"]
            E1["EXP: ClaudeCodeProvider"]
        end
        subgraph file23Constants["claude-code.js-Const Declarations"]
            C0["(none)"]
        end
        subgraph file23Flow["claude-code.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Expose public API via exports"]
        end
    end
    subgraph file24["src/ai-providers/custom-sdk/claude-code/errors.js"]
        subgraph file24Imports["errors.js-Imports"]
            I1["IMPORT: @ai-sdk/provider, FROM: @ai-sdk/provider"]
        end
        subgraph file24Functions["errors.js-Functions Defined"]
            FU1["FUNCTION: createAPICallError"]
            FU2["FUNCTION: createAuthenticationError"]
            FU3["FUNCTION: createTimeoutError"]
            FU4["FUNCTION: isAuthenticationError"]
            FU5["FUNCTION: isTimeoutError"]
            FU6["FUNCTION: getErrorMetadata"]
        end
        subgraph file24Exports["errors.js-Exports"]
            E1["EXP: createAPICallError"]
            E2["EXP: createAuthenticationError"]
            E3["EXP: createTimeoutError"]
            E4["EXP: isAuthenticationError"]
            E5["EXP: isTimeoutError"]
            E6["EXP: getErrorMetadata"]
        end
        subgraph file24Constants["errors.js-Const Declarations"]
            C1["CONST: metadata, VALUE: {"]
            C2["CONST: metadata, VALUE: {"]
        end
        subgraph file24Flow["errors.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file25["src/ai-providers/custom-sdk/claude-code/index.js"]
        subgraph file25Imports["index.js-Imports"]
            I1["IMPORT: @ai-sdk/provider, FROM: @ai-sdk/provider"]
            I2["IMPORT: ./language-model.js, FROM: /claude-task-master/src/ai-providers/custom-sdk/claude-code/language-model.js"]
        end
        subgraph file25Functions["index.js-Functions Defined"]
            FU1["FUNCTION: createClaudeCode"]
            FU2["FUNCTION: createModel"]
            FU3["FUNCTION: provider"]
        end
        subgraph file25Exports["index.js-Exports"]
            E1["EXP: createClaudeCode"]
            E2["EXP: claudeCode"]
            E3["EXP: ClaudeCodeLanguageModel"]
            E4["EXP: isAuthenticationError"]
            E5["EXP: isTimeoutError"]
            E6["EXP: getErrorMetadata"]
            E7["EXP: createAPICallError"]
            E8["EXP: createAuthenticationError"]
            E9["EXP: createTimeoutError"]
        end
        subgraph file25Constants["index.js-Const Declarations"]
            C1["CONST: createModel, VALUE: (modelId, settings = {}) => {"]
            C2["CONST: provider, VALUE: function (modelId, settings) {"]
            C3["CONST: claudeCode, VALUE: createClaudeCode()"]
        end
        subgraph file25Flow["index.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file26["src/ai-providers/custom-sdk/claude-code/json-extractor.js"]
        subgraph file26Imports["json-extractor.js-Imports"]
            I0["(none)"]
        end
        subgraph file26Functions["json-extractor.js-Functions Defined"]
            FU1["FUNCTION: extractJson"]
        end
        subgraph file26Exports["json-extractor.js-Exports"]
            E1["EXP: extractJson"]
        end
        subgraph file26Constants["json-extractor.js-Const Declarations"]
            C1["CONST: varName, VALUE: \""]
            C2["CONST: objectMatch, VALUE: jsonText.match(/{[\\s\\S]*}/)"]
            C3["CONST: arrayMatch, VALUE: jsonText.match(/\\[[\\s\\S]*\\]/)"]
            C4["CONST: converted, VALUE: jsonText"]
        end
        subgraph file26Flow["json-extractor.js-Execution Flow"]
            FL1["Define functions and core logic for this module"]
            FL2["Expose public API via exports"]
        end
    end
    subgraph file27["src/ai-providers/custom-sdk/claude-code/language-model.js"]
        subgraph file27Imports["language-model.js-Imports"]
            I1["IMPORT: @ai-sdk/provider, FROM: @ai-sdk/provider"]
            I2["IMPORT: @ai-sdk/provider-utils, FROM: @ai-sdk/provider-utils"]
            I3["IMPORT: ./message-converter.js, FROM: /claude-task-master/src/ai-providers/custom-sdk/claude-code/message-converter.js"]
            I4["IMPORT: ./json-extractor.js, FROM: /claude-task-master/src/ai-providers/custom-sdk/claude-code/json-extractor.js"]
            I5["IMPORT: ./errors.js, FROM: /claude-task-master/src/ai-providers/custom-sdk/claude-code/errors.js"]
        end
        subgraph file27Functions["language-model.js-Functions Defined"]
            FU1["FUNCTION: loadClaudeCodeModule"]
        end
        subgraph file27Exports["language-model.js-Exports"]
            E1["EXP: ClaudeCodeLanguageModel"]
        end
        subgraph file27Constants["language-model.js-Const Declarations"]
            C1["CONST: mod, VALUE: await import('@anthropic-ai/claude-code')"]
            C2["CONST: modelMap, VALUE: {"]
            C3["CONST: mapped, VALUE: modelMap[this.modelId]"]
            C4["CONST: warnings, VALUE: []"]
            C5["CONST: unsupportedParams, VALUE: []"]
            C6["CONST: abortController, VALUE: new AbortController()"]
            C7["CONST: queryOptions, VALUE: {"]
            C8["CONST: warnings, VALUE: this.generateUnsupportedWarnings(options)"]
            C9["CONST: response, VALUE: query({"]
            C10["CONST: isJsonTruncation, VALUE: error instanceof SyntaxError &&"]
            C11["CONST: abortController, VALUE: new AbortController()"]
            C12["CONST: queryOptions, VALUE: {"]
            C13["CONST: warnings, VALUE: this.generateUnsupportedWarnings(options)"]
            C14["CONST: stream, VALUE: new ReadableStream({"]
            C15["CONST: response, VALUE: query({"]
            C16["CONST: text, VALUE: message.message.content"]
            C17["CONST: extractedJson, VALUE: extractJson(accumulatedText)"]
            C18["CONST: isJsonTruncation, VALUE: error instanceof SyntaxError &&"]
            C19["CONST: finalText, VALUE: options.mode?.type === 'object-json'"]
        end
        subgraph file27Flow["language-model.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file28["src/ai-providers/custom-sdk/claude-code/message-converter.js"]
        subgraph file28Imports["message-converter.js-Imports"]
            I0["(none)"]
        end
        subgraph file28Functions["message-converter.js-Functions Defined"]
            FU1["FUNCTION: convertToClaudeCodeMessages"]
        end
        subgraph file28Exports["message-converter.js-Exports"]
            E1["EXP: convertToClaudeCodeMessages"]
        end
        subgraph file28Constants["message-converter.js-Const Declarations"]
            C1["CONST: messages, VALUE: []"]
            C2["CONST: textParts, VALUE: message.content"]
            C3["CONST: imageParts, VALUE: message.content.filter("]
            C4["CONST: textParts, VALUE: message.content"]
            C5["CONST: toolCalls, VALUE: message.content.filter("]
            C6["CONST: formattedMessages, VALUE: []"]
            C7["CONST: msg, VALUE: messages[i]"]
        end
        subgraph file28Flow["message-converter.js-Execution Flow"]
            FL1["Define functions and core logic for this module"]
            FL2["Expose public API via exports"]
        end
    end
    subgraph file29["src/ai-providers/custom-sdk/claude-code/types.js"]
        subgraph file29Imports["types.js-Imports"]
            I0["(none)"]
        end
        subgraph file29Functions["types.js-Functions Defined"]
            FU0["(none)"]
        end
        subgraph file29Exports["types.js-Exports"]
            E0["(none)"]
        end
        subgraph file29Constants["types.js-Const Declarations"]
            C0["(none)"]
        end
        subgraph file29Flow["types.js-Execution Flow"]
            FL1["Process file-level statements"]
        end
    end
    subgraph file30["src/ai-providers/gemini-cli.js"]
        subgraph file30Imports["gemini-cli.js-Imports"]
            I1["IMPORT: ai, FROM: ai"]
            I2["IMPORT: jsonc-parser, FROM: jsonc-parser"]
            I3["IMPORT: ./base-provider.js, FROM: /claude-task-master/src/ai-providers/base-provider.js"]
            I4["IMPORT: ../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        end
        subgraph file30Functions["gemini-cli.js-Functions Defined"]
            FU1["FUNCTION: loadGeminiCliModule"]
            FU2["FUNCTION: tryParse"]
        end
        subgraph file30Exports["gemini-cli.js-Exports"]
            E1["EXP: GeminiCliProvider"]
        end
        subgraph file30Constants["gemini-cli.js-Const Declarations"]
            C1["CONST: mod, VALUE: await import('ai-sdk-provider-gemini-cli')"]
            C2["CONST: systemMessages, VALUE: messages.filter((msg) => msg.role === 'system')"]
            C3["CONST: nonSystemMessages, VALUE: messages.filter((msg) => msg.role !== 'system')"]
            C4["CONST: jsonEnforcement, VALUE: this._getJsonEnforcementPrompt()"]
            C5["CONST: userMessages, VALUE: messages.filter((msg) => msg.role === 'user')"]
            C6["CONST: combinedText, VALUE: userMessages"]
            C7["CONST: jsonIndicators, VALUE: ["]
            C8["CONST: systemMsg, VALUE: messages.find((m) => m.role === 'system')"]
            C9["CONST: isExpandTask, VALUE: systemMsg &&"]
            C10["CONST: subtaskCountMatch, VALUE: systemMsg.content.match("]
            C11["CONST: subtaskCount, VALUE: subtaskCountMatch ? subtaskCountMatch[1] : '10'"]
            C12["CONST: simplifiedPrompt, VALUE: `Generate exactly ${subtaskCount} subtasks in the following JSON format."]
            C13["CONST: firstObj, VALUE: content.indexOf('{')"]
            C14["CONST: firstArr, VALUE: content.indexOf('[')"]
            C15["CONST: start, VALUE: firstArr === -1"]
            C16["CONST: tryParse, VALUE: (value) => {"]
            C17["CONST: errors, VALUE: []"]
            C18["CONST: result, VALUE: parse(value, errors, {"]
            C19["CONST: fullParse, VALUE: tryParse(content)"]
            C20["CONST: openChar, VALUE: content[0]"]
            C21["CONST: closeChar, VALUE: openChar === '{' ? '}' : ']'"]
            C22["CONST: char, VALUE: content[i]"]
            C23["CONST: candidate, VALUE: content.slice(0, lastValidEnd)"]
            C24["CONST: parsed, VALUE: tryParse(candidate)"]
            C25["CONST: maxAttempts, VALUE: Math.min(5, Math.floor(lastValidEnd / 100))"]
            C26["CONST: testEnd, VALUE: Math.max("]
            C27["CONST: candidate, VALUE: content.slice(0, testEnd)"]
            C28["CONST: parsed, VALUE: tryParse(candidate)"]
            C29["CONST: enforceJsonOutput, VALUE: this._detectJsonRequest(params.messages)"]
            C30["CONST: client, VALUE: await this.getClient(params)"]
            C31["CONST: result, VALUE: await generateText({"]
            C32["CONST: extractedJson, VALUE: this.extractJson(result.text)"]
            C33["CONST: enforceJsonOutput, VALUE: this._detectJsonRequest(params.messages)"]
            C34["CONST: client, VALUE: await this.getClient(params)"]
            C35["CONST: stream, VALUE: await streamText({"]
            C36["CONST: client, VALUE: await this.getClient(params)"]
            C37["CONST: result, VALUE: await generateObject({"]
            C38["CONST: extractedJson, VALUE: this.extractJson(result.rawResponse.text)"]
        end
        subgraph file30Flow["gemini-cli.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file31["src/ai-providers/google-vertex.js"]
        subgraph file31Imports["google-vertex.js-Imports"]
            I1["IMPORT: @ai-sdk/google-vertex, FROM: @ai-sdk/google-vertex"]
            I2["IMPORT: ./base-provider.js, FROM: /claude-task-master/src/ai-providers/base-provider.js"]
            I3["IMPORT: ../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
            I4["IMPORT: ../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        end
        subgraph file31Functions["google-vertex.js-Functions Defined"]
            FU0["(none)"]
        end
        subgraph file31Exports["google-vertex.js-Exports"]
            E1["EXP: VertexAIProvider"]
        end
        subgraph file31Constants["google-vertex.js-Const Declarations"]
            C1["CONST: authOptions, VALUE: {}"]
            C2["CONST: statusCode, VALUE: error.response.status"]
            C3["CONST: errorMessage, VALUE: error.response.data?.error?.message || error.message"]
        end
        subgraph file31Flow["google-vertex.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Expose public API via exports"]
        end
    end
    subgraph file32["src/ai-providers/google.js"]
        subgraph file32Imports["google.js-Imports"]
            I1["IMPORT: @ai-sdk/google, FROM: @ai-sdk/google"]
            I2["IMPORT: ./base-provider.js, FROM: /claude-task-master/src/ai-providers/base-provider.js"]
        end
        subgraph file32Functions["google.js-Functions Defined"]
            FU0["(none)"]
        end
        subgraph file32Exports["google.js-Exports"]
            E1["EXP: GoogleAIProvider"]
        end
        subgraph file32Constants["google.js-Const Declarations"]
            C0["(none)"]
        end
        subgraph file32Flow["google.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Expose public API via exports"]
        end
    end
    subgraph file33["src/ai-providers/index.js"]
        subgraph file33Imports["index.js-Imports"]
            I0["(none)"]
        end
        subgraph file33Functions["index.js-Functions Defined"]
            FU0["(none)"]
        end
        subgraph file33Exports["index.js-Exports"]
            E1["EXP: AnthropicAIProvider"]
            E2["EXP: PerplexityAIProvider"]
            E3["EXP: GoogleAIProvider"]
            E4["EXP: OpenAIProvider"]
            E5["EXP: XAIProvider"]
            E6["EXP: GroqProvider"]
            E7["EXP: OpenRouterAIProvider"]
            E8["EXP: OllamaAIProvider"]
            E9["EXP: BedrockAIProvider"]
            E10["EXP: AzureProvider"]
            E11["EXP: VertexAIProvider"]
            E12["EXP: ClaudeCodeProvider"]
            E13["EXP: GeminiCliProvider"]
        end
        subgraph file33Constants["index.js-Const Declarations"]
            C0["(none)"]
        end
        subgraph file33Flow["index.js-Execution Flow"]
            FL1["Expose public API via exports"]
        end
    end
    subgraph file34["src/ai-providers/ollama.js"]
        subgraph file34Imports["ollama.js-Imports"]
            I1["IMPORT: ollama-ai-provider, FROM: ollama-ai-provider"]
            I2["IMPORT: ./base-provider.js, FROM: /claude-task-master/src/ai-providers/base-provider.js"]
        end
        subgraph file34Functions["ollama.js-Functions Defined"]
            FU0["(none)"]
        end
        subgraph file34Exports["ollama.js-Exports"]
            E1["EXP: OllamaAIProvider"]
        end
        subgraph file34Constants["ollama.js-Const Declarations"]
            C0["(none)"]
        end
        subgraph file34Flow["ollama.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Expose public API via exports"]
        end
    end
    subgraph file35["src/ai-providers/openai.js"]
        subgraph file35Imports["openai.js-Imports"]
            I1["IMPORT: @ai-sdk/openai, FROM: @ai-sdk/openai"]
            I2["IMPORT: ./base-provider.js, FROM: /claude-task-master/src/ai-providers/base-provider.js"]
        end
        subgraph file35Functions["openai.js-Functions Defined"]
            FU0["(none)"]
        end
        subgraph file35Exports["openai.js-Exports"]
            E1["EXP: OpenAIProvider"]
        end
        subgraph file35Constants["openai.js-Const Declarations"]
            C0["(none)"]
        end
        subgraph file35Flow["openai.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Expose public API via exports"]
        end
    end
    subgraph file36["src/ai-providers/openrouter.js"]
        subgraph file36Imports["openrouter.js-Imports"]
            I1["IMPORT: @openrouter/ai-sdk-provider, FROM: @openrouter/ai-sdk-provider"]
            I2["IMPORT: ./base-provider.js, FROM: /claude-task-master/src/ai-providers/base-provider.js"]
        end
        subgraph file36Functions["openrouter.js-Functions Defined"]
            FU0["(none)"]
        end
        subgraph file36Exports["openrouter.js-Exports"]
            E1["EXP: OpenRouterAIProvider"]
        end
        subgraph file36Constants["openrouter.js-Const Declarations"]
            C0["(none)"]
        end
        subgraph file36Flow["openrouter.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Expose public API via exports"]
        end
    end
    subgraph file37["src/ai-providers/perplexity.js"]
        subgraph file37Imports["perplexity.js-Imports"]
            I1["IMPORT: @ai-sdk/perplexity, FROM: @ai-sdk/perplexity"]
            I2["IMPORT: ./base-provider.js, FROM: /claude-task-master/src/ai-providers/base-provider.js"]
        end
        subgraph file37Functions["perplexity.js-Functions Defined"]
            FU0["(none)"]
        end
        subgraph file37Exports["perplexity.js-Exports"]
            E1["EXP: PerplexityAIProvider"]
        end
        subgraph file37Constants["perplexity.js-Const Declarations"]
            C0["(none)"]
        end
        subgraph file37Flow["perplexity.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Expose public API via exports"]
        end
    end
    subgraph file38["src/constants/commands.js"]
        subgraph file38Imports["commands.js-Imports"]
            I0["(none)"]
        end
        subgraph file38Functions["commands.js-Functions Defined"]
            FU0["(none)"]
        end
        subgraph file38Exports["commands.js-Exports"]
            E1["EXP: AI_COMMAND_NAMES"]
        end
        subgraph file38Constants["commands.js-Const Declarations"]
            C1["CONST: AI_COMMAND_NAMES, VALUE: ["]
        end
        subgraph file38Flow["commands.js-Execution Flow"]
            FL1["Expose public API via exports"]
        end
    end
    subgraph file39["src/constants/paths.js"]
        subgraph file39Imports["paths.js-Imports"]
            I0["(none)"]
        end
        subgraph file39Functions["paths.js-Functions Defined"]
            FU0["(none)"]
        end
        subgraph file39Exports["paths.js-Exports"]
            E1["EXP: TASKMASTER_DIR"]
            E2["EXP: TASKMASTER_TASKS_DIR"]
            E3["EXP: TASKMASTER_DOCS_DIR"]
            E4["EXP: TASKMASTER_REPORTS_DIR"]
            E5["EXP: TASKMASTER_TEMPLATES_DIR"]
            E6["EXP: TASKMASTER_CONFIG_FILE"]
            E7["EXP: TASKMASTER_STATE_FILE"]
            E8["EXP: LEGACY_CONFIG_FILE"]
            E9["EXP: COMPLEXITY_REPORT_FILE"]
            E10["EXP: LEGACY_COMPLEXITY_REPORT_FILE"]
            E11["EXP: PRD_FILE"]
            E12["EXP: LEGACY_PRD_FILE"]
            E13["EXP: EXAMPLE_PRD_FILE"]
            E14["EXP: LEGACY_EXAMPLE_PRD_FILE"]
            E15["EXP: TASKMASTER_TASKS_FILE"]
            E16["EXP: LEGACY_TASKS_FILE"]
            E17["EXP: ENV_EXAMPLE_FILE"]
            E18["EXP: GITIGNORE_FILE"]
            E19["EXP: TASK_FILE_PREFIX"]
            E20["EXP: TASK_FILE_EXTENSION"]
            E21["EXP: PROJECT_MARKERS"]
        end
        subgraph file39Constants["paths.js-Const Declarations"]
            C1["CONST: TASKMASTER_DIR, VALUE: '.taskmaster'"]
            C2["CONST: TASKMASTER_TASKS_DIR, VALUE: '.taskmaster/tasks'"]
            C3["CONST: TASKMASTER_DOCS_DIR, VALUE: '.taskmaster/docs'"]
            C4["CONST: TASKMASTER_REPORTS_DIR, VALUE: '.taskmaster/reports'"]
            C5["CONST: TASKMASTER_TEMPLATES_DIR, VALUE: '.taskmaster/templates'"]
            C6["CONST: TASKMASTER_CONFIG_FILE, VALUE: '.taskmaster/config.json'"]
            C7["CONST: TASKMASTER_STATE_FILE, VALUE: '.taskmaster/state.json'"]
            C8["CONST: LEGACY_CONFIG_FILE, VALUE: '.taskmasterconfig'"]
            C9["CONST: COMPLEXITY_REPORT_FILE, VALUE: '.taskmaster/reports/task-complexity-report.json'"]
            C10["CONST: LEGACY_COMPLEXITY_REPORT_FILE, VALUE: 'scripts/task-complexity-report.json'"]
            C11["CONST: PRD_FILE, VALUE: '.taskmaster/docs/prd.txt'"]
            C12["CONST: LEGACY_PRD_FILE, VALUE: 'scripts/prd.txt'"]
            C13["CONST: EXAMPLE_PRD_FILE, VALUE: '.taskmaster/templates/example_prd.txt'"]
            C14["CONST: LEGACY_EXAMPLE_PRD_FILE, VALUE: 'scripts/example_prd.txt'"]
            C15["CONST: TASKMASTER_TASKS_FILE, VALUE: '.taskmaster/tasks/tasks.json'"]
            C16["CONST: LEGACY_TASKS_FILE, VALUE: 'tasks/tasks.json'"]
            C17["CONST: ENV_EXAMPLE_FILE, VALUE: '.env.example'"]
            C18["CONST: GITIGNORE_FILE, VALUE: '.gitignore'"]
            C19["CONST: TASK_FILE_PREFIX, VALUE: 'task_'"]
            C20["CONST: TASK_FILE_EXTENSION, VALUE: '.txt'"]
            C21["CONST: PROJECT_MARKERS, VALUE: ["]
        end
        subgraph file39Flow["paths.js-Execution Flow"]
            FL1["Expose public API via exports"]
        end
    end
    subgraph file40["src/constants/profiles.js"]
        subgraph file40Imports["profiles.js-Imports"]
            I0["(none)"]
        end
        subgraph file40Functions["profiles.js-Functions Defined"]
            FU1["FUNCTION: isValidRulesProfile"]
        end
        subgraph file40Exports["profiles.js-Exports"]
            E1["EXP: RULE_PROFILES"]
            E2["EXP: ROO_MODES"]
            E3["EXP: isValidRulesProfile"]
        end
        subgraph file40Constants["profiles.js-Const Declarations"]
            C1["CONST: RULE_PROFILES, VALUE: ["]
            C2["CONST: ROO_MODES, VALUE: ["]
        end
        subgraph file40Flow["profiles.js-Execution Flow"]
            FL1["Define functions and core logic for this module"]
            FL2["Expose public API via exports"]
        end
    end
    subgraph file41["src/constants/providers.js"]
        subgraph file41Imports["providers.js-Imports"]
            I0["(none)"]
        end
        subgraph file41Functions["providers.js-Functions Defined"]
            FU0["(none)"]
        end
        subgraph file41Exports["providers.js-Exports"]
            E1["EXP: VALIDATED_PROVIDERS"]
            E2["EXP: CUSTOM_PROVIDERS"]
            E3["EXP: CUSTOM_PROVIDERS_ARRAY"]
            E4["EXP: ALL_PROVIDERS"]
        end
        subgraph file41Constants["providers.js-Const Declarations"]
            C1["CONST: VALIDATED_PROVIDERS, VALUE: ["]
            C2["CONST: CUSTOM_PROVIDERS, VALUE: {"]
            C3["CONST: CUSTOM_PROVIDERS_ARRAY, VALUE: Object.values(CUSTOM_PROVIDERS)"]
            C4["CONST: ALL_PROVIDERS, VALUE: ["]
        end
        subgraph file41Flow["providers.js-Execution Flow"]
            FL1["Expose public API via exports"]
        end
    end
    subgraph file42["src/constants/rules-actions.js"]
        subgraph file42Imports["rules-actions.js-Imports"]
            I0["(none)"]
        end
        subgraph file42Functions["rules-actions.js-Functions Defined"]
            FU1["FUNCTION: isValidRulesAction"]
        end
        subgraph file42Exports["rules-actions.js-Exports"]
            E1["EXP: RULES_ACTIONS"]
            E2["EXP: RULES_SETUP_ACTION"]
            E3["EXP: isValidRulesAction"]
        end
        subgraph file42Constants["rules-actions.js-Const Declarations"]
            C1["CONST: RULES_ACTIONS, VALUE: {"]
            C2["CONST: RULES_SETUP_ACTION, VALUE: 'setup'"]
        end
        subgraph file42Flow["rules-actions.js-Execution Flow"]
            FL1["Define functions and core logic for this module"]
            FL2["Expose public API via exports"]
        end
    end
    subgraph file43["src/constants/task-priority.js"]
        subgraph file43Imports["task-priority.js-Imports"]
            I0["(none)"]
        end
        subgraph file43Functions["task-priority.js-Functions Defined"]
            FU1["FUNCTION: isValidTaskPriority"]
            FU2["FUNCTION: normalizeTaskPriority"]
        end
        subgraph file43Exports["task-priority.js-Exports"]
            E1["EXP: TASK_PRIORITY_OPTIONS"]
            E2["EXP: DEFAULT_TASK_PRIORITY"]
            E3["EXP: isValidTaskPriority"]
            E4["EXP: normalizeTaskPriority"]
        end
        subgraph file43Constants["task-priority.js-Const Declarations"]
            C1["CONST: TASK_PRIORITY_OPTIONS, VALUE: ['high', 'medium', 'low']"]
            C2["CONST: DEFAULT_TASK_PRIORITY, VALUE: 'medium'"]
            C3["CONST: normalized, VALUE: priority.toLowerCase()"]
        end
        subgraph file43Flow["task-priority.js-Execution Flow"]
            FL1["Define functions and core logic for this module"]
            FL2["Expose public API via exports"]
        end
    end
    subgraph file44["src/constants/task-status.js"]
        subgraph file44Imports["task-status.js-Imports"]
            I0["(none)"]
        end
        subgraph file44Functions["task-status.js-Functions Defined"]
            FU1["FUNCTION: isValidTaskStatus"]
        end
        subgraph file44Exports["task-status.js-Exports"]
            E1["EXP: TASK_STATUS_OPTIONS"]
            E2["EXP: isValidTaskStatus"]
        end
        subgraph file44Constants["task-status.js-Const Declarations"]
            C1["CONST: TASK_STATUS_OPTIONS, VALUE: ["]
        end
        subgraph file44Flow["task-status.js-Execution Flow"]
            FL1["Define functions and core logic for this module"]
            FL2["Expose public API via exports"]
        end
    end
    subgraph file45["src/profiles/base-profile.js"]
        subgraph file45Imports["base-profile.js-Imports"]
            I1["IMPORT: path, FROM: path"]
        end
        subgraph file45Functions["base-profile.js-Functions Defined"]
            FU1["FUNCTION: createProfile"]
            FU2["FUNCTION: getTargetRuleFilename"]
        end
        subgraph file45Exports["base-profile.js-Exports"]
            E1["EXP: createProfile"]
            E2["EXP: COMMON_TOOL_MAPPINGS"]
        end
        subgraph file45Constants["base-profile.js-Const Declarations"]
            C1["CONST: mcpConfigPath, VALUE: mcpConfigName"]
            C2["CONST: taskmasterPrefix, VALUE: supportsRulesSubdirectories ? 'taskmaster/' : ''"]
            C3["CONST: defaultFileMap, VALUE: {"]
            C4["CONST: finalFileMap, VALUE: includeDefaultRules"]
            C5["CONST: baseGlobalReplacements, VALUE: ["]
            C6["CONST: defaultToolMappings, VALUE: {"]
            C7["CONST: conversionConfig, VALUE: {"]
            C8["CONST: baseName, VALUE: path.basename(filePath, '.mdc')"]
            C9["CONST: newFileName, VALUE: finalFileMap[`rules/${baseName}.mdc`] ||"]
            C10["CONST: newLinkText, VALUE: path.basename(newFileName)"]
            C11["CONST: COMMON_TOOL_MAPPINGS, VALUE: {"]
        end
        subgraph file45Flow["base-profile.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file46["src/profiles/claude.js"]
        subgraph file46Imports["claude.js-Imports"]
            I1["IMPORT: path, FROM: path"]
            I2["IMPORT: fs, FROM: fs"]
            I3["IMPORT: ../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
            I4["IMPORT: ./base-profile.js, FROM: /claude-task-master/src/profiles/base-profile.js"]
        end
        subgraph file46Functions["claude.js-Functions Defined"]
            FU1["FUNCTION: copyRecursiveSync"]
            FU2["FUNCTION: removeDirectoryRecursive"]
            FU3["FUNCTION: onAddRulesProfile"]
            FU4["FUNCTION: onRemoveRulesProfile"]
            FU5["FUNCTION: transformToClaudeFormat"]
            FU6["FUNCTION: onPostConvertRulesProfile"]
        end
        subgraph file46Exports["claude.js-Exports"]
            E1["EXP: claudeProfile"]
            E2["EXP: onAddRulesProfile"]
            E3["EXP: onRemoveRulesProfile"]
            E4["EXP: onPostConvertRulesProfile"]
        end
        subgraph file46Constants["claude.js-Const Declarations"]
            C1["CONST: exists, VALUE: fs.existsSync(src)"]
            C2["CONST: stats, VALUE: exists && fs.statSync(src)"]
            C3["CONST: isDirectory, VALUE: exists && stats.isDirectory()"]
            C4["CONST: claudeSourceDir, VALUE: path.join(assetsDir, 'claude')"]
            C5["CONST: claudeDestDir, VALUE: path.join(targetDir, '.claude')"]
            C6["CONST: sourceFile, VALUE: path.join(assetsDir, 'AGENTS.md')"]
            C7["CONST: userClaudeFile, VALUE: path.join(targetDir, 'CLAUDE.md')"]
            C8["CONST: taskMasterClaudeFile, VALUE: path.join(targetDir, '.taskmaster', 'CLAUDE.md')"]
            C9["CONST: importLine, VALUE: '@./.taskmaster/CLAUDE.md'"]
            C10["CONST: importSection, VALUE: `\\n## Task Master AI Instructions\\n**Import Task Master's development workflow commands and guidelines, treat as if i..."]
            C11["CONST: taskMasterDir, VALUE: path.join(targetDir, '.taskmaster')"]
            C12["CONST: content, VALUE: fs.readFileSync(userClaudeFile, 'utf8')"]
            C13["CONST: updatedContent, VALUE: content.trim() + '\\n' + importSection + '\\n'"]
            C14["CONST: minimalContent, VALUE: `# Claude Code Instructions\\n${importSection}\\n`"]
            C15["CONST: claudeDir, VALUE: path.join(targetDir, '.claude')"]
            C16["CONST: userClaudeFile, VALUE: path.join(targetDir, 'CLAUDE.md')"]
            C17["CONST: taskMasterClaudeFile, VALUE: path.join(targetDir, '.taskmaster', 'CLAUDE.md')"]
            C18["CONST: importLine, VALUE: '@./.taskmaster/CLAUDE.md'"]
            C19["CONST: content, VALUE: fs.readFileSync(userClaudeFile, 'utf8')"]
            C20["CONST: lines, VALUE: content.split('\\n')"]
            C21["CONST: filteredLines, VALUE: []"]
            C22["CONST: claudeConfig, VALUE: {}"]
            C23["CONST: reorderedServer, VALUE: {}"]
            C24["CONST: mcpConfigPath, VALUE: path.join(targetDir, '.mcp.json')"]
            C25["CONST: mcpConfig, VALUE: JSON.parse(fs.readFileSync(mcpConfigPath, 'utf8'))"]
            C26["CONST: claudeConfig, VALUE: transformToClaudeFormat(mcpConfig)"]
            C27["CONST: claudeProfile, VALUE: createProfile({"]
        end
        subgraph file46Flow["claude.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file47["src/profiles/cline.js"]
        subgraph file47Imports["cline.js-Imports"]
            I1["IMPORT: ./base-profile.js, FROM: /claude-task-master/src/profiles/base-profile.js"]
        end
        subgraph file47Functions["cline.js-Functions Defined"]
            FU0["(none)"]
        end
        subgraph file47Exports["cline.js-Exports"]
            E1["EXP: clineProfile"]
        end
        subgraph file47Constants["cline.js-Const Declarations"]
            C1["CONST: clineProfile, VALUE: createProfile({"]
        end
        subgraph file47Flow["cline.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Expose public API via exports"]
        end
    end
    subgraph file48["src/profiles/codex.js"]
        subgraph file48Imports["codex.js-Imports"]
            I1["IMPORT: ./base-profile.js, FROM: /claude-task-master/src/profiles/base-profile.js"]
        end
        subgraph file48Functions["codex.js-Functions Defined"]
            FU0["(none)"]
        end
        subgraph file48Exports["codex.js-Exports"]
            E1["EXP: codexProfile"]
        end
        subgraph file48Constants["codex.js-Const Declarations"]
            C1["CONST: codexProfile, VALUE: createProfile({"]
        end
        subgraph file48Flow["codex.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Expose public API via exports"]
        end
    end
    subgraph file49["src/profiles/cursor.js"]
        subgraph file49Imports["cursor.js-Imports"]
            I1["IMPORT: ./base-profile.js, FROM: /claude-task-master/src/profiles/base-profile.js"]
        end
        subgraph file49Functions["cursor.js-Functions Defined"]
            FU0["(none)"]
        end
        subgraph file49Exports["cursor.js-Exports"]
            E1["EXP: cursorProfile"]
        end
        subgraph file49Constants["cursor.js-Const Declarations"]
            C1["CONST: cursorProfile, VALUE: createProfile({"]
        end
        subgraph file49Flow["cursor.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Expose public API via exports"]
        end
    end
    subgraph file50["src/profiles/gemini.js"]
        subgraph file50Imports["gemini.js-Imports"]
            I1["IMPORT: ./base-profile.js, FROM: /claude-task-master/src/profiles/base-profile.js"]
        end
        subgraph file50Functions["gemini.js-Functions Defined"]
            FU0["(none)"]
        end
        subgraph file50Exports["gemini.js-Exports"]
            E1["EXP: geminiProfile"]
        end
        subgraph file50Constants["gemini.js-Const Declarations"]
            C1["CONST: geminiProfile, VALUE: createProfile({"]
        end
        subgraph file50Flow["gemini.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Expose public API via exports"]
        end
    end
    subgraph file51["src/profiles/index.js"]
        subgraph file51Imports["index.js-Imports"]
            I0["(none)"]
        end
        subgraph file51Functions["index.js-Functions Defined"]
            FU0["(none)"]
        end
        subgraph file51Exports["index.js-Exports"]
            E1["EXP: claudeProfile"]
            E2["EXP: clineProfile"]
            E3["EXP: codexProfile"]
            E4["EXP: cursorProfile"]
            E5["EXP: geminiProfile"]
            E6["EXP: rooProfile"]
            E7["EXP: vscodeProfile"]
        end
        subgraph file51Constants["index.js-Const Declarations"]
            C0["(none)"]
        end
        subgraph file51Flow["index.js-Execution Flow"]
            FL1["Expose public API via exports"]
        end
    end
    subgraph file52["src/profiles/roo.js"]
        subgraph file52Imports["roo.js-Imports"]
            I1["IMPORT: path, FROM: path"]
            I2["IMPORT: fs, FROM: fs"]
            I3["IMPORT: ../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
            I4["IMPORT: ./base-profile.js, FROM: /claude-task-master/src/profiles/base-profile.js"]
            I5["IMPORT: ../constants/profiles.js, FROM: /claude-task-master/src/constants/profiles.js"]
        end
        subgraph file52Functions["roo.js-Functions Defined"]
            FU1["FUNCTION: onAddRulesProfile"]
            FU2["FUNCTION: copyRecursiveSync"]
            FU3["FUNCTION: onRemoveRulesProfile"]
            FU4["FUNCTION: onPostConvertRulesProfile"]
        end
        subgraph file52Exports["roo.js-Exports"]
            E1["EXP: rooProfile"]
            E2["EXP: onAddRulesProfile"]
            E3["EXP: onRemoveRulesProfile"]
            E4["EXP: onPostConvertRulesProfile"]
        end
        subgraph file52Constants["roo.js-Const Declarations"]
            C1["CONST: sourceDir, VALUE: path.join(assetsDir, 'roocode')"]
            C2["CONST: rooModesDir, VALUE: path.join(sourceDir, '.roo')"]
            C3["CONST: roomodesSrc, VALUE: path.join(sourceDir, '.roomodes')"]
            C4["CONST: roomodesDest, VALUE: path.join(targetDir, '.roomodes')"]
            C5["CONST: src, VALUE: path.join(rooModesDir, `rules-${mode}`, `${mode}-rules`)"]
            C6["CONST: dest, VALUE: path.join(targetDir, '.roo', `rules-${mode}`, `${mode}-rules`)"]
            C7["CONST: destDir, VALUE: path.dirname(dest)"]
            C8["CONST: exists, VALUE: fs.existsSync(src)"]
            C9["CONST: stats, VALUE: exists && fs.statSync(src)"]
            C10["CONST: isDirectory, VALUE: exists && stats.isDirectory()"]
            C11["CONST: roomodesPath, VALUE: path.join(targetDir, '.roomodes')"]
            C12["CONST: rooDir, VALUE: path.join(targetDir, '.roo')"]
            C13["CONST: modeDir, VALUE: path.join(rooDir, entry)"]
            C14["CONST: rooProfile, VALUE: createProfile({"]
        end
        subgraph file52Flow["roo.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file53["src/profiles/vscode.js"]
        subgraph file53Imports["vscode.js-Imports"]
            I1["IMPORT: path, FROM: path"]
            I2["IMPORT: fs, FROM: fs"]
            I3["IMPORT: ../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
            I4["IMPORT: ./base-profile.js, FROM: /claude-task-master/src/profiles/base-profile.js"]
        end
        subgraph file53Functions["vscode.js-Functions Defined"]
            FU1["FUNCTION: transformToVSCodeFormat"]
            FU2["FUNCTION: onPostConvertRulesProfile"]
            FU3["FUNCTION: onRemoveRulesProfile"]
        end
        subgraph file53Exports["vscode.js-Exports"]
            E1["EXP: vscodeProfile"]
            E2["EXP: onPostConvertRulesProfile"]
            E3["EXP: onRemoveRulesProfile"]
        end
        subgraph file53Constants["vscode.js-Const Declarations"]
            C1["CONST: vscodeConfig, VALUE: {}"]
            C2["CONST: transformedServer, VALUE: {"]
            C3["CONST: reorderedServer, VALUE: {}"]
            C4["CONST: vscodeConfigPath, VALUE: path.join(targetDir, '.vscode', 'mcp.json')"]
            C5["CONST: mcpConfigContent, VALUE: fs.readFileSync(vscodeConfigPath, 'utf8')"]
            C6["CONST: mcpConfig, VALUE: JSON.parse(mcpConfigContent)"]
            C7["CONST: vscodeConfig, VALUE: transformToVSCodeFormat(mcpConfig)"]
            C8["CONST: vscodeConfigPath, VALUE: path.join(targetDir, '.vscode', 'mcp.json')"]
            C9["CONST: configContent, VALUE: fs.readFileSync(vscodeConfigPath, 'utf8')"]
            C10["CONST: config, VALUE: JSON.parse(configContent)"]
            C11["CONST: remainingServers, VALUE: Object.keys(config.servers)"]
            C12["CONST: vscodeDir, VALUE: path.dirname(vscodeConfigPath)"]
            C13["CONST: dirContents, VALUE: fs.readdirSync(vscodeDir)"]
            C14["CONST: vscodeProfile, VALUE: createProfile({"]
        end
        subgraph file53Flow["vscode.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file54["src/provider-registry/index.js"]
        subgraph file54Imports["index.js-Imports"]
            I0["(none)"]
        end
        subgraph file54Functions["index.js-Functions Defined"]
            FU0["(none)"]
        end
        subgraph file54Exports["index.js-Exports"]
            E1["EXP: ProviderRegistry"]
        end
        subgraph file54Constants["index.js-Const Declarations"]
            C1["CONST: providerEntry, VALUE: this._providers.get(providerName)"]
        end
        subgraph file54Flow["index.js-Execution Flow"]
            FL1["Expose public API via exports"]
        end
    end
    subgraph file55["src/task-master.js"]
        subgraph file55Imports["task-master.js-Imports"]
            I1["IMPORT: path, FROM: path"]
            I2["IMPORT: fs, FROM: fs"]
            I3["IMPORT: ./utils/path-utils.js, FROM: /claude-task-master/src/utils/path-utils.js"]
        end
        subgraph file55Functions["task-master.js-Functions Defined"]
            FU1["FUNCTION: initTaskMaster"]
            FU2["FUNCTION: resolvePath"]
        end
        subgraph file55Exports["task-master.js-Exports"]
            E1["EXP: TaskMaster"]
            E2["EXP: initTaskMaster"]
        end
        subgraph file55Constants["task-master.js-Const Declarations"]
            C1["CONST: complexityReportFile, VALUE: this.getCurrentTag() !== 'master'"]
            C2["CONST: rawState, VALUE: fs.readFileSync(this.#paths.statePath, 'utf8')"]
            C3["CONST: stateData, VALUE: JSON.parse(rawState)"]
            C4["CONST: rawConfig, VALUE: fs.readFileSync(this.#paths.configPath, 'utf8')"]
            C5["CONST: configData, VALUE: JSON.parse(rawConfig)"]
            C6["CONST: resolvePath, VALUE: ("]
            C7["CONST: resolvedPath, VALUE: path.isAbsolute(override)"]
            C8["CONST: parentDir, VALUE: path.dirname(resolvedPath)"]
            C9["CONST: fullPath, VALUE: path.isAbsolute(defaultPath)"]
            C10["CONST: fullPath, VALUE: path.isAbsolute(defaultPath)"]
            C11["CONST: paths, VALUE: {}"]
            C12["CONST: resolvedOverride, VALUE: path.resolve(overrides.projectRoot)"]
            C13["CONST: hasTaskmasterDir, VALUE: fs.existsSync("]
            C14["CONST: hasLegacyConfig, VALUE: fs.existsSync("]
        end
        subgraph file55Flow["task-master.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file56["src/utils/create-mcp-config.js"]
        subgraph file56Imports["create-mcp-config.js-Imports"]
            I1["IMPORT: fs, FROM: fs"]
            I2["IMPORT: path, FROM: path"]
            I3["IMPORT: ../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        end
        subgraph file56Functions["create-mcp-config.js-Functions Defined"]
            FU1["FUNCTION: formatJSONWithTabs"]
            FU2["FUNCTION: setupMCPConfiguration"]
            FU3["FUNCTION: removeTaskMasterMCPConfiguration"]
        end
        subgraph file56Exports["create-mcp-config.js-Exports"]
            E1["EXP: setupMCPConfiguration"]
            E2["EXP: removeTaskMasterMCPConfiguration"]
        end
        subgraph file56Constants["create-mcp-config.js-Const Declarations"]
            C1["CONST: singleLineContent, VALUE: content"]
            C2["CONST: mcpPath, VALUE: path.join(projectRoot, mcpConfigPath)"]
            C3["CONST: configDir, VALUE: path.dirname(mcpPath)"]
            C4["CONST: newMCPServer, VALUE: {"]
            C5["CONST: mcpConfig, VALUE: JSON.parse(fs.readFileSync(mcpPath, 'utf8'))"]
            C6["CONST: hasMCPString, VALUE: Object.values(mcpConfig.mcpServers).some("]
            C7["CONST: backupPath, VALUE: `${mcpPath}.backup-${Date.now()}`"]
            C8["CONST: newMCPConfig, VALUE: {"]
            C9["CONST: newMCPConfig, VALUE: {"]
            C10["CONST: mcpPath, VALUE: path.join(projectRoot, mcpConfigPath)"]
            C11["CONST: mcpConfig, VALUE: JSON.parse(fs.readFileSync(mcpPath, 'utf8'))"]
            C12["CONST: hasTaskMaster, VALUE: mcpConfig.mcpServers['task-master-ai'] ||"]
            C13["CONST: server, VALUE: mcpConfig.mcpServers[serverName]"]
            C14["CONST: remainingServers, VALUE: Object.keys(mcpConfig.mcpServers)"]
        end
        subgraph file56Flow["create-mcp-config.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file57["src/utils/getVersion.js"]
        subgraph file57Imports["getVersion.js-Imports"]
            I1["IMPORT: fs, FROM: fs"]
            I2["IMPORT: path, FROM: path"]
            I3["IMPORT: url, FROM: url"]
            I4["IMPORT: ../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        end
        subgraph file57Functions["getVersion.js-Functions Defined"]
            FU1["FUNCTION: getTaskMasterVersion"]
        end
        subgraph file57Exports["getVersion.js-Exports"]
            E1["EXP: getTaskMasterVersion"]
        end
        subgraph file57Constants["getVersion.js-Const Declarations"]
            C1["CONST: currentModuleFilename, VALUE: fileURLToPath(import.meta.url)"]
            C2["CONST: currentModuleDirname, VALUE: path.dirname(currentModuleFilename)"]
            C3["CONST: packageJsonPath, VALUE: path.join("]
            C4["CONST: packageJsonContent, VALUE: fs.readFileSync(packageJsonPath, 'utf8')"]
            C5["CONST: packageJson, VALUE: JSON.parse(packageJsonContent)"]
        end
        subgraph file57Flow["getVersion.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file58["src/utils/logger-utils.js"]
        subgraph file58Imports["logger-utils.js-Imports"]
            I1["IMPORT: ../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        end
        subgraph file58Functions["logger-utils.js-Functions Defined"]
            FU1["FUNCTION: createStandardLogger"]
            FU2["FUNCTION: getLoggerOrDefault"]
        end
        subgraph file58Exports["logger-utils.js-Exports"]
            E1["EXP: createStandardLogger"]
            E2["EXP: getLoggerOrDefault"]
        end
        subgraph file58Constants["logger-utils.js-Const Declarations"]
            C0["(none)"]
        end
        subgraph file58Flow["logger-utils.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file59["src/utils/manage-gitignore.js"]
        subgraph file59Imports["manage-gitignore.js-Imports"]
            I1["IMPORT: fs, FROM: fs"]
            I2["IMPORT: path, FROM: path"]
        end
        subgraph file59Functions["manage-gitignore.js-Functions Defined"]
            FU1["FUNCTION: normalizeLine"]
            FU2["FUNCTION: isTaskLine"]
            FU3["FUNCTION: adjustTaskLinesInTemplate"]
            FU4["FUNCTION: removeExistingTaskSection"]
            FU5["FUNCTION: filterNewTemplateLines"]
            FU6["FUNCTION: buildTaskFilesSection"]
            FU7["FUNCTION: addSeparatorIfNeeded"]
            FU8["FUNCTION: validateInputs"]
            FU9["FUNCTION: createNewGitignoreFile"]
            FU10["FUNCTION: mergeWithExistingFile"]
            FU11["FUNCTION: manageGitignoreFile"]
        end
        subgraph file59Exports["manage-gitignore.js-Exports"]
            E1["EXP: manageGitignoreFile"]
            E2["EXP: normalizeLine"]
            E3["EXP: isTaskLine"]
            E4["EXP: buildTaskFilesSection"]
            E5["EXP: TASK_FILES_COMMENT"]
            E6["EXP: TASK_JSON_PATTERN"]
            E7["EXP: TASK_DIR_PATTERN"]
        end
        subgraph file59Constants["manage-gitignore.js-Const Declarations"]
            C1["CONST: TASK_FILES_COMMENT, VALUE: '# Task files'"]
            C2["CONST: TASK_JSON_PATTERN, VALUE: 'tasks.json'"]
            C3["CONST: TASK_DIR_PATTERN, VALUE: 'tasks/'"]
            C4["CONST: normalized, VALUE: normalizeLine(line)"]
            C5["CONST: normalized, VALUE: normalizeLine(line)"]
            C6["CONST: originalTrailingSpace, VALUE: line.match(/\\s*$/)[0]"]
            C7["CONST: cleanedLines, VALUE: []"]
            C8["CONST: trimmed, VALUE: line.trim()"]
            C9["CONST: section, VALUE: [TASK_FILES_COMMENT]"]
            C10["CONST: lastLine, VALUE: lines[lines.length - 1]"]
            C11["CONST: existingContent, VALUE: fs.readFileSync(targetPath, 'utf8')"]
            C12["CONST: existingLines, VALUE: existingContent.split('\\n')"]
            C13["CONST: cleanedExistingLines, VALUE: removeExistingTaskSection(existingLines)"]
            C14["CONST: existingLinesSet, VALUE: new Set("]
            C15["CONST: newLines, VALUE: filterNewTemplateLines(templateLines, existingLinesSet)"]
            C16["CONST: finalLines, VALUE: [...cleanedExistingLines]"]
            C17["CONST: hasNewContent, VALUE: newLines.length > 0 ? ' and merged new content' : ''"]
            C18["CONST: templateLines, VALUE: content.split('\\n')"]
            C19["CONST: adjustedTemplateLines, VALUE: adjustTaskLinesInTemplate("]
        end
        subgraph file59Flow["manage-gitignore.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file60["src/utils/path-utils.js"]
        subgraph file60Imports["path-utils.js-Imports"]
            I1["IMPORT: path, FROM: path"]
            I2["IMPORT: fs, FROM: fs"]
            I3["IMPORT: ./logger-utils.js, FROM: /claude-task-master/src/utils/logger-utils.js"]
        end
        subgraph file60Functions["path-utils.js-Functions Defined"]
            FU1["FUNCTION: normalizeProjectRoot"]
            FU2["FUNCTION: findProjectRoot"]
            FU3["FUNCTION: findTasksPath"]
            FU4["FUNCTION: findPRDPath"]
            FU5["FUNCTION: findComplexityReportPath"]
            FU6["FUNCTION: resolveTasksOutputPath"]
            FU7["FUNCTION: resolveComplexityReportOutputPath"]
            FU8["FUNCTION: findConfigPath"]
        end
        subgraph file60Exports["path-utils.js-Exports"]
            E1["EXP: normalizeProjectRoot"]
            E2["EXP: findProjectRoot"]
            E3["EXP: findTasksPath"]
            E4["EXP: findPRDPath"]
            E5["EXP: findComplexityReportPath"]
            E6["EXP: resolveTasksOutputPath"]
            E7["EXP: resolveComplexityReportOutputPath"]
            E8["EXP: findConfigPath"]
        end
        subgraph file60Constants["path-utils.js-Const Declarations"]
            C1["CONST: segments, VALUE: projectRoot.split(path.sep)"]
            C2["CONST: taskmasterIndex, VALUE: segments.findIndex("]
            C3["CONST: normalizedSegments, VALUE: segments.slice(0, taskmasterIndex)"]
            C4["CONST: projectMarkers, VALUE: ["]
            C5["CONST: rootDir, VALUE: path.parse(currentDir).root"]
            C6["CONST: maxDepth, VALUE: 50"]
            C7["CONST: markerPath, VALUE: path.join(currentDir, marker)"]
            C8["CONST: logger, VALUE: getLoggerOrDefault(log)"]
            C9["CONST: rawProjectRoot, VALUE: args?.projectRoot || findProjectRoot()"]
            C10["CONST: projectRoot, VALUE: normalizeProjectRoot(rawProjectRoot)"]
            C11["CONST: resolvedPath, VALUE: path.isAbsolute(explicitPath)"]
            C12["CONST: possiblePaths, VALUE: ["]
            C13["CONST: logger, VALUE: getLoggerOrDefault(log)"]
            C14["CONST: resolvedPath, VALUE: path.isAbsolute(explicitPath)"]
            C15["CONST: rawProjectRoot, VALUE: args?.projectRoot || findProjectRoot()"]
            C16["CONST: projectRoot, VALUE: normalizeProjectRoot(rawProjectRoot)"]
            C17["CONST: locations, VALUE: ["]
            C18["CONST: fileNames, VALUE: ['PRD.md', 'prd.md', 'PRD.txt', 'prd.txt']"]
            C19["CONST: prdPath, VALUE: path.join(projectRoot, location, fileName)"]
            C20["CONST: logger, VALUE: getLoggerOrDefault(log)"]
            C21["CONST: resolvedPath, VALUE: path.isAbsolute(explicitPath)"]
            C22["CONST: rawProjectRoot, VALUE: args?.projectRoot || findProjectRoot()"]
            C23["CONST: projectRoot, VALUE: normalizeProjectRoot(rawProjectRoot)"]
            C24["CONST: locations, VALUE: ["]
            C25["CONST: fileNames, VALUE: ["]
            C26["CONST: reportPath, VALUE: path.join(projectRoot, location, fileName)"]
            C27["CONST: logger, VALUE: getLoggerOrDefault(log)"]
            C28["CONST: resolvedPath, VALUE: path.isAbsolute(explicitPath)"]
            C29["CONST: rawProjectRoot, VALUE: args?.projectRoot || findProjectRoot() || process.cwd()"]
            C30["CONST: projectRoot, VALUE: normalizeProjectRoot(rawProjectRoot)"]
            C31["CONST: defaultPath, VALUE: path.join(projectRoot, TASKMASTER_TASKS_FILE)"]
            C32["CONST: outputDir, VALUE: path.dirname(defaultPath)"]
            C33["CONST: logger, VALUE: getLoggerOrDefault(log)"]
            C34["CONST: tag, VALUE: args?.tag"]
            C35["CONST: resolvedPath, VALUE: path.isAbsolute(explicitPath)"]
            C36["CONST: rawProjectRoot, VALUE: args?.projectRoot || findProjectRoot() || process.cwd()"]
            C37["CONST: projectRoot, VALUE: normalizeProjectRoot(rawProjectRoot)"]
            C38["CONST: defaultPath, VALUE: path.join(projectRoot, '.taskmaster/reports', filename)"]
            C39["CONST: outputDir, VALUE: path.dirname(defaultPath)"]
            C40["CONST: logger, VALUE: getLoggerOrDefault(log)"]
            C41["CONST: resolvedPath, VALUE: path.isAbsolute(explicitPath)"]
            C42["CONST: rawProjectRoot, VALUE: args?.projectRoot || findProjectRoot()"]
            C43["CONST: projectRoot, VALUE: normalizeProjectRoot(rawProjectRoot)"]
            C44["CONST: possiblePaths, VALUE: ["]
        end
        subgraph file60Flow["path-utils.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file61["src/utils/profiles.js"]
        subgraph file61Imports["profiles.js-Imports"]
            I1["IMPORT: fs, FROM: fs"]
            I2["IMPORT: path, FROM: path"]
            I3["IMPORT: inquirer, FROM: inquirer"]
            I4["IMPORT: chalk, FROM: chalk"]
            I5["IMPORT: boxen, FROM: boxen"]
            I6["IMPORT: ../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
            I7["IMPORT: ./rule-transformer.js, FROM: /claude-task-master/src/utils/rule-transformer.js"]
            I8["IMPORT: ../constants/profiles.js, FROM: /claude-task-master/src/constants/profiles.js"]
        end
        subgraph file61Functions["profiles.js-Functions Defined"]
            FU1["FUNCTION: getProfileDisplayName"]
            FU2["FUNCTION: getInstalledProfiles"]
            FU3["FUNCTION: wouldRemovalLeaveNoProfiles"]
            FU4["FUNCTION: runInteractiveProfilesSetup"]
            FU5["FUNCTION: generateProfileSummary"]
            FU6["FUNCTION: generateProfileRemovalSummary"]
            FU7["FUNCTION: categorizeProfileResults"]
            FU8["FUNCTION: categorizeRemovalResults"]
        end
        subgraph file61Exports["profiles.js-Exports"]
            E1["EXP: getProfileDisplayName"]
            E2["EXP: getInstalledProfiles"]
            E3["EXP: wouldRemovalLeaveNoProfiles"]
            E4["EXP: generateProfileSummary"]
            E5["EXP: generateProfileRemovalSummary"]
            E6["EXP: categorizeProfileResults"]
            E7["EXP: categorizeRemovalResults"]
        end
        subgraph file61Constants["profiles.js-Const Declarations"]
            C1["CONST: profile, VALUE: getRulesProfile(profileName)"]
            C2["CONST: installedProfiles, VALUE: []"]
            C3["CONST: profile, VALUE: getRulesProfile(profileName)"]
            C4["CONST: profileDir, VALUE: path.join(projectRoot, profile.profileDir)"]
            C5["CONST: rulesDir, VALUE: path.join(projectRoot, profile.rulesDir)"]
            C6["CONST: ruleFiles, VALUE: Object.values(profile.fileMap)"]
            C7["CONST: hasRuleFiles, VALUE: ruleFiles.some((ruleFile) =>"]
            C8["CONST: installedProfiles, VALUE: getInstalledProfiles(projectRoot)"]
            C9["CONST: remainingProfiles, VALUE: installedProfiles.filter("]
            C10["CONST: profileDescriptions, VALUE: RULE_PROFILES.map((profileName) => {"]
            C11["CONST: displayName, VALUE: getProfileDisplayName(profileName)"]
            C12["CONST: profile, VALUE: getRulesProfile(profileName)"]
            C13["CONST: hasRules, VALUE: Object.keys(profile.fileMap).length > 0"]
            C14["CONST: hasMcpConfig, VALUE: profile.mcpConfig === true"]
            C15["CONST: profileListText, VALUE: profileDescriptions"]
            C16["CONST: sortedChoices, VALUE: profileDescriptions.map("]
            C17["CONST: ruleProfilesQuestion, VALUE: {"]
            C18["CONST: profileConfig, VALUE: getRulesProfile(profileName)"]
            C19["CONST: profileConfig, VALUE: getRulesProfile(profileName)"]
            C20["CONST: baseMessage, VALUE: `Summary for ${profileName}: Integration guide removed`"]
            C21["CONST: baseMessage, VALUE: `Summary for ${profileName}: Rule profile removed`"]
            C22["CONST: successfulProfiles, VALUE: []"]
            C23["CONST: successfulRemovals, VALUE: []"]
            C24["CONST: skippedRemovals, VALUE: []"]
            C25["CONST: failedRemovals, VALUE: []"]
            C26["CONST: removalsWithNotices, VALUE: []"]
        end
        subgraph file61Flow["profiles.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file62["src/utils/rule-transformer.js"]
        subgraph file62Imports["rule-transformer.js-Imports"]
            I1["IMPORT: fs, FROM: fs"]
            I2["IMPORT: path, FROM: path"]
            I3["IMPORT: url, FROM: url"]
            I4["IMPORT: ../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
            I5["IMPORT: ../constants/profiles.js, FROM: /claude-task-master/src/constants/profiles.js"]
            I6["IMPORT: ../profiles/index.js, FROM: /claude-task-master/src/profiles/index.js"]
        end
        subgraph file62Functions["rule-transformer.js-Functions Defined"]
            FU1["FUNCTION: isValidProfile"]
            FU2["FUNCTION: getRulesProfile"]
            FU3["FUNCTION: replaceBasicTerms"]
            FU4["FUNCTION: replaceToolReferences"]
            FU5["FUNCTION: updateDocReferences"]
            FU6["FUNCTION: updateFileReferences"]
            FU7["FUNCTION: transformRuleContent"]
            FU8["FUNCTION: convertRuleToProfileRule"]
            FU9["FUNCTION: convertAllRulesToProfileRules"]
            FU10["FUNCTION: removeProfileRules"]
        end
        subgraph file62Exports["rule-transformer.js-Exports"]
            E1["EXP: isValidProfile"]
            E2["EXP: getRulesProfile"]
            E3["EXP: convertRuleToProfileRule"]
            E4["EXP: convertAllRulesToProfileRules"]
            E5["EXP: removeProfileRules"]
        end
        subgraph file62Constants["rule-transformer.js-Const Declarations"]
            C1["CONST: profileKey, VALUE: `${name}Profile`"]
            C2["CONST: profile, VALUE: profilesModule[profileKey]"]
            C3["CONST: toolNames, VALUE: conversionConfig.toolNames"]
            C4["CONST: toolReferencePattern, VALUE: new RegExp("]
            C5["CONST: content, VALUE: fs.readFileSync(sourcePath, 'utf8')"]
            C6["CONST: transformedContent, VALUE: transformRuleContent("]
            C7["CONST: targetDir, VALUE: path.dirname(targetPath)"]
            C8["CONST: __filename, VALUE: fileURLToPath(import.meta.url)"]
            C9["CONST: __dirname, VALUE: path.dirname(__filename)"]
            C10["CONST: sourceDir, VALUE: path.join(__dirname, '..', '..', 'assets', 'rules')"]
            C11["CONST: targetDir, VALUE: path.join(projectRoot, profile.rulesDir)"]
            C12["CONST: assetsDir, VALUE: path.join(__dirname, '..', '..', 'assets')"]
            C13["CONST: sourceFiles, VALUE: Object.keys(profile.fileMap)"]
            C14["CONST: isAssetFile, VALUE: !sourceFile.startsWith('rules/')"]
            C15["CONST: sourcePath, VALUE: path.join(assetsDir, sourceFile)"]
            C16["CONST: targetFilename, VALUE: profile.fileMap[sourceFile]"]
            C17["CONST: targetPath, VALUE: path.join(targetDir, targetFilename)"]
            C18["CONST: targetFileDir, VALUE: path.dirname(targetPath)"]
            C19["CONST: targetDir, VALUE: path.join(projectRoot, profile.rulesDir)"]
            C20["CONST: profileDir, VALUE: path.join(projectRoot, profile.profileDir)"]
            C21["CONST: result, VALUE: {"]
            C22["CONST: sourceFiles, VALUE: Object.keys(profile.fileMap)"]
            C23["CONST: taskMasterFiles, VALUE: sourceFiles.map("]
            C24["CONST: allFiles, VALUE: fs.readdirSync(targetDir, { recursive: true })"]
            C25["CONST: allFilePaths, VALUE: allFiles"]
            C26["CONST: fullPath, VALUE: path.join(targetDir, file)"]
            C27["CONST: filePath, VALUE: path.join(targetDir, taskMasterFile)"]
            C28["CONST: remainingFiles, VALUE: allFilePaths.filter("]
            C29["CONST: remainingContents, VALUE: fs.readdirSync(profileDir)"]
            C30["CONST: preservedNotice, VALUE: `Preserved ${remainingContents.length} existing files/folders in ${profile.profileDir}`"]
        end
        subgraph file62Flow["rule-transformer.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    SharedImports --> file1Imports
    SharedDependencies --> file1
    SharedParameters --> file1
    SharedConstants --> file1Constants
```