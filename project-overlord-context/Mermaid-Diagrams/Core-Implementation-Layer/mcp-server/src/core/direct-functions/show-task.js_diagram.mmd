```mermaid
flowchart TB
    subgraph Imports["Imports"]
        I1["IMPORT: ../utils/path-utils.js, FROM: /claude-task-master/mcp-server/src/core/utils/path-utils.js"]
    end
    subgraph Dependencies["Dependencies"]
        D1["DEP: Path resolution"]
    end
    subgraph FunctionsDefined["Functions Defined"]
        FU1["FUNCTION: showTaskDirect"]
    end
    subgraph Parameters["Parameters"]
        P1["PARAM: {Object} args - Command arguments."]
        P2["PARAM: {string} args.id - Task ID to show."]
        P3["PARAM: {string} [args.file] - Optional path to the tasks file (passed to findTasksPath)."]
        P4["PARAM: {string} args.reportPath - Explicit path to the complexity report file."]
        P5["PARAM: {string} [args.status] - Optional status to filter subtasks by."]
        P6["PARAM: {string} args.projectRoot - Absolute path to the project root directory (already normalized by tool)."]
        P7["PARAM: {string} [args.tag] - Tag for the task"]
        P8["PARAM: {Object} log - Logger object."]
        P9["PARAM: {Object} context - Context object containing session data."]
    end
    subgraph Constants["Const Declarations"]
        C1["CONST: tasksData, VALUE: readJSON(tasksJsonPath, projectRoot, tag)"]
        C2["CONST: complexityReport, VALUE: readComplexityReport(reportPath)"]
        C3["CONST: taskIds, VALUE: id"]
        C4["CONST: returnData, VALUE: { ...task }"]
        C5["CONST: foundTasks, VALUE: []"]
        C6["CONST: notFoundIds, VALUE: []"]
        C7["CONST: taskData, VALUE: { ...task }"]
    end
    subgraph ExecutionFlow["Execution Flow"]
        FL1["Identify and load dependencies and modules"]
        FL2["Define functions and core logic for this module"]
    end
    subgraph FileName["show-task.js"]
        Imports
        Dependencies
        FunctionsDefined
        Parameters
        Constants
        ExecutionFlow
    end
    FL1 --> FL2
```