```mermaid
flowchart TB
    subgraph Imports["Imports"]
        I1["IMPORT: generateObject, FROM: ai"]
        I2["IMPORT: generateText, FROM: ai"]
        I3["IMPORT: streamText, FROM: ai"]
        I4["IMPORT: zodSchema, FROM: ai"]
        I5["IMPORT: JSONParseError, FROM: ai"]
        I6["IMPORT: NoObjectGeneratedError, FROM: ai"]
        I7["IMPORT: jsonrepair, FROM: jsonrepair"]
        I8["IMPORT: log, FROM: /claude-task-master/scripts/modules/utils.js"]
    end
    
    subgraph Dependencies["Dependencies"]
        D1["DEP: Vercel AI SDK for unified AI provider interface"]
        D2["DEP: JSON repair library for malformed response handling"]
    end
    
    subgraph FunctionsDefined["Functions Defined"]
        FU1["FUNCTION: constructor"]
        FU2["FUNCTION: validateAuth"]
        FU3["FUNCTION: validateParams"]
        FU4["FUNCTION: validateOptionalParams"]
        FU5["FUNCTION: validateMessages"]
        FU6["FUNCTION: handleError"]
        FU7["FUNCTION: getClient"]
        FU8["FUNCTION: isRequiredApiKey"]
        FU9["FUNCTION: getRequiredApiKeyName"]
        FU10["FUNCTION: requiresMaxCompletionTokens"]
        FU11["FUNCTION: prepareTokenParam"]
        FU12["FUNCTION: generateText"]
        FU13["FUNCTION: streamText"]
        FU14["FUNCTION: generateObject"]
    end
    
    subgraph Exports["Exports"]
        E1["EXP: BaseAIProvider"]
    end
    
    subgraph Parameters["Parameters"]
        P1["PARAM: {object} params - authentication parameters to validate"]
        P2["PARAM: {object} params - common parameters to validate"]
        P3["PARAM: {object} params - optional parameters like temperature and maxTokens"]
        P4["PARAM: {Array} messages - array of message objects with role and content"]
        P5["PARAM: {string} operation - the operation being performed"]
        P6["PARAM: {Error} error - the error that occurred"]
        P7["PARAM: {string} modelId - the model ID to check for token requirements"]
        P8["PARAM: {number} maxTokens - the maximum tokens value"]
        P9["PARAM: {object} params - parameters for text generation including messages and model"]
        P10["PARAM: {object} params - parameters for object generation including schema and objectName"]
    end
    
    subgraph Constants["Const Declarations"]
        C1["CONST: errorMessage, VALUE: extracted error message or default text"]
        C2["CONST: client, VALUE: provider-specific client instance"]
        C3["CONST: result, VALUE: AI SDK operation result"]
        C4["CONST: tokenValue, VALUE: integer conversion of maxTokens"]
        C5["CONST: repairedJson, VALUE: JSON repair attempt result"]
        C6["CONST: parsed, VALUE: successfully parsed JSON object"]
    end
    
    subgraph ExecutionFlow["Execution Flow"]
        FL1["Establish abstract base class that cannot be instantiated directly"]
        FL2["Provide common validation methods for all AI providers"]
        FL3["Handle authentication, parameters, and message format validation"]
        FL4["Implement universal error handling with logging"]
        FL5["Define abstract methods that must be implemented by child providers"]
        FL6["Provide token parameter preparation based on model requirements"]
        FL7["Execute AI operations through Vercel AI SDK with error recovery"]
        FL8["Return standardized response format with usage statistics"]
    end
    
    subgraph baseProvider["base-provider.js"]
        Imports
        Dependencies
        FunctionsDefined
        Exports
        Parameters
        Constants
        ExecutionFlow
    end
    
    FL1 --> FL2
    FL2 --> FL3
    FL3 --> FL4
    FL4 --> FL5
    FL5 --> FL6
    FL6 --> FL7
    FL7 --> FL8
```