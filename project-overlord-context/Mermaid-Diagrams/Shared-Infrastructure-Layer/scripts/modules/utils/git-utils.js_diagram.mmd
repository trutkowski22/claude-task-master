```mermaid
flowchart TB
    subgraph Imports["Imports"]
        I1["IMPORT: child_process, FROM: child_process"]
        I2["IMPORT: util, FROM: util"]
        I3["IMPORT: path, FROM: path"]
        I4["IMPORT: fs, FROM: fs"]
    end
    subgraph Dependencies["Dependencies"]
        D1["DEP: File system"]
        D2["DEP: Path resolution"]
    end
    subgraph FunctionsDefined["Functions Defined"]
        FU1["FUNCTION: isGitRepository"]
        FU2["FUNCTION: getCurrentBranch"]
        FU3["FUNCTION: getLocalBranches"]
        FU4["FUNCTION: getRemoteBranches"]
        FU5["FUNCTION: isGhCliAvailable"]
        FU6["FUNCTION: getGitHubRepoInfo"]
        FU7["FUNCTION: sanitizeBranchNameForTag"]
        FU8["FUNCTION: isValidBranchForTag"]
        FU9["FUNCTION: getGitRepositoryRoot"]
        FU10["FUNCTION: isGitRepositoryRoot"]
        FU11["FUNCTION: getDefaultBranch"]
        FU12["FUNCTION: isOnDefaultBranch"]
        FU13["FUNCTION: checkAndAutoSwitchGitTag"]
        FU14["FUNCTION: checkAndAutoSwitchGitTagSync"]
        FU15["FUNCTION: isGitRepositorySync"]
        FU16["FUNCTION: getCurrentBranchSync"]
        FU17["FUNCTION: insideGitWorkTree"]
    end
    subgraph Exports["Exports"]
        E1["EXP: isGitRepository"]
        E2["EXP: getCurrentBranch"]
        E3["EXP: getLocalBranches"]
        E4["EXP: getRemoteBranches"]
        E5["EXP: isGhCliAvailable"]
        E6["EXP: getGitHubRepoInfo"]
        E7["EXP: sanitizeBranchNameForTag"]
        E8["EXP: isValidBranchForTag"]
        E9["EXP: getGitRepositoryRoot"]
        E10["EXP: isGitRepositoryRoot"]
        E11["EXP: getDefaultBranch"]
        E12["EXP: isOnDefaultBranch"]
        E13["EXP: checkAndAutoSwitchGitTag"]
        E14["EXP: checkAndAutoSwitchGitTagSync"]
        E15["EXP: isGitRepositorySync"]
        E16["EXP: getCurrentBranchSync"]
        E17["EXP: insideGitWorkTree"]
    end
    subgraph Parameters["Parameters"]
        P1["PARAM: {string} projectRoot - Directory to check (required)"]
        P2["PARAM: {string} projectRoot - Directory to check (required)"]
        P3["PARAM: {string} projectRoot - Directory to check (required)"]
        P4["PARAM: {string} projectRoot - Directory to check (required)"]
        P5["PARAM: {string} [projectRoot] - Directory context (optional for this check)"]
        P6["PARAM: {string} projectRoot - Directory to check (required)"]
        P7["PARAM: {string} branchName - Git branch name"]
        P8["PARAM: {string} branchName - Git branch name"]
        P9["PARAM: {string} projectRoot - Directory to start search from (required)"]
        P10["PARAM: {string} projectRoot - Directory to check (required)"]
        P11["PARAM: {string} projectRoot - Directory to check (required)"]
        P12["PARAM: {string} projectRoot - Directory to check (required)"]
        P13["PARAM: {string} projectRoot - Project root directory (required)"]
        P14["PARAM: {string} tasksPath - Path to tasks.json file"]
        P15["PARAM: {string} projectRoot - Project root directory (required)"]
        P16["PARAM: {string} tasksPath - Path to tasks.json file"]
        P17["PARAM: {string} projectRoot - Directory to check (required)"]
        P18["PARAM: {string} projectRoot - Directory to check (required)"]
    end
    subgraph Constants["Const Declarations"]
        C1["CONST: execAsync, VALUE: promisify(exec)"]
        C2["CONST: options, VALUE: projectRoot ? { cwd: projectRoot } : {}"]
        C3["CONST: reservedBranches, VALUE: ['main', 'master', 'develop', 'dev', 'HEAD']"]
        C4["CONST: sanitized, VALUE: sanitizeBranchNameForTag(branchName)"]
        C5["CONST: gitRoot, VALUE: await getGitRepositoryRoot(projectRoot)"]
        C6["CONST: repoInfo, VALUE: await getGitHubRepoInfo(projectRoot)"]
        C7["CONST: commonDefaults, VALUE: ['main', 'master']"]
        C8["CONST: branches, VALUE: await getLocalBranches(projectRoot)"]
        C9["CONST: currentBranch, VALUE: await getCurrentBranch(projectRoot)"]
        C10["CONST: defaultBranch, VALUE: await getDefaultBranch(projectRoot)"]
        C11["CONST: stdout, VALUE: execSync('git rev-parse --abbrev-ref HEAD', {"]
    end
    subgraph ExecutionFlow["Execution Flow"]
        FL1["Identify and load dependencies and modules"]
        FL2["Define functions and core logic for this module"]
        FL3["Expose public API via exports"]
    end
    subgraph FileName["git-utils.js"]
        Imports
        Dependencies
        FunctionsDefined
        Exports
        Parameters
        Constants
        ExecutionFlow
    end
    FL1 --> FL2
    FL2 --> FL3
```