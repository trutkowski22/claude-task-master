```mermaid
flowchart TB
    subgraph Imports["Imports"]
        I1["IMPORT: ../../../../scripts/modules/task-manager.js, FROM: /claude-task-master/scripts/modules/task-manager.js"]
    end
    subgraph Dependencies["Dependencies"]
        D1["DEP: Path resolution"]
    end
    subgraph FunctionsDefined["Functions Defined"]
        FU1["FUNCTION: nextTaskDirect"]
        FU2["FUNCTION: coreNextTaskAction"]
    end
    subgraph Parameters["Parameters"]
        P1["PARAM: {Object} args - Command arguments"]
        P2["PARAM: {string} args.tasksJsonPath - Explicit path to the tasks.json file."]
        P3["PARAM: {string} args.reportPath - Path to the report file."]
        P4["PARAM: {string} args.projectRoot - Project root path (for MCP/env fallback)"]
        P5["PARAM: {string} args.tag - Tag for the task (optional)"]
        P6["PARAM: {Object} log - Logger object"]
    end
    subgraph Constants["Const Declarations"]
        C1["CONST: coreNextTaskAction, VALUE: async () => {"]
        C2["CONST: data, VALUE: readJSON(tasksJsonPath, projectRoot, tag)"]
        C3["CONST: complexityReport, VALUE: readComplexityReport(reportPath)"]
        C4["CONST: nextTask, VALUE: findNextTask(data.tasks, complexityReport)"]
        C5["CONST: isSubtask, VALUE: typeof nextTask.id === 'string' && nextTask.id.includes('.')"]
        C6["CONST: taskOrSubtask, VALUE: isSubtask ? 'subtask' : 'task'"]
        C7["CONST: additionalAdvice, VALUE: isSubtask"]
        C8["CONST: result, VALUE: await coreNextTaskAction()"]
    end
    subgraph ExecutionFlow["Execution Flow"]
        FL1["Identify and load dependencies and modules"]
        FL2["Define functions and core logic for this module"]
    end
    subgraph FileName["next-task.js"]
        Imports
        Dependencies
        FunctionsDefined
        Parameters
        Constants
        ExecutionFlow
    end
    FL1 --> FL2
```