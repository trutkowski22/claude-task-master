```mermaid
flowchart TB
    subgraph Imports["Imports"]
        I1["IMPORT: path, FROM: path"]
        I2["IMPORT: ../utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        I3["IMPORT: ../task-manager.js, FROM: /claude-task-master/scripts/modules/task-manager.js"]
        I4["IMPORT: ./generate-task-files.js, FROM: /claude-task-master/scripts/modules/task-manager/generate-task-files.js"]
    end
    subgraph Dependencies["Dependencies"]
        D1["DEP: Path resolution"]
    end
    subgraph FunctionsDefined["Functions Defined"]
        FU1["FUNCTION: addSubtask"]
    end
    subgraph Exports["Exports"]
        E1["EXP: addSubtask"]
    end
    subgraph Parameters["Parameters"]
        P1["PARAM: {string} tasksPath - Path to the tasks.json file"]
        P2["PARAM: {number|string} parentId - ID of the parent task"]
        P3["PARAM: {number|string|null} existingTaskId - ID of an existing task to convert to subtask (optional)"]
        P4["PARAM: {Object} newSubtaskData - Data for creating a new subtask (used if existingTaskId is null)"]
        P5["PARAM: {boolean} generateFiles - Whether to regenerate task files after adding the subtask"]
        P6["PARAM: {Object} context - Context object containing projectRoot and tag information"]
        P7["PARAM: {string} context.projectRoot - Project root path"]
        P8["PARAM: {string} context.tag - Tag for the task"]
    end
    subgraph Constants["Const Declarations"]
        C1["CONST: data, VALUE: readJSON(tasksPath, projectRoot, tag)"]
        C2["CONST: parentIdNum, VALUE: parseInt(parentId, 10)"]
        C3["CONST: parentTask, VALUE: data.tasks.find((t) => t.id === parentIdNum)"]
        C4["CONST: existingTaskIdNum, VALUE: parseInt(existingTaskId, 10)"]
        C5["CONST: existingTaskIndex, VALUE: data.tasks.findIndex("]
        C6["CONST: existingTask, VALUE: data.tasks[existingTaskIndex]"]
        C7["CONST: highestSubtaskId, VALUE: parentTask.subtasks.length > 0"]
        C8["CONST: newSubtaskId, VALUE: highestSubtaskId + 1"]
        C9["CONST: highestSubtaskId, VALUE: parentTask.subtasks.length > 0"]
        C10["CONST: newSubtaskId, VALUE: highestSubtaskId + 1"]
    end
    subgraph ExecutionFlow["Execution Flow"]
        FL1["Identify and load dependencies and modules"]
        FL2["Define functions and core logic for this module"]
        FL3["Expose public API via exports"]
    end
    subgraph FileName["add-subtask.js"]
        Imports
        Dependencies
        FunctionsDefined
        Exports
        Parameters
        Constants
        ExecutionFlow
    end
    FL1 --> FL2
    FL2 --> FL3
```