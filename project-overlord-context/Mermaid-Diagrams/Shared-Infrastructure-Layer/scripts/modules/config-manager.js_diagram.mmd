flowchart TB
    subgraph Imports["Imports"]
        I1["IMPORT: fs, FROM: fs"]
        I2["IMPORT: path, FROM: path"]
        I3["IMPORT: fileURLToPath, FROM: url"]
        I4["IMPORT: chalk, FROM: chalk"]
        I5["IMPORT: z, FROM: zod"]
        I6["IMPORT: AI_COMMAND_NAMES, FROM: G:\claude-task-master\claude-task-master\src\constants\commands.js"]
        I7["IMPORT: LEGACY_CONFIG_FILE, TASKMASTER_DIR, FROM: G:\claude-task-master\claude-task-master\src\constants\paths.js"]
        I8["IMPORT: ALL_PROVIDERS, CUSTOM_PROVIDERS, CUSTOM_PROVIDERS_ARRAY, VALIDATED_PROVIDERS, FROM: G:\claude-task-master\claude-task-master\src\constants\providers.js"]
        I9["IMPORT: findConfigPath, FROM: G:\claude-task-master\claude-task-master\src\utils\path-utils.js"]
        I10["IMPORT: findProjectRoot, isEmpty, log, resolveEnvVariable, FROM: ./utils.js"]
    end
    
    subgraph Dependencies["Dependencies"]
        D1["DEP: Node.js fs module for file system operations"]
        D2["DEP: Node.js path module for file path operations"]
        D3["DEP: Node.js url module for ES module URL handling"]
        D4["DEP: chalk for console color styling"]
        D5["DEP: zod for schema validation"]
        D6["DEP: supported-models.json file for MODEL_MAP"]
    end
    
    subgraph FunctionsDefined["Functions Defined"]
        FU1["FUNCTION: _loadAndValidateConfig"]
        FU2["FUNCTION: getConfig"]
        FU3["FUNCTION: validateProvider"]
        FU4["FUNCTION: validateProviderModelCombination"]
        FU5["FUNCTION: validateClaudeCodeSettings"]
        FU6["FUNCTION: getClaudeCodeSettings"]
        FU7["FUNCTION: getClaudeCodeSettingsForCommand"]
        FU8["FUNCTION: getModelConfigForRole"]
        FU9["FUNCTION: getMainProvider/getMainModelId/getMainMaxTokens/getMainTemperature"]
        FU10["FUNCTION: getResearchProvider/getResearchModelId/getResearchMaxTokens/getResearchTemperature"]
        FU11["FUNCTION: getFallbackProvider/getFallbackModelId/getFallbackMaxTokens/getFallbackTemperature"]
        FU12["FUNCTION: getGlobalConfig"]
        FU13["FUNCTION: getLogLevel/getDebugFlag/getDefaultSubtasks/getDefaultNumTasks"]
        FU14["FUNCTION: getDefaultPriority/getProjectName/getOllamaBaseURL/getAzureBaseURL"]
        FU15["FUNCTION: getBedrockBaseURL/getVertexProjectId/getVertexLocation/getResponseLanguage"]
        FU16["FUNCTION: getParametersForRole"]
        FU17["FUNCTION: isApiKeySet"]
        FU18["FUNCTION: getMcpApiKeyStatus"]
        FU19["FUNCTION: getAvailableModels"]
        FU20["FUNCTION: writeConfig"]
        FU21["FUNCTION: isConfigFilePresent"]
        FU22["FUNCTION: getUserId"]
        FU23["FUNCTION: getAllProviders"]
        FU24["FUNCTION: getBaseUrlForRole"]
    end
    
    subgraph Classes["Classes Defined"]
        CL1["CLASS: ConfigurationError extends Error"]
    end
    
    subgraph Exports["Exports"]
        E1["EXP: getConfig"]
        E2["EXP: writeConfig"]
        E3["EXP: ConfigurationError"]
        E4["EXP: isConfigFilePresent"]
        E5["EXP: getClaudeCodeSettings"]
        E6["EXP: getClaudeCodeSettingsForCommand"]
        E7["EXP: validateProvider"]
        E8["EXP: validateProviderModelCombination"]
        E9["EXP: validateClaudeCodeSettings"]
        E10["EXP: VALIDATED_PROVIDERS, CUSTOM_PROVIDERS, ALL_PROVIDERS"]
        E11["EXP: MODEL_MAP"]
        E12["EXP: getAvailableModels"]
        E13["EXP: getMainProvider, getMainModelId, getMainMaxTokens, getMainTemperature"]
        E14["EXP: getResearchProvider, getResearchModelId, getResearchMaxTokens, getResearchTemperature"]
        E15["EXP: getFallbackProvider, getFallbackModelId, getFallbackMaxTokens, getFallbackTemperature"]
        E16["EXP: getBaseUrlForRole"]
        E17["EXP: getLogLevel, getDebugFlag, getDefaultNumTasks, getDefaultSubtasks"]
        E18["EXP: getDefaultPriority, getProjectName, getOllamaBaseURL, getAzureBaseURL"]
        E19["EXP: getBedrockBaseURL, getResponseLanguage, getParametersForRole, getUserId"]
        E20["EXP: isApiKeySet, getMcpApiKeyStatus, getAllProviders"]
        E21["EXP: getVertexProjectId, getVertexLocation"]
        E22["EXP: providersWithoutApiKeys"]
    end
    
    subgraph Parameters["Parameters"]
        P1["PARAM: {string|null} explicitRoot - Optional explicit path to project root"]
        P2["PARAM: {boolean} forceReload - Force reloading the config file"]
        P3["PARAM: {string} providerName - The name of the provider"]
        P4["PARAM: {string} modelId - The model ID"]
        P5["PARAM: {object} settings - The settings to validate"]
        P6["PARAM: {string} commandName - Command name for Claude Code settings"]
        P7["PARAM: {string} role - Model role (main, research, fallback)"]
        P8["PARAM: {object|null} session - MCP session object"]
        P9["PARAM: {string|null} projectRoot - Project root directory"]
        P10["PARAM: {Object} config - Configuration object to write"]
    end
    
    subgraph Constants["Const Declarations"]
        C1["CONST: __filename, VALUE: resolved file path in ESM"]
        C2["CONST: __dirname, VALUE: resolved directory path in ESM"]
        C3["CONST: MODEL_MAP, VALUE: loaded supported models from JSON"]
        C4["CONST: DEFAULTS, VALUE: default configuration values for models, global settings, claudeCode"]
        C5["CONST: loadedConfig, VALUE: cached configuration object"]
        C6["CONST: loadedConfigRoot, VALUE: cached project root for loaded config"]
        C7["CONST: providersWithoutApiKeys, VALUE: array of providers without API key requirements"]
    end
    
    subgraph ExecutionFlow["Execution Flow"]
        FL1["Load and parse supported-models.json file for MODEL_MAP"]
        FL2["Define default configuration with models, global, and claudeCode sections"]
        FL3["Cache configuration loading with explicitRoot tracking"]
        FL4["Validate provider names against CUSTOM_PROVIDERS_ARRAY and VALIDATED_PROVIDERS"]
        FL5["Deep merge parsed config with defaults, preserving structure"]
        FL6["Apply model-specific overrides from MODEL_MAP for max_tokens and temperature"]
        FL7["Validate Claude Code settings using Zod schema validation"]
        FL8["Check API key status in environment variables and .cursor/mcp.json"]
        FL9["Provide role-specific getters for main, research, and fallback models"]
        FL10["Write configuration to .taskmaster/config.json with directory creation"]
        FL11["Handle legacy config file migration warnings and deprecation notices"]
    end
    
    subgraph configManager["config-manager.js"]
        Imports
        Dependencies
        Classes
        FunctionsDefined
        Exports
        Parameters
        Constants
        ExecutionFlow
    end
    
    FL1 --> FL2
    FL2 --> FL3
    FL3 --> FL4
    FL4 --> FL5
    FL5 --> FL6
    FL6 --> FL7
    FL7 --> FL8
    FL8 --> FL9
    FL9 --> FL10
    FL10 --> FL11