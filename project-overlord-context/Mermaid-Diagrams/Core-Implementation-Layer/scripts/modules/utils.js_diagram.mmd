```mermaid
flowchart TB
    subgraph Imports["Imports"]
        I1["IMPORT: fs, FROM: fs"]
        I2["IMPORT: path, FROM: path"]
        I3["IMPORT: chalk, FROM: chalk"]
        I4["IMPORT: dotenv, FROM: dotenv"]
        I5["IMPORT: ./config-manager.js, FROM: /claude-task-master/scripts/modules/config-manager.js"]
        I6["IMPORT: ./utils/git-utils.js, FROM: /claude-task-master/scripts/modules/utils/git-utils.js"]
    end
    subgraph Dependencies["Dependencies"]
        D1["DEP: File system"]
        D2["DEP: Path resolution"]
    end
    subgraph FunctionsDefined["Functions Defined"]
        FU1["FUNCTION: resolveEnvVariable"]
        FU2["FUNCTION: slugifyTagForFilePath"]
        FU3["FUNCTION: getTagAwareFilePath"]
        FU4["FUNCTION: findProjectRoot"]
        FU5["FUNCTION: getTaskManager"]
        FU6["FUNCTION: enableSilentMode"]
        FU7["FUNCTION: disableSilentMode"]
        FU8["FUNCTION: isSilentMode"]
        FU9["FUNCTION: log"]
        FU10["FUNCTION: hasTaggedStructure"]
        FU11["FUNCTION: normalizeTaskIds"]
        FU12["FUNCTION: readJSON"]
        FU13["FUNCTION: performCompleteTagMigration"]
        FU14["FUNCTION: migrateConfigJson"]
        FU15["FUNCTION: createStateJson"]
        FU16["FUNCTION: markMigrationForNotice"]
        FU17["FUNCTION: writeJSON"]
        FU18["FUNCTION: sanitizePrompt"]
        FU19["FUNCTION: readComplexityReport"]
        FU20["FUNCTION: findTaskInComplexityReport"]
        FU21["FUNCTION: addComplexityToTask"]
        FU22["FUNCTION: taskExists"]
        FU23["FUNCTION: formatTaskId"]
        FU24["FUNCTION: findTaskById"]
        FU25["FUNCTION: truncate"]
        FU26["FUNCTION: isEmpty"]
        FU27["FUNCTION: findCycles"]
        FU28["FUNCTION: detectCamelCaseFlags"]
        FU29["FUNCTION: aggregateTelemetry"]
        FU30["FUNCTION: getCurrentTag"]
        FU31["FUNCTION: resolveTag"]
        FU32["FUNCTION: getTasksForTag"]
        FU33["FUNCTION: setTasksForTag"]
        FU34["FUNCTION: flattenTasksWithSubtasks"]
        FU35["FUNCTION: ensureTagMetadata"]
        FU36["FUNCTION: toKebabCase"]
    end
    subgraph Exports["Exports"]
        E1["EXP: LOG_LEVELS"]
        E2["EXP: log"]
        E3["EXP: readJSON"]
        E4["EXP: writeJSON"]
        E5["EXP: sanitizePrompt"]
        E6["EXP: readComplexityReport"]
        E7["EXP: findTaskInComplexityReport"]
        E8["EXP: taskExists"]
        E9["EXP: formatTaskId"]
        E10["EXP: findTaskById"]
        E11["EXP: truncate"]
        E12["EXP: isEmpty"]
        E13["EXP: findCycles"]
        E14["EXP: toKebabCase"]
        E15["EXP: detectCamelCaseFlags"]
        E16["EXP: disableSilentMode"]
        E17["EXP: enableSilentMode"]
        E18["EXP: getTaskManager"]
        E19["EXP: isSilentMode"]
        E20["EXP: addComplexityToTask"]
        E21["EXP: resolveEnvVariable"]
        E22["EXP: findProjectRoot"]
        E23["EXP: getTagAwareFilePath"]
        E24["EXP: slugifyTagForFilePath"]
        E25["EXP: aggregateTelemetry"]
        E26["EXP: getCurrentTag"]
        E27["EXP: resolveTag"]
        E28["EXP: getTasksForTag"]
        E29["EXP: setTasksForTag"]
        E30["EXP: performCompleteTagMigration"]
        E31["EXP: migrateConfigJson"]
        E32["EXP: createStateJson"]
        E33["EXP: markMigrationForNotice"]
        E34["EXP: flattenTasksWithSubtasks"]
        E35["EXP: ensureTagMetadata"]
        E36["EXP: normalizeTaskIds"]
    end
    subgraph Parameters["Parameters"]
        P1["PARAM: {string} key - The environment variable key."]
        P2["PARAM: {string} tagName - The tag name to slugify"]
        P3["PARAM: {string} basePath - The base file path (e.g., '.taskmaster/reports/task-complexity-report.json')"]
        P4["PARAM: {string|null} tag - The tag name (null, undefined, or 'master' uses base path)"]
        P5["PARAM: {string} level - The log level (debug, info, warn, error)"]
        P6["PARAM: {...any} args - Arguments to log"]
        P7["PARAM: {Object} data - The data object to check"]
        P8["PARAM: {Array} tasks - Array of tasks to normalize"]
        P9["PARAM: {string} filepath - Path to the JSON file"]
        P10["PARAM: {string} [projectRoot] - Optional project root for tag resolution (used by MCP)"]
        P11["PARAM: {string} [tag] - Optional tag to use instead of current tag resolution"]
        P12["PARAM: {string} tasksJsonPath - Path to the tasks.json file that was migrated"]
        P13["PARAM: {string} configPath - Path to the config.json file"]
        P14["PARAM: {string} statePath - Path where state.json should be created"]
        P15["PARAM: {string} tasksJsonPath - Path to the tasks.json file"]
        P16["PARAM: {string} filepath - Path to the JSON file"]
        P17["PARAM: {Object} data - Data to write (can be resolved tag data or raw tagged data)"]
        P18["PARAM: {string} projectRoot - Optional project root for tag context"]
        P19["PARAM: {string} tag - Optional tag for tag context"]
        P20["PARAM: {string} customPath - Optional custom path to the report"]
        P21["PARAM: {Object} report - The complexity report"]
        P22["PARAM: {number} taskId - The task ID to find"]
        P23["PARAM: {Array} tasks - The tasks array"]
        P24["PARAM: {string|number} taskId - The task ID to check"]
        P25["PARAM: {string|number} id - The task ID to format"]
        P26["PARAM: {Array} tasks - The tasks array"]
        P27["PARAM: {string|number} taskId - The task ID to find"]
        P28["PARAM: {Object|null} complexityReport - Optional pre-loaded complexity report"]
        P29["PARAM: {string} [statusFilter] - Optional status to filter subtasks by"]
        P30["PARAM: {string} text - The text to truncate"]
        P31["PARAM: {number} maxLength - The maximum length"]
        P32["PARAM: {*} value - The value to check"]
        P33["PARAM: {string} subtaskId - Current subtask ID"]
        P34["PARAM: {Map} dependencyMap - Map of subtask IDs to their dependencies"]
        P35["PARAM: {Set} visited - Set of visited nodes"]
        P36["PARAM: {Set} recursionStack - Set of nodes in current recursion stack"]
        P37["PARAM: {string} str - The string to convert"]
        P38["PARAM: {string[]} args - Command line arguments to check"]
        P39["PARAM: {Array<Object>} telemetryArray - Array of telemetryData objects."]
        P40["PARAM: {string} overallCommandName - The name for the aggregated command."]
        P41["PARAM: {string} projectRoot - The project root directory (required)"]
        P42["PARAM: {Object} options - Options object"]
        P43["PARAM: {string} options.projectRoot - The project root directory (required)"]
        P44["PARAM: {string} [options.tag] - Explicit tag to use"]
        P45["PARAM: {Object} data - The parsed tasks.json data (after migration)"]
        P46["PARAM: {string} tagName - The tag name to get tasks for"]
        P47["PARAM: {Object} data - The tasks.json data object"]
        P48["PARAM: {string} tagName - The tag name to set tasks for"]
        P49["PARAM: {Array} tasks - The tasks array to set"]
        P50["PARAM: {Array} tasks - Array of task objects"]
        P51["PARAM: {Object} tagObj - The tag object (e.g., data['master'])"]
        P52["PARAM: {Object} [opts] - Optional fields (e.g., description, skipUpdate)"]
        P53["PARAM: {string} [opts.description] - Description for the tag"]
        P54["PARAM: {boolean} [opts.skipUpdate] - If true, don't update the 'updated' timestamp"]
    end
    subgraph Constants["Const Declarations"]
        C1["CONST: envPath, VALUE: path.join(projectRoot, '.env')"]
        C2["CONST: envFileContent, VALUE: fs.readFileSync(envPath, 'utf-8')"]
        C3["CONST: parsedEnv, VALUE: dotenv.parse(envFileContent)"]
        C4["CONST: parsedPath, VALUE: path.parse(basePath)"]
        C5["CONST: slugifiedTag, VALUE: slugifyTagForFilePath(tag)"]
        C6["CONST: relativePath, VALUE: path.format(parsedPath)"]
        C7["CONST: rootPath, VALUE: path.parse(currentPath).root"]
        C8["CONST: hasMarker, VALUE: markers.some((marker) => {"]
        C9["CONST: markerPath, VALUE: path.join(currentPath, marker)"]
        C10["CONST: hasMarkerInRoot, VALUE: markers.some((marker) => {"]
        C11["CONST: markerPath, VALUE: path.join(rootPath, marker)"]
        C12["CONST: LOG_LEVELS, VALUE: {"]
        C13["CONST: prefixes, VALUE: {"]
        C14["CONST: currentLevel, VALUE: LOG_LEVELS.hasOwnProperty(level) ? level : 'info'"]
        C15["CONST: prefix, VALUE: prefixes[currentLevel] || ''"]
        C16["CONST: message, VALUE: args"]
        C17["CONST: parsedId, VALUE: parseInt(task.id, 10)"]
        C18["CONST: parts, VALUE: subtask.id.split('.')"]
        C19["CONST: parsedSubtaskId, VALUE: parseInt(subtask.id, 10)"]
        C20["CONST: migratedData, VALUE: {"]
        C21["CONST: originalTaggedData, VALUE: JSON.parse(JSON.stringify(data))"]
        C22["CONST: derivedProjectRoot, VALUE: findProjectRoot(path.dirname(filepath))"]
        C23["CONST: tagData, VALUE: data[resolvedTag]"]
        C24["CONST: result, VALUE: {"]
        C25["CONST: masterData, VALUE: data.master"]
        C26["CONST: masterData, VALUE: data.master"]
        C27["CONST: projectRoot, VALUE: findProjectRoot(path.dirname(tasksJsonPath)) ||"]
        C28["CONST: configPath, VALUE: path.join(projectRoot, '.taskmaster', 'config.json')"]
        C29["CONST: statePath, VALUE: path.join(projectRoot, '.taskmaster', 'state.json')"]
        C30["CONST: rawConfig, VALUE: fs.readFileSync(configPath, 'utf8')"]
        C31["CONST: config, VALUE: JSON.parse(rawConfig)"]
        C32["CONST: initialState, VALUE: {"]
        C33["CONST: projectRoot, VALUE: path.dirname(path.dirname(tasksJsonPath))"]
        C34["CONST: statePath, VALUE: path.join(projectRoot, '.taskmaster', 'state.json')"]
        C35["CONST: rawState, VALUE: fs.readFileSync(statePath, 'utf8')"]
        C36["CONST: stateData, VALUE: JSON.parse(rawState) || {}"]
        C37["CONST: isDebug, VALUE: process.env.TASKMASTER_DEBUG === 'true'"]
        C38["CONST: resolvedTag, VALUE: tag || getCurrentTag(projectRoot)"]
        C39["CONST: rawFullData, VALUE: JSON.parse(fs.readFileSync(filepath, 'utf8'))"]
        C40["CONST: resolvedTag, VALUE: tag || getCurrentTag(projectRoot)"]
        C41["CONST: originalTaggedData, VALUE: data._rawTaggedData"]
        C42["CONST: finalCleanData, VALUE: {}"]
        C43["CONST: newPath, VALUE: path.join(process.cwd(), COMPLEXITY_REPORT_FILE)"]
        C44["CONST: legacyPath, VALUE: path.join("]
        C45["CONST: reportData, VALUE: readJSON(reportPath)"]
        C46["CONST: taskAnalysis, VALUE: findTaskInComplexityReport(complexityReport, taskId)"]
        C47["CONST: parentTask, VALUE: tasks.find((t) => t.id === parentId)"]
        C48["CONST: id, VALUE: parseInt(taskId, 10)"]
        C49["CONST: parentTask, VALUE: tasks.find((t) => t.id === parentId)"]
        C50["CONST: subtask, VALUE: parentTask.subtasks.find((st) => st.id === subtaskId)"]
        C51["CONST: id, VALUE: parseInt(taskId, 10)"]
        C52["CONST: task, VALUE: tasks.find((t) => t.id === id) || null"]
        C53["CONST: filteredTask, VALUE: { ...task }"]
        C54["CONST: cyclesToBreak, VALUE: []"]
        C55["CONST: dependencies, VALUE: dependencyMap.get(subtaskId) || []"]
        C56["CONST: cycles, VALUE: findCycles(depId, dependencyMap, visited, recursionStack, ["]
        C57["CONST: cycleStartIndex, VALUE: path.indexOf(depId)"]
        C58["CONST: cycleEdges, VALUE: path.slice(cycleStartIndex)"]
        C59["CONST: toKebabCase, VALUE: (str) => {"]
        C60["CONST: withReplacedAcronyms, VALUE: str"]
        C61["CONST: camelCaseFlags, VALUE: []"]
        C62["CONST: flagName, VALUE: arg.split('=')[0].slice(2)"]
        C63["CONST: kebabVersion, VALUE: toKebabCase(flagName)"]
        C64["CONST: aggregated, VALUE: {"]
        C65["CONST: uniqueModels, VALUE: new Set()"]
        C66["CONST: uniqueProviders, VALUE: new Set()"]
        C67["CONST: uniqueCurrencies, VALUE: new Set()"]
        C68["CONST: statePath, VALUE: path.join(projectRoot, '.taskmaster', 'state.json')"]
        C69["CONST: rawState, VALUE: fs.readFileSync(statePath, 'utf8')"]
        C70["CONST: stateData, VALUE: JSON.parse(rawState)"]
        C71["CONST: configPath, VALUE: path.join(projectRoot, '.taskmaster', 'config.json')"]
        C72["CONST: rawConfig, VALUE: fs.readFileSync(configPath, 'utf8')"]
        C73["CONST: configData, VALUE: JSON.parse(rawConfig)"]
        C74["CONST: flattened, VALUE: []"]
        C75["CONST: now, VALUE: new Date().toISOString()"]
    end
    subgraph EnvironmentVariables["Environment Variables"]
        ENV1["ENV: TASKMASTER_DEBUG, USAGE: accessed via process.env"]
    end
    subgraph ExecutionFlow["Execution Flow"]
        FL1["Identify and load dependencies and modules"]
        FL2["Define functions and core logic for this module"]
        FL3["Expose public API via exports"]
    end
    subgraph FileName["utils.js"]
        Imports
        Dependencies
        FunctionsDefined
        Exports
        Parameters
        Constants
        EnvironmentVariables
        ExecutionFlow
    end
    FL1 --> FL2
    FL2 --> FL3
```