```mermaid
flowchart TB
    subgraph Imports["Imports"]
        I1["IMPORT: path, FROM: path"]
        I2["IMPORT: chalk, FROM: chalk"]
        I3["IMPORT: boxen, FROM: boxen"]
        I4["IMPORT: ./ui.js, FROM: /claude-task-master/scripts/modules/ui.js"]
        I5["IMPORT: ./task-manager.js, FROM: /claude-task-master/scripts/modules/task-manager.js"]
    end
    subgraph Dependencies["Dependencies"]
        D1["DEP: Path resolution"]
    end
    subgraph FunctionsDefined["Functions Defined"]
        FU1["FUNCTION: addDependency"]
        FU2["FUNCTION: removeDependency"]
        FU3["FUNCTION: isCircularDependency"]
        FU4["FUNCTION: validateTaskDependencies"]
        FU5["FUNCTION: removeDuplicateDependencies"]
        FU6["FUNCTION: cleanupSubtaskDependencies"]
        FU7["FUNCTION: validateDependenciesCommand"]
        FU8["FUNCTION: countAllDependencies"]
        FU9["FUNCTION: fixDependenciesCommand"]
        FU10["FUNCTION: ensureAtLeastOneIndependentSubtask"]
        FU11["FUNCTION: validateAndFixDependencies"]
    end
    subgraph Exports["Exports"]
        E1["EXP: addDependency"]
        E2["EXP: removeDependency"]
        E3["EXP: isCircularDependency"]
        E4["EXP: validateTaskDependencies"]
        E5["EXP: validateDependenciesCommand"]
        E6["EXP: fixDependenciesCommand"]
        E7["EXP: removeDuplicateDependencies"]
        E8["EXP: cleanupSubtaskDependencies"]
        E9["EXP: ensureAtLeastOneIndependentSubtask"]
        E10["EXP: validateAndFixDependencies"]
    end
    subgraph Parameters["Parameters"]
        P1["PARAM: {string} tasksPath - Path to the tasks.json file"]
        P2["PARAM: {number|string} taskId - ID of the task to add dependency to"]
        P3["PARAM: {number|string} dependencyId - ID of the task to add as dependency"]
        P4["PARAM: {Object} context - Context object containing projectRoot and tag information"]
        P5["PARAM: {string} [context.projectRoot] - Project root path"]
        P6["PARAM: {string} [context.tag] - Tag for the task"]
        P7["PARAM: {string} tasksPath - Path to the tasks.json file"]
        P8["PARAM: {number|string} taskId - ID of the task to remove dependency from"]
        P9["PARAM: {number|string} dependencyId - ID of the task to remove as dependency"]
        P10["PARAM: {Object} context - Context object containing projectRoot and tag information"]
        P11["PARAM: {string} [context.projectRoot] - Project root path"]
        P12["PARAM: {string} [context.tag] - Tag for the task"]
        P13["PARAM: {Array} tasks - Array of all tasks"]
        P14["PARAM: {number|string} taskId - ID of task to check"]
        P15["PARAM: {Array} chain - Chain of dependencies to check"]
        P16["PARAM: {Array} tasks - Array of all tasks"]
        P17["PARAM: {Object} tasksData - Tasks data object with tasks array"]
        P18["PARAM: {Object} tasksData - Tasks data object with tasks array"]
        P19["PARAM: {string} tasksPath - Path to tasks.json"]
        P20["PARAM: {Object} options - Options object, including context"]
        P21["PARAM: {Array} tasks - All tasks"]
        P22["PARAM: {string} tasksPath - Path to tasks.json"]
        P23["PARAM: {Object} options - Options object, including context"]
        P24["PARAM: {Object} tasksData - The tasks data object with tasks array"]
        P25["PARAM: {Object} tasksData - The tasks data object with tasks array"]
        P26["PARAM: {string} tasksPath - Optional path to save the changes"]
        P27["PARAM: {string} projectRoot - Optional project root for tag context"]
        P28["PARAM: {string} tag - Optional tag for tag context"]
    end
    subgraph Constants["Const Declarations"]
        C1["CONST: data, VALUE: readJSON(tasksPath, context.projectRoot, context.tag)"]
        C2["CONST: formattedTaskId, VALUE: typeof taskId === 'string' && taskId.includes('.')"]
        C3["CONST: formattedDependencyId, VALUE: formatTaskId(dependencyId)"]
        C4["CONST: parentTask, VALUE: data.tasks.find((t) => t.id === parentId)"]
        C5["CONST: dependencyChain, VALUE: [formattedTaskId]"]
        C6["CONST: data, VALUE: readJSON(tasksPath, context.projectRoot, context.tag)"]
        C7["CONST: formattedTaskId, VALUE: typeof taskId === 'string' && taskId.includes('.')"]
        C8["CONST: formattedDependencyId, VALUE: formatTaskId(dependencyId)"]
        C9["CONST: parentTask, VALUE: data.tasks.find((t) => t.id === parentId)"]
        C10["CONST: normalizedDependencyId, VALUE: String(formattedDependencyId)"]
        C11["CONST: dependencyIndex, VALUE: targetTask.dependencies.findIndex((dep) => {"]
        C12["CONST: taskIdStr, VALUE: String(taskId)"]
        C13["CONST: parentTask, VALUE: tasks.find((t) => t.id === parentId)"]
        C14["CONST: newChain, VALUE: [...chain, taskIdStr]"]
        C15["CONST: issues, VALUE: []"]
        C16["CONST: fullSubtaskId, VALUE: `${task.id}.${subtask.id}`"]
        C17["CONST: tasks, VALUE: tasksData.tasks.map((task) => {"]
        C18["CONST: uniqueDeps, VALUE: [...new Set(task.dependencies)]"]
        C19["CONST: tasks, VALUE: tasksData.tasks.map((task) => {"]
        C20["CONST: data, VALUE: readJSON(tasksPath, context.projectRoot, context.tag)"]
        C21["CONST: taskCount, VALUE: data.tasks.length"]
        C22["CONST: validationResult, VALUE: validateTaskDependencies(data.tasks)"]
        C23["CONST: data, VALUE: readJSON(tasksPath, context.projectRoot, context.tag)"]
        C24["CONST: originalData, VALUE: JSON.parse(JSON.stringify(data))"]
        C25["CONST: stats, VALUE: {"]
        C26["CONST: uniqueDeps, VALUE: new Set()"]
        C27["CONST: originalLength, VALUE: task.dependencies.length"]
        C28["CONST: depIdStr, VALUE: String(depId)"]
        C29["CONST: uniqueDeps, VALUE: new Set()"]
        C30["CONST: originalLength, VALUE: subtask.dependencies.length"]
        C31["CONST: validTaskIds, VALUE: new Set(data.tasks.map((t) => t.id))"]
        C32["CONST: validSubtaskIds, VALUE: new Set()"]
        C33["CONST: originalLength, VALUE: task.dependencies.length"]
        C34["CONST: isSubtask, VALUE: typeof depId === 'string' && depId.includes('.')"]
        C35["CONST: numericId, VALUE: typeof depId === 'string' ? parseInt(depId, 10) : depId"]
        C36["CONST: originalLength, VALUE: subtask.dependencies.length"]
        C37["CONST: subtaskId, VALUE: `${task.id}.${subtask.id}`"]
        C38["CONST: hasSelfDependency, VALUE: subtask.dependencies.some((depId) => {"]
        C39["CONST: normalizedDepId, VALUE: typeof depId === 'number' && depId < 100"]
        C40["CONST: numericId, VALUE: typeof depId === 'number' ? depId : parseInt(depId, 10)"]
        C41["CONST: fullSubtaskId, VALUE: `${task.id}.${numericId}`"]
        C42["CONST: subtaskDependencyMap, VALUE: new Map()"]
        C43["CONST: subtaskId, VALUE: `${task.id}.${subtask.id}`"]
        C44["CONST: normalizedDeps, VALUE: subtask.dependencies.map((depId) => {"]
        C45["CONST: visited, VALUE: new Set()"]
        C46["CONST: recursionStack, VALUE: new Set()"]
        C47["CONST: cycleEdges, VALUE: findCycles("]
        C48["CONST: task, VALUE: data.tasks.find((t) => t.id === taskId)"]
        C49["CONST: subtask, VALUE: task.subtasks.find((st) => st.id === subtaskNum)"]
        C50["CONST: originalLength, VALUE: subtask.dependencies.length"]
        C51["CONST: edgesToRemove, VALUE: cycleEdges.map((edge) => {"]
        C52["CONST: normalizedDepId, VALUE: typeof depId === 'number' && depId < 100"]
        C53["CONST: dataChanged, VALUE: JSON.stringify(data) !== JSON.stringify(originalData)"]
        C54["CONST: totalFixedAll, VALUE: stats.nonExistentDependenciesRemoved +"]
        C55["CONST: hasIndependentSubtask, VALUE: task.subtasks.some("]
        C56["CONST: firstSubtask, VALUE: task.subtasks[0]"]
        C57["CONST: originalData, VALUE: JSON.parse(JSON.stringify(tasksData))"]
        C58["CONST: uniqueDeps, VALUE: [...new Set(task.dependencies)]"]
        C59["CONST: uniqueDeps, VALUE: [...new Set(subtask.dependencies)]"]
        C60["CONST: fullSubtaskId, VALUE: `${task.id}.${depId}`"]
        C61["CONST: hasIndependentSubtask, VALUE: task.subtasks.some("]
        C62["CONST: changesDetected, VALUE: JSON.stringify(tasksData) !== JSON.stringify(originalData)"]
    end
    subgraph ExecutionFlow["Execution Flow"]
        FL1["Identify and load dependencies and modules"]
        FL2["Define functions and core logic for this module"]
        FL3["Expose public API via exports"]
    end
    subgraph FileName["dependency-manager.js"]
        Imports
        Dependencies
        FunctionsDefined
        Exports
        Parameters
        Constants
        ExecutionFlow
    end
    FL1 --> FL2
    FL2 --> FL3
```