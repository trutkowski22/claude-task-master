```mermaid
flowchart TB
    %% SHARED INFRASTRUCTURE SECTIONS
    subgraph SharedImports["Shared-Infrastructure-Imports"]
        I1["IMPORT: zod, FROM: zod"]
        I2["IMPORT: ../core/task-master-core.js, FROM: /claude-task-master/mcp-server/src/core/task-master-core.js"]
        I3["IMPORT: ../core/utils/path-utils.js, FROM: /claude-task-master/mcp-server/src/core/utils/path-utils.js"]
        I4["IMPORT: ../../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        I5["IMPORT: path, FROM: path"]
        I6["IMPORT: fs, FROM: fs"]
        I7["IMPORT: ../../../src/constants/paths.js, FROM: /claude-task-master/src/constants/paths.js"]
        I8["IMPORT: ../../../src/utils/path-utils.js, FROM: /claude-task-master/src/utils/path-utils.js"]
        I9["IMPORT: ./utils.js, FROM: /claude-task-master/mcp-server/src/tools/utils.js"]
        I10["IMPORT: ./get-tasks.js, FROM: /claude-task-master/mcp-server/src/tools/get-tasks.js"]
        I11["IMPORT: ../logger.js, FROM: /claude-task-master/mcp-server/src/logger.js"]
        I12["IMPORT: ./set-task-status.js, FROM: /claude-task-master/mcp-server/src/tools/set-task-status.js"]
        I13["IMPORT: ./parse-prd.js, FROM: /claude-task-master/mcp-server/src/tools/parse-prd.js"]
        I14["IMPORT: ./update.js, FROM: /claude-task-master/mcp-server/src/tools/update.js"]
        I15["IMPORT: ./update-task.js, FROM: /claude-task-master/mcp-server/src/tools/update-task.js"]
        I16["IMPORT: ./update-subtask.js, FROM: /claude-task-master/mcp-server/src/tools/update-subtask.js"]
        I17["IMPORT: ./generate.js, FROM: /claude-task-master/mcp-server/src/tools/generate.js"]
        I18["IMPORT: ./get-task.js, FROM: /claude-task-master/mcp-server/src/tools/get-task.js"]
        I19["IMPORT: ./next-task.js, FROM: /claude-task-master/mcp-server/src/tools/next-task.js"]
        I20["IMPORT: ./expand-task.js, FROM: /claude-task-master/mcp-server/src/tools/expand-task.js"]
        I21["IMPORT: ./add-task.js, FROM: /claude-task-master/mcp-server/src/tools/add-task.js"]
        I22["IMPORT: ./add-subtask.js, FROM: /claude-task-master/mcp-server/src/tools/add-subtask.js"]
        I23["IMPORT: ./remove-subtask.js, FROM: /claude-task-master/mcp-server/src/tools/remove-subtask.js"]
        I24["IMPORT: ./analyze.js, FROM: /claude-task-master/mcp-server/src/tools/analyze.js"]
        I25["IMPORT: ./clear-subtasks.js, FROM: /claude-task-master/mcp-server/src/tools/clear-subtasks.js"]
        I26["IMPORT: ./expand-all.js, FROM: /claude-task-master/mcp-server/src/tools/expand-all.js"]
        I27["IMPORT: ./remove-dependency.js, FROM: /claude-task-master/mcp-server/src/tools/remove-dependency.js"]
        I28["IMPORT: ./validate-dependencies.js, FROM: /claude-task-master/mcp-server/src/tools/validate-dependencies.js"]
        I29["IMPORT: ./fix-dependencies.js, FROM: /claude-task-master/mcp-server/src/tools/fix-dependencies.js"]
        I30["IMPORT: ./complexity-report.js, FROM: /claude-task-master/mcp-server/src/tools/complexity-report.js"]
        I31["IMPORT: ./add-dependency.js, FROM: /claude-task-master/mcp-server/src/tools/add-dependency.js"]
        I32["IMPORT: ./remove-task.js, FROM: /claude-task-master/mcp-server/src/tools/remove-task.js"]
        I33["IMPORT: ./initialize-project.js, FROM: /claude-task-master/mcp-server/src/tools/initialize-project.js"]
        I34["IMPORT: ./models.js, FROM: /claude-task-master/mcp-server/src/tools/models.js"]
        I35["IMPORT: ./move-task.js, FROM: /claude-task-master/mcp-server/src/tools/move-task.js"]
        I36["IMPORT: ./response-language.js, FROM: /claude-task-master/mcp-server/src/tools/response-language.js"]
        I37["IMPORT: ./add-tag.js, FROM: /claude-task-master/mcp-server/src/tools/add-tag.js"]
        I38["IMPORT: ./delete-tag.js, FROM: /claude-task-master/mcp-server/src/tools/delete-tag.js"]
        I39["IMPORT: ./list-tags.js, FROM: /claude-task-master/mcp-server/src/tools/list-tags.js"]
        I40["IMPORT: ./use-tag.js, FROM: /claude-task-master/mcp-server/src/tools/use-tag.js"]
        I41["IMPORT: ./rename-tag.js, FROM: /claude-task-master/mcp-server/src/tools/rename-tag.js"]
        I42["IMPORT: ./copy-tag.js, FROM: /claude-task-master/mcp-server/src/tools/copy-tag.js"]
        I43["IMPORT: ./research.js, FROM: /claude-task-master/mcp-server/src/tools/research.js"]
        I44["IMPORT: ./rules.js, FROM: /claude-task-master/mcp-server/src/tools/rules.js"]
        I45["IMPORT: ./scope-up.js, FROM: /claude-task-master/mcp-server/src/tools/scope-up.js"]
        I46["IMPORT: ./scope-down.js, FROM: /claude-task-master/mcp-server/src/tools/scope-down.js"]
        I47["IMPORT: ../../../src/constants/profiles.js, FROM: /claude-task-master/src/constants/profiles.js"]
        I48["IMPORT: ../core/direct-functions/response-language.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/response-language.js"]
        I49["IMPORT: ../core/direct-functions/rules.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/rules.js"]
        I50["IMPORT: ../../../src/constants/task-status.js, FROM: /claude-task-master/src/constants/task-status.js"]
        I51["IMPORT: child_process, FROM: child_process"]
        I52["IMPORT: ../core/context-manager.js, FROM: /claude-task-master/mcp-server/src/core/context-manager.js"]
        I53["IMPORT: url, FROM: url"]
        I54["IMPORT: commander, FROM: commander"]
        I55["IMPORT: chalk, FROM: chalk"]
        I56["IMPORT: boxen, FROM: boxen"]
        I57["IMPORT: https, FROM: https"]
        I58["IMPORT: http, FROM: http"]
        I59["IMPORT: inquirer, FROM: inquirer"]
        I60["IMPORT: @inquirer/search, FROM: @inquirer/search"]
        I61["IMPORT: ora, FROM: ora"]
        I62["IMPORT: ../../src/constants/providers.js, FROM: /claude-task-master/src/constants/providers.js"]
        I63["IMPORT: ../../src/task-master.js, FROM: /claude-task-master/src/task-master.js"]
        I64["IMPORT: ../init.js, FROM: /claude-task-master/scripts/init.js"]
        I65["IMPORT: ../../src/utils/getVersion.js, FROM: /claude-task-master/src/utils/getVersion.js"]
        I66["IMPORT: ./sync-readme.js, FROM: /claude-task-master/scripts/modules/sync-readme.js"]
        I67["IMPORT: ../../src/constants/profiles.js, FROM: /claude-task-master/src/constants/profiles.js"]
    end
    subgraph SharedDependencies["Shared-Infrastructure-Dependencies"]
        D1["DEP: Path resolution"]
        D2["DEP: File system"]
        D3["DEP: FastMCP"]
    end
    subgraph SharedParameters["Shared-Infrastructure-Parameters"]
        P1["PARAM: {Object} server - FastMCP server instance"]
        P2["PARAM: {FastMCP} server - FastMCP server instance."]
        P3["PARAM: {AsyncOperationManager} asyncManager - The async operation manager."]
        P4["PARAM: {Object} data - The data returned from showTaskDirect"]
        P5["PARAM: {string} projectRoot - The project root directory"]
        P6["PARAM: {Object} log - Logger object"]
        P7["PARAM: {string|undefined} projectRootRaw - Raw project root from arguments"]
        P8["PARAM: {Object} session - The MCP session object."]
        P9["PARAM: {Object} log - The MCP logger object."]
        P10["PARAM: {Object} result - Result object from API call with success, data, and error properties"]
        P11["PARAM: {string} errorPrefix - Prefix for error messages"]
        P12["PARAM: {Function} processFunction - Optional function to process successful result data"]
        P13["PARAM: {string} [projectRoot] - Optional project root for tag information"]
        P14["PARAM: {string} command - The command to execute (e.g., 'add-task')"]
        P15["PARAM: {Object} log - Logger instance"]
        P16["PARAM: {Array} args - Arguments for the command"]
        P17["PARAM: {string|undefined} projectRootRaw - Optional raw project root path (will be normalized internally)"]
        P18["PARAM: {Object|null} customEnv - Optional object containing environment variables to pass to the child process"]
        P19["PARAM: {Object} options - Configuration options."]
        P20["PARAM: {string} options.cacheKey - The unique key for caching this operation's result."]
        P21["PARAM: {Function} options.actionFn - The async function to execute if the cache misses."]
        P22["PARAM: {Object} options.log - The logger instance."]
        P23["PARAM: {Object|Array} taskOrData - A single task object or a data object containing a 'tasks' array."]
        P24["PARAM: {string[]} fieldsToRemove - An array of field names to remove."]
        P25["PARAM: {string|Object} content - Content to include in response"]
        P26["PARAM: {string} errorMessage - Error message to include in response"]
        P27["PARAM: {Object} [versionInfo] - Optional version information object"]
        P28["PARAM: {Object} [tagInfo] - Optional tag information object"]
        P29["PARAM: {Object} log - The MCP logger instance."]
        P30["PARAM: {string | undefined | null} rawPath - The raw project root path."]
        P31["PARAM: {object} [log] - Optional logger object."]
        P32["PARAM: {Function} executeFn - The original async execute(args, context) function."]
        P33["PARAM: {string|null} projectRoot - The resolved project root directory."]
        P34["PARAM: {Object} program - Commander program instance"]
        P35["PARAM: {string} v1 - First version"]
        P36["PARAM: {string} v2 - Second version"]
        P37["PARAM: {string} currentVersion - Current version"]
        P38["PARAM: {string} latestVersion - Latest version"]
        P39["PARAM: {Array} argv - Command-line arguments"]
        P40["PARAM: {string|undefined} outputOpt - -output value from CLI (may be undefined)"]
    end
    subgraph SharedConstants["Shared-Infrastructure-Constants"]
        C1["CONST: resolvedTag, VALUE: resolveTag({"]
        C2["CONST: result, VALUE: await addDependencyDirect("]
        C3["CONST: result, VALUE: await addSubtaskDirect("]
        C4["CONST: result, VALUE: await addTagDirect("]
        C5["CONST: result, VALUE: await addTaskDirect("]
        C6["CONST: toolName, VALUE: 'analyze_project_complexity'"]
        C7["CONST: outputPath, VALUE: resolveComplexityReportOutputPath("]
        C8["CONST: outputDir, VALUE: path.dirname(outputPath)"]
        C9["CONST: result, VALUE: await analyzeTaskComplexityDirect("]
        C10["CONST: result, VALUE: await clearSubtasksDirect("]
        C11["CONST: resolvedTag, VALUE: getCurrentTag(args.projectRoot)"]
        C12["CONST: pathArgs, VALUE: {"]
        C13["CONST: reportPath, VALUE: findComplexityReportPath(pathArgs, log)"]
        C14["CONST: result, VALUE: await complexityReportDirect("]
        C15["CONST: result, VALUE: await copyTagDirect("]
        C16["CONST: result, VALUE: await deleteTagDirect("]
        C17["CONST: result, VALUE: await expandAllTasksDirect("]
        C18["CONST: complexityReportPath, VALUE: findComplexityReportPath("]
        C19["CONST: result, VALUE: await expandTaskDirect("]
        C20["CONST: result, VALUE: await fixDependenciesDirect("]
        C21["CONST: outputDir, VALUE: args.output"]
        C22["CONST: result, VALUE: await generateTaskFilesDirect("]
        C23["CONST: status, VALUE: asyncManager.getStatus(operationId)"]
        C24["CONST: result, VALUE: await showTaskDirect("]
        C25["CONST: result, VALUE: await listTasksDirect("]
        C26["CONST: session, VALUE: context.session"]
        C27["CONST: result, VALUE: await initializeProjectDirect(args, log, { session })"]
        C28["CONST: errorMessage, VALUE: `Project initialization tool failed: ${error.message || 'Unknown error'}`"]
        C29["CONST: result, VALUE: await listTagsDirect("]
        C30["CONST: result, VALUE: await modelsDirect("]
        C31["CONST: fromIds, VALUE: args.from.split(',').map((id) => id.trim())"]
        C32["CONST: toIds, VALUE: args.to.split(',').map((id) => id.trim())"]
        C33["CONST: results, VALUE: []"]
        C34["CONST: fromId, VALUE: fromIds[i]"]
        C35["CONST: toId, VALUE: toIds[i]"]
        C36["CONST: shouldGenerateFiles, VALUE: i === fromIds.length - 1"]
        C37["CONST: result, VALUE: await moveTaskDirect("]
        C38["CONST: result, VALUE: await nextTaskDirect("]
        C39["CONST: result, VALUE: await parsePRDDirect("]
        C40["CONST: result, VALUE: await removeDependencyDirect("]
        C41["CONST: result, VALUE: await removeSubtaskDirect("]
        C42["CONST: result, VALUE: await removeTaskDirect("]
        C43["CONST: result, VALUE: await renameTagDirect("]
        C44["CONST: result, VALUE: await researchDirect("]
        C45["CONST: result, VALUE: await responseLanguageDirect("]
        C46["CONST: result, VALUE: await rulesDirect(args, log, { session })"]
        C47["CONST: result, VALUE: await scopeDownDirect("]
        C48["CONST: result, VALUE: await scopeUpDirect("]
        C49["CONST: result, VALUE: await setTaskStatusDirect("]
        C50["CONST: toolName, VALUE: 'update_subtask'"]
        C51["CONST: result, VALUE: await updateSubtaskByIdDirect("]
        C52["CONST: toolName, VALUE: 'update_task'"]
        C53["CONST: result, VALUE: await updateTaskByIdDirect("]
        C54["CONST: toolName, VALUE: 'update'"]
        C55["CONST: result, VALUE: await updateTasksDirect("]
        C56["CONST: result, VALUE: await useTagDirect("]
        C57["CONST: __filename, VALUE: fileURLToPath(import.meta.url)"]
        C58["CONST: packageJsonPath, VALUE: path.join("]
        C59["CONST: packageJson, VALUE: JSON.parse(fs.readFileSync(packageJsonPath, 'utf-8'))"]
        C60["CONST: currentTag, VALUE: getCurrentTag(projectRoot)"]
        C61["CONST: tasksJsonPath, VALUE: path.join("]
        C62["CONST: tasksData, VALUE: JSON.parse(fs.readFileSync(tasksJsonPath, 'utf-8'))"]
        C63["CONST: tagKeys, VALUE: Object.keys(tasksData).filter("]
        C64["CONST: envRoot, VALUE: process.env.TASK_MASTER_PROJECT_ROOT"]
        C65["CONST: absolutePath, VALUE: path.isAbsolute(envRoot)"]
        C66["CONST: absolutePath, VALUE: path.isAbsolute(projectRootRaw)"]
        C67["CONST: currentDir, VALUE: process.cwd()"]
        C68["CONST: markerPath, VALUE: path.join(currentDir, marker)"]
        C69["CONST: normalizedSlashes, VALUE: decodedPath.replace(/\\\\/g, '/')"]
        C70["CONST: cwd, VALUE: process.cwd()"]
        C71["CONST: serverPath, VALUE: process.argv[1]"]
        C72["CONST: mcpServerIndex, VALUE: serverPath.indexOf('mcp-server')"]
        C73["CONST: projectRoot, VALUE: path.dirname("]
        C74["CONST: versionInfo, VALUE: getVersionInfo()"]
        C75["CONST: tagInfo, VALUE: projectRoot ? getTagInfo(projectRoot, log) : null"]
        C76["CONST: errorMsg, VALUE: result.error?.message || `Unknown ${errorPrefix}`"]
        C77["CONST: processedData, VALUE: processFunction"]
        C78["CONST: responsePayload, VALUE: {"]
        C79["CONST: cwd, VALUE: getProjectRoot(projectRootRaw, log)"]
        C80["CONST: fullArgs, VALUE: [command, ...args]"]
        C81["CONST: spawnOptions, VALUE: {"]
        C82["CONST: errorOutput, VALUE: result.stderr"]
        C83["CONST: cachedResult, VALUE: contextManager.getCachedData(cacheKey)"]
        C84["CONST: result, VALUE: await actionFn()"]
        C85["CONST: processSingleTask, VALUE: (task) => {"]
        C86["CONST: processedTask, VALUE: { ...task }"]
        C87["CONST: processArrayOfTasks, VALUE: (tasks) => {"]
        C88["CONST: resolvedPath, VALUE: path.resolve(pathString)"]
        C89["CONST: envRoot, VALUE: session.env.TASK_MASTER_PROJECT_ROOT"]
        C90["CONST: sessionRoot, VALUE: getProjectRootFromSession(session, log)"]
        C91["CONST: updatedArgs, VALUE: { ...args, projectRoot: normalizedRoot }"]
        C92["CONST: result, VALUE: await validateDependenciesDirect("]
        C93["CONST: currentConfigResult, VALUE: await getModelConfiguration({ projectRoot })"]
        C94["CONST: currentModels, VALUE: currentConfigResult.success"]
        C95["CONST: options, VALUE: {"]
        C96["CONST: req, VALUE: https.request(options, (res) => {"]
        C97["CONST: parsedData, VALUE: JSON.parse(data)"]
        C98["CONST: url, VALUE: new URL(baseURL)"]
        C99["CONST: isHttps, VALUE: url.protocol === 'https:'"]
        C100["CONST: port, VALUE: url.port || (isHttps ? 443 : 80)"]
        C101["CONST: basePath, VALUE: url.pathname.endsWith('/')"]
        C102["CONST: requestLib, VALUE: isHttps ? https : http"]
        C103["CONST: req, VALUE: requestLib.request(options, (res) => {"]
        C104["CONST: getPromptData, VALUE: (role, allowNone = false) => {"]
        C105["CONST: currentModel, VALUE: currentModels[role]"]
        C106["CONST: allModelsRaw, VALUE: getAvailableModels()"]
        C107["CONST: modelsByProvider, VALUE: allModelsRaw.reduce((acc, model) => {"]
        C108["CONST: cancelOption, VALUE: { name: '⏹ Cancel Model Setup', value: '__CANCEL__' }"]
        C109["CONST: noChangeOption, VALUE: currentModel?.modelId"]
        C110["CONST: customProviderOptions, VALUE: ["]
        C111["CONST: roleChoices, VALUE: Object.entries(modelsByProvider)"]
        C112["CONST: providerModels, VALUE: models"]
        C113["CONST: systemOptions, VALUE: []"]
        C114["CONST: systemLength, VALUE: systemOptions.length"]
        C115["CONST: noneOptionIndex, VALUE: systemLength + 1"]
        C116["CONST: mainPromptData, VALUE: getPromptData('main')"]
        C117["CONST: researchPromptData, VALUE: getPromptData('research')"]
        C118["CONST: fallbackPromptData, VALUE: getPromptData('fallback', true)"]
        C119["CONST: createSearchSource, VALUE: (choices, defaultValue) => {"]
        C120["CONST: filteredChoices, VALUE: choices.filter((choice) => {"]
        C121["CONST: searchText, VALUE: choice.name || ''"]
        C122["CONST: answers, VALUE: {}"]
        C123["CONST: coreOptionsSetup, VALUE: { projectRoot }"]
        C124["CONST: openRouterModels, VALUE: await fetchOpenRouterModelsCLI()"]
        C125["CONST: ollamaBaseURL, VALUE: getBaseUrlForRole(role, projectRoot)"]
        C126["CONST: ollamaModels, VALUE: await fetchOllamaModelsCLI(ollamaBaseURL)"]
        C127["CONST: result, VALUE: await setModel(role, modelIdToSet, {"]
        C128["CONST: currentCfg, VALUE: getConfig(projectRoot)"]
        C129["CONST: commandName, VALUE: this._name || 'unknown'"]
        C130["CONST: initOptions, VALUE: {"]
        C131["CONST: numTasks, VALUE: parseInt(options.numTasks, 10)"]
        C132["CONST: force, VALUE: options.force || false"]
        C133["CONST: append, VALUE: options.append || false"]
        C134["CONST: research, VALUE: options.research || false"]
        C135["CONST: useAppend, VALUE: append"]
        C136["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
        C137["CONST: tasksPath, VALUE: taskMaster.getTasksPath()"]
        C138["CONST: existingFileContent, VALUE: fs.readFileSync(tasksPath, 'utf8')"]
        C139["CONST: allData, VALUE: JSON.parse(existingFileContent)"]
        C140["CONST: overwrite, VALUE: await confirmTaskOverwrite(tasksPath)"]
        C141["CONST: outputPath, VALUE: taskMaster.getTasksPath() ||"]
        C142["CONST: taskMaster, VALUE: initTaskMaster({"]
        C143["CONST: fromId, VALUE: parseInt(options.from, 10)"]
        C144["CONST: prompt, VALUE: options.prompt"]
        C145["CONST: useResearch, VALUE: options.research || false"]
        C146["CONST: taskId, VALUE: parseInt(options.id, 10)"]
        C147["CONST: result, VALUE: await updateTaskById("]
        C148["CONST: subtaskId, VALUE: options.id"]
        C149["CONST: result, VALUE: await updateSubtaskById("]
        C150["CONST: taskIds, VALUE: options.id.split(',').map((id) => {"]
        C151["CONST: parsed, VALUE: parseInt(id.trim(), 10)"]
        C152["CONST: context, VALUE: {"]
        C153["CONST: result, VALUE: await scopeUpTask("]
        C154["CONST: result, VALUE: await scopeDownTask("]
        C155["CONST: outputDir, VALUE: options.output"]
        C156["CONST: taskId, VALUE: options.id"]
        C157["CONST: status, VALUE: options.status"]
        C158["CONST: taskMaster, VALUE: initTaskMaster(initOptions)"]
        C159["CONST: statusFilter, VALUE: options.status"]
        C160["CONST: withSubtasks, VALUE: options.withSubtasks || false"]
        C161["CONST: result, VALUE: await expandAllTasks("]
        C162["CONST: modelOverride, VALUE: options.model"]
        C163["CONST: thresholdScore, VALUE: parseFloat(options.threshold)"]
        C164["CONST: targetTag, VALUE: taskMaster.getCurrentTag()"]
        C165["CONST: outputPath, VALUE: taskMaster.getComplexityReportPath()"]
        C166["CONST: fromStr, VALUE: options.from ? options.from : 'first'"]
        C167["CONST: toStr, VALUE: options.to ? options.to : 'last'"]
        C168["CONST: updatedOptions, VALUE: {"]
        C169["CONST: validDetailLevels, VALUE: ['low', 'medium', 'high']"]
        C170["CONST: trimmedId, VALUE: id.trim()"]
        C171["CONST: trimmedPath, VALUE: filePath.trim()"]
        C172["CONST: saveToId, VALUE: options.saveTo.trim()"]
        C173["CONST: saveTarget, VALUE: options.save.trim()"]
        C174["CONST: tasksData, VALUE: readJSON("]
        C175["CONST: fullPath, VALUE: path.isAbsolute(filePath)"]
        C176["CONST: validatedParams, VALUE: {"]
        C177["CONST: researchOptions, VALUE: {"]
        C178["CONST: result, VALUE: await performResearch("]
        C179["CONST: isSubtask, VALUE: validatedParams.saveToId.includes('.')"]
        C180["CONST: researchContent, VALUE: `## Research Query: ${validatedParams.prompt}"]
        C181["CONST: updateTaskById, VALUE: ("]
        C182["CONST: taskIdNum, VALUE: parseInt(validatedParams.saveToId, 10)"]
        C183["CONST: saveContent, VALUE: `# Research Query: ${validatedParams.prompt}"]
        C184["CONST: taskIds, VALUE: options.id"]
        C185["CONST: all, VALUE: options.all"]
        C186["CONST: data, VALUE: readJSON("]
        C187["CONST: allIds, VALUE: data.tasks.map((t) => t.id).join(',')"]
        C188["CONST: isManualCreation, VALUE: options.title && options.description"]
        C189["CONST: tasksPath, VALUE: options.file || TASKMASTER_TASKS_FILE"]
        C190["CONST: projectRoot, VALUE: taskMaster.getProjectRoot()"]
        C191["CONST: dependenciesArray, VALUE: options.dependencies"]
        C192["CONST: idArg, VALUE: taskId || options.id"]
        C193["CONST: taskIds, VALUE: idArg"]
        C194["CONST: dependencyId, VALUE: options.dependsOn"]
        C195["CONST: formattedTaskId, VALUE: taskId.includes('.')"]
        C196["CONST: formattedDependencyId, VALUE: dependencyId.includes('.')"]
        C197["CONST: parentId, VALUE: options.parent"]
        C198["CONST: existingTaskId, VALUE: options.taskId"]
        C199["CONST: generateFiles, VALUE: options.generate || false"]
        C200["CONST: newSubtaskData, VALUE: {"]
        C201["CONST: subtask, VALUE: await addSubtask("]
        C202["CONST: subtaskIds, VALUE: options.id"]
        C203["CONST: convertToTask, VALUE: options.convert || false"]
        C204["CONST: subtaskIdArray, VALUE: subtaskIds.split(',').map((id) => id.trim())"]
        C205["CONST: result, VALUE: await removeSubtask("]
        C206["CONST: taskIdsString, VALUE: options.id"]
        C207["CONST: taskIdsToRemove, VALUE: taskIdsString"]
        C208["CONST: existingTasksToRemove, VALUE: []"]
        C209["CONST: nonExistentIds, VALUE: []"]
        C210["CONST: dependentTaskMessages, VALUE: []"]
        C211["CONST: findResult, VALUE: findTaskById(data.tasks, taskId)"]
        C212["CONST: taskObject, VALUE: findResult.task"]
        C213["CONST: dependentTasks, VALUE: data.tasks.filter("]
        C214["CONST: indicator, VALUE: startLoadingIndicator("]
        C215["CONST: existingIdsString, VALUE: existingTasksToRemove"]
        C216["CONST: result, VALUE: await removeTask("]
        C217["CONST: userSpecifiedProfiles, VALUE: cmdOptions.rules"]
        C218["CONST: providerFlags, VALUE: ["]
        C219["CONST: isSetup, VALUE: options.setup"]
        C220["CONST: isSetOperation, VALUE: options.setMain || options.setResearch || options.setFallback"]
        C221["CONST: result, VALUE: await setModel('main', options.setMain, {"]
        C222["CONST: result, VALUE: await setModel('research', options.setResearch, {"]
        C223["CONST: result, VALUE: await setModel('fallback', options.setFallback, {"]
        C224["CONST: configResult, VALUE: await getModelConfiguration({ projectRoot })"]
        C225["CONST: availableResult, VALUE: await getAvailableModelsList({ projectRoot })"]
        C226["CONST: apiKeyStatusResult, VALUE: await getApiKeyStatusReport({ projectRoot })"]
        C227["CONST: activeIds, VALUE: configResult.success"]
        C228["CONST: displayableAvailable, VALUE: availableResult.data.models.filter("]
        C229["CONST: configExists, VALUE: isConfigFilePresent(projectRoot)"]
        C230["CONST: taskMaster, VALUE: initTaskMaster({})"]
        C231["CONST: userResponse, VALUE: await inquirer.prompt(["]
        C232["CONST: result, VALUE: setResponseLanguage(responseLanguage, {"]
        C233["CONST: sourceId, VALUE: options.from"]
        C234["CONST: destinationId, VALUE: options.to"]
        C235["CONST: sourceIds, VALUE: sourceId.split(',').map((id) => id.trim())"]
        C236["CONST: destinationIds, VALUE: destinationId.split(',').map((id) => id.trim())"]
        C237["CONST: fromId, VALUE: sourceIds[i]"]
        C238["CONST: toId, VALUE: destinationIds[i]"]
        C239["CONST: result, VALUE: await moveTask("]
        C240["CONST: selectedRuleProfiles, VALUE: await runInteractiveProfilesSetup()"]
        C241["CONST: profile, VALUE: selectedRuleProfiles[i]"]
        C242["CONST: profileConfig, VALUE: getRulesProfile(profile)"]
        C243["CONST: addResult, VALUE: convertAllRulesToProfileRules("]
        C244["CONST: expandedProfiles, VALUE: profiles"]
        C245["CONST: installedProfiles, VALUE: getInstalledProfiles(projectRoot)"]
        C246["CONST: removalResults, VALUE: []"]
        C247["CONST: addResults, VALUE: []"]
        C248["CONST: result, VALUE: removeProfileRules(projectRoot, profileConfig)"]
        C249["CONST: totalProcessed, VALUE: removalResults.length"]
        C250["CONST: totalSuccessful, VALUE: successfulRemovals.length"]
        C251["CONST: totalSkipped, VALUE: skippedRemovals.length"]
        C252["CONST: totalFailed, VALUE: failedRemovals.length"]
        C253["CONST: status, VALUE: options.status || null"]
        C254["CONST: success, VALUE: await syncTasksToReadme(taskMaster.getProjectRoot(), {"]
        C255["CONST: gitUtils, VALUE: await import('./utils/git-utils.js')"]
        C256["CONST: currentBranch, VALUE: await gitUtils.getCurrentBranch(projectRoot)"]
        C257["CONST: branchOptions, VALUE: {"]
        C258["CONST: createOptions, VALUE: {"]
        C259["CONST: finalTagName, VALUE: options.fromBranch"]
        C260["CONST: deleteOptions, VALUE: {"]
        C261["CONST: listOptions, VALUE: {"]
        C262["CONST: copyOptions, VALUE: {"]
        C263["CONST: programInstance, VALUE: program"]
        C264["CONST: packageJsonPath, VALUE: path.join(process.cwd(), 'package.json')"]
        C265["CONST: packageJson, VALUE: JSON.parse("]
        C266["CONST: originalHelpInformation, VALUE: programInstance.helpInformation.bind(programInstance)"]
        C267["CONST: currentVersion, VALUE: getTaskMasterVersion()"]
        C268["CONST: npmData, VALUE: JSON.parse(data)"]
        C269["CONST: latestVersion, VALUE: npmData['dist-tags']?.latest || currentVersion"]
        C270["CONST: needsUpdate, VALUE: compareVersions(currentVersion, latestVersion) < 0"]
        C271["CONST: v1Parts, VALUE: v1.split('.').map((p) => parseInt(p, 10))"]
        C272["CONST: v2Parts, VALUE: v2.split('.').map((p) => parseInt(p, 10))"]
        C273["CONST: v1Part, VALUE: v1Parts[i] || 0"]
        C274["CONST: v2Part, VALUE: v2Parts[i] || 0"]
        C275["CONST: message, VALUE: boxen("]
        C276["CONST: updateCheckPromise, VALUE: checkForUpdate()"]
        C277["CONST: programInstance, VALUE: setupCLI()"]
        C278["CONST: updateInfo, VALUE: await updateCheckPromise"]
        C279["CONST: statePath, VALUE: taskMaster.getStatePath()"]
        C280["CONST: rawData, VALUE: fs.readFileSync(tasksPath, 'utf8')"]
        C281["CONST: parsedData, VALUE: JSON.parse(rawData)"]
        C282["CONST: rawStateData, VALUE: fs.readFileSync(statePath, 'utf8')"]
        C283["CONST: base, VALUE: path.join(projectRoot, COMPLEXITY_REPORT_FILE)"]
    end
    subgraph file1["mcp-server/src/tools/add-dependency.js"]
        subgraph file1Imports["add-dependency.js-Imports"]
            I1["IMPORT: zod, FROM: zod"]
            I2["IMPORT: ../core/task-master-core.js, FROM: /claude-task-master/mcp-server/src/core/task-master-core.js"]
            I3["IMPORT: ../core/utils/path-utils.js, FROM: /claude-task-master/mcp-server/src/core/utils/path-utils.js"]
            I4["IMPORT: ../../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        end
        subgraph file1Functions["add-dependency.js-Functions Defined"]
            FU1["FUNCTION: registerAddDependencyTool"]
        end
        subgraph file1Exports["add-dependency.js-Exports"]
            E1["EXP: registerAddDependencyTool"]
        end
        subgraph file1Constants["add-dependency.js-Const Declarations"]
            C1["CONST: resolvedTag, VALUE: resolveTag({"]
            C2["CONST: result, VALUE: await addDependencyDirect("]
        end
        subgraph file1Flow["add-dependency.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file2["mcp-server/src/tools/add-subtask.js"]
        subgraph file2Imports["add-subtask.js-Imports"]
            I1["IMPORT: zod, FROM: zod"]
            I2["IMPORT: ../core/task-master-core.js, FROM: /claude-task-master/mcp-server/src/core/task-master-core.js"]
            I3["IMPORT: ../core/utils/path-utils.js, FROM: /claude-task-master/mcp-server/src/core/utils/path-utils.js"]
            I4["IMPORT: ../../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        end
        subgraph file2Functions["add-subtask.js-Functions Defined"]
            FU1["FUNCTION: registerAddSubtaskTool"]
        end
        subgraph file2Exports["add-subtask.js-Exports"]
            E1["EXP: registerAddSubtaskTool"]
        end
        subgraph file2Constants["add-subtask.js-Const Declarations"]
            C1["CONST: resolvedTag, VALUE: resolveTag({"]
            C2["CONST: result, VALUE: await addSubtaskDirect("]
        end
        subgraph file2Flow["add-subtask.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file3["mcp-server/src/tools/add-tag.js"]
        subgraph file3Imports["add-tag.js-Imports"]
            I1["IMPORT: zod, FROM: zod"]
            I2["IMPORT: ../core/task-master-core.js, FROM: /claude-task-master/mcp-server/src/core/task-master-core.js"]
            I3["IMPORT: ../core/utils/path-utils.js, FROM: /claude-task-master/mcp-server/src/core/utils/path-utils.js"]
        end
        subgraph file3Functions["add-tag.js-Functions Defined"]
            FU1["FUNCTION: registerAddTagTool"]
        end
        subgraph file3Exports["add-tag.js-Exports"]
            E1["EXP: registerAddTagTool"]
        end
        subgraph file3Constants["add-tag.js-Const Declarations"]
            C1["CONST: result, VALUE: await addTagDirect("]
        end
        subgraph file3Flow["add-tag.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file4["mcp-server/src/tools/add-task.js"]
        subgraph file4Imports["add-task.js-Imports"]
            I1["IMPORT: zod, FROM: zod"]
            I2["IMPORT: ../core/task-master-core.js, FROM: /claude-task-master/mcp-server/src/core/task-master-core.js"]
            I3["IMPORT: ../core/utils/path-utils.js, FROM: /claude-task-master/mcp-server/src/core/utils/path-utils.js"]
            I4["IMPORT: ../../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        end
        subgraph file4Functions["add-task.js-Functions Defined"]
            FU1["FUNCTION: registerAddTaskTool"]
        end
        subgraph file4Exports["add-task.js-Exports"]
            E1["EXP: registerAddTaskTool"]
        end
        subgraph file4Constants["add-task.js-Const Declarations"]
            C1["CONST: resolvedTag, VALUE: resolveTag({"]
            C2["CONST: result, VALUE: await addTaskDirect("]
        end
        subgraph file4Flow["add-task.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file5["mcp-server/src/tools/analyze.js"]
        subgraph file5Imports["analyze.js-Imports"]
            I1["IMPORT: zod, FROM: zod"]
            I2["IMPORT: path, FROM: path"]
            I3["IMPORT: fs, FROM: fs"]
            I4["IMPORT: ../core/task-master-core.js, FROM: /claude-task-master/mcp-server/src/core/task-master-core.js"]
            I5["IMPORT: ../core/utils/path-utils.js, FROM: /claude-task-master/mcp-server/src/core/utils/path-utils.js"]
            I6["IMPORT: ../../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
            I7["IMPORT: ../../../src/constants/paths.js, FROM: /claude-task-master/src/constants/paths.js"]
            I8["IMPORT: ../../../src/utils/path-utils.js, FROM: /claude-task-master/src/utils/path-utils.js"]
        end
        subgraph file5Functions["analyze.js-Functions Defined"]
            FU1["FUNCTION: registerAnalyzeProjectComplexityTool"]
        end
        subgraph file5Exports["analyze.js-Exports"]
            E1["EXP: registerAnalyzeProjectComplexityTool"]
        end
        subgraph file5Constants["analyze.js-Const Declarations"]
            C1["CONST: toolName, VALUE: 'analyze_project_complexity'"]
            C2["CONST: resolvedTag, VALUE: resolveTag({"]
            C3["CONST: outputPath, VALUE: resolveComplexityReportOutputPath("]
            C4["CONST: outputDir, VALUE: path.dirname(outputPath)"]
            C5["CONST: result, VALUE: await analyzeTaskComplexityDirect("]
        end
        subgraph file5Flow["analyze.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file6["mcp-server/src/tools/clear-subtasks.js"]
        subgraph file6Imports["clear-subtasks.js-Imports"]
            I1["IMPORT: zod, FROM: zod"]
            I2["IMPORT: ../core/task-master-core.js, FROM: /claude-task-master/mcp-server/src/core/task-master-core.js"]
            I3["IMPORT: ../core/utils/path-utils.js, FROM: /claude-task-master/mcp-server/src/core/utils/path-utils.js"]
            I4["IMPORT: ../../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        end
        subgraph file6Functions["clear-subtasks.js-Functions Defined"]
            FU1["FUNCTION: registerClearSubtasksTool"]
        end
        subgraph file6Exports["clear-subtasks.js-Exports"]
            E1["EXP: registerClearSubtasksTool"]
        end
        subgraph file6Constants["clear-subtasks.js-Const Declarations"]
            C1["CONST: resolvedTag, VALUE: resolveTag({"]
            C2["CONST: result, VALUE: await clearSubtasksDirect("]
        end
        subgraph file6Flow["clear-subtasks.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file7["mcp-server/src/tools/complexity-report.js"]
        subgraph file7Imports["complexity-report.js-Imports"]
            I1["IMPORT: zod, FROM: zod"]
            I2["IMPORT: ../core/task-master-core.js, FROM: /claude-task-master/mcp-server/src/core/task-master-core.js"]
            I3["IMPORT: ../../../src/constants/paths.js, FROM: /claude-task-master/src/constants/paths.js"]
            I4["IMPORT: ../core/utils/path-utils.js, FROM: /claude-task-master/mcp-server/src/core/utils/path-utils.js"]
            I5["IMPORT: ../../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        end
        subgraph file7Functions["complexity-report.js-Functions Defined"]
            FU1["FUNCTION: registerComplexityReportTool"]
        end
        subgraph file7Exports["complexity-report.js-Exports"]
            E1["EXP: registerComplexityReportTool"]
        end
        subgraph file7Constants["complexity-report.js-Const Declarations"]
            C1["CONST: resolvedTag, VALUE: getCurrentTag(args.projectRoot)"]
            C2["CONST: pathArgs, VALUE: {"]
            C3["CONST: reportPath, VALUE: findComplexityReportPath(pathArgs, log)"]
            C4["CONST: result, VALUE: await complexityReportDirect("]
        end
        subgraph file7Flow["complexity-report.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file8["mcp-server/src/tools/copy-tag.js"]
        subgraph file8Imports["copy-tag.js-Imports"]
            I1["IMPORT: zod, FROM: zod"]
            I2["IMPORT: ../core/task-master-core.js, FROM: /claude-task-master/mcp-server/src/core/task-master-core.js"]
            I3["IMPORT: ../core/utils/path-utils.js, FROM: /claude-task-master/mcp-server/src/core/utils/path-utils.js"]
        end
        subgraph file8Functions["copy-tag.js-Functions Defined"]
            FU1["FUNCTION: registerCopyTagTool"]
        end
        subgraph file8Exports["copy-tag.js-Exports"]
            E1["EXP: registerCopyTagTool"]
        end
        subgraph file8Constants["copy-tag.js-Const Declarations"]
            C1["CONST: result, VALUE: await copyTagDirect("]
        end
        subgraph file8Flow["copy-tag.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file9["mcp-server/src/tools/delete-tag.js"]
        subgraph file9Imports["delete-tag.js-Imports"]
            I1["IMPORT: zod, FROM: zod"]
            I2["IMPORT: ../core/task-master-core.js, FROM: /claude-task-master/mcp-server/src/core/task-master-core.js"]
            I3["IMPORT: ../core/utils/path-utils.js, FROM: /claude-task-master/mcp-server/src/core/utils/path-utils.js"]
        end
        subgraph file9Functions["delete-tag.js-Functions Defined"]
            FU1["FUNCTION: registerDeleteTagTool"]
        end
        subgraph file9Exports["delete-tag.js-Exports"]
            E1["EXP: registerDeleteTagTool"]
        end
        subgraph file9Constants["delete-tag.js-Const Declarations"]
            C1["CONST: result, VALUE: await deleteTagDirect("]
        end
        subgraph file9Flow["delete-tag.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file10["mcp-server/src/tools/expand-all.js"]
        subgraph file10Imports["expand-all.js-Imports"]
            I1["IMPORT: zod, FROM: zod"]
            I2["IMPORT: ../core/task-master-core.js, FROM: /claude-task-master/mcp-server/src/core/task-master-core.js"]
            I3["IMPORT: ../core/utils/path-utils.js, FROM: /claude-task-master/mcp-server/src/core/utils/path-utils.js"]
            I4["IMPORT: ../../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        end
        subgraph file10Functions["expand-all.js-Functions Defined"]
            FU1["FUNCTION: registerExpandAllTool"]
        end
        subgraph file10Exports["expand-all.js-Exports"]
            E1["EXP: registerExpandAllTool"]
        end
        subgraph file10Constants["expand-all.js-Const Declarations"]
            C1["CONST: resolvedTag, VALUE: resolveTag({"]
            C2["CONST: result, VALUE: await expandAllTasksDirect("]
        end
        subgraph file10Flow["expand-all.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file11["mcp-server/src/tools/expand-task.js"]
        subgraph file11Imports["expand-task.js-Imports"]
            I1["IMPORT: zod, FROM: zod"]
            I2["IMPORT: ../core/task-master-core.js, FROM: /claude-task-master/mcp-server/src/core/task-master-core.js"]
            I3["IMPORT: ../../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        end
        subgraph file11Functions["expand-task.js-Functions Defined"]
            FU1["FUNCTION: registerExpandTaskTool"]
        end
        subgraph file11Exports["expand-task.js-Exports"]
            E1["EXP: registerExpandTaskTool"]
        end
        subgraph file11Constants["expand-task.js-Const Declarations"]
            C1["CONST: resolvedTag, VALUE: resolveTag({"]
            C2["CONST: complexityReportPath, VALUE: findComplexityReportPath("]
            C3["CONST: result, VALUE: await expandTaskDirect("]
        end
        subgraph file11Flow["expand-task.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file12["mcp-server/src/tools/fix-dependencies.js"]
        subgraph file12Imports["fix-dependencies.js-Imports"]
            I1["IMPORT: zod, FROM: zod"]
            I2["IMPORT: ../core/task-master-core.js, FROM: /claude-task-master/mcp-server/src/core/task-master-core.js"]
            I3["IMPORT: ../core/utils/path-utils.js, FROM: /claude-task-master/mcp-server/src/core/utils/path-utils.js"]
            I4["IMPORT: ../../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        end
        subgraph file12Functions["fix-dependencies.js-Functions Defined"]
            FU1["FUNCTION: registerFixDependenciesTool"]
        end
        subgraph file12Exports["fix-dependencies.js-Exports"]
            E1["EXP: registerFixDependenciesTool"]
        end
        subgraph file12Constants["fix-dependencies.js-Const Declarations"]
            C1["CONST: resolvedTag, VALUE: resolveTag({"]
            C2["CONST: result, VALUE: await fixDependenciesDirect("]
        end
        subgraph file12Flow["fix-dependencies.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file13["mcp-server/src/tools/generate.js"]
        subgraph file13Imports["generate.js-Imports"]
            I1["IMPORT: zod, FROM: zod"]
            I2["IMPORT: ../core/task-master-core.js, FROM: /claude-task-master/mcp-server/src/core/task-master-core.js"]
            I3["IMPORT: ../core/utils/path-utils.js, FROM: /claude-task-master/mcp-server/src/core/utils/path-utils.js"]
            I4["IMPORT: ../../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
            I5["IMPORT: path, FROM: path"]
        end
        subgraph file13Functions["generate.js-Functions Defined"]
            FU1["FUNCTION: registerGenerateTool"]
        end
        subgraph file13Exports["generate.js-Exports"]
            E1["EXP: registerGenerateTool"]
        end
        subgraph file13Constants["generate.js-Const Declarations"]
            C1["CONST: resolvedTag, VALUE: resolveTag({"]
            C2["CONST: outputDir, VALUE: args.output"]
            C3["CONST: result, VALUE: await generateTaskFilesDirect("]
        end
        subgraph file13Flow["generate.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file14["mcp-server/src/tools/get-operation-status.js"]
        subgraph file14Imports["get-operation-status.js-Imports"]
            I1["IMPORT: zod, FROM: zod"]
            I2["IMPORT: ./utils.js, FROM: /claude-task-master/mcp-server/src/tools/utils.js"]
        end
        subgraph file14Functions["get-operation-status.js-Functions Defined"]
            FU1["FUNCTION: registerGetOperationStatusTool"]
        end
        subgraph file14Exports["get-operation-status.js-Exports"]
            E1["EXP: registerGetOperationStatusTool"]
        end
        subgraph file14Constants["get-operation-status.js-Const Declarations"]
            C1["CONST: status, VALUE: asyncManager.getStatus(operationId)"]
        end
        subgraph file14Flow["get-operation-status.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file15["mcp-server/src/tools/get-task.js"]
        subgraph file15Imports["get-task.js-Imports"]
            I1["IMPORT: zod, FROM: zod"]
            I2["IMPORT: ../core/task-master-core.js, FROM: /claude-task-master/mcp-server/src/core/task-master-core.js"]
            I3["IMPORT: ../../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        end
        subgraph file15Functions["get-task.js-Functions Defined"]
            FU1["FUNCTION: processTaskResponse"]
            FU2["FUNCTION: registerShowTaskTool"]
        end
        subgraph file15Exports["get-task.js-Exports"]
            E1["EXP: registerShowTaskTool"]
        end
        subgraph file15Constants["get-task.js-Const Declarations"]
            C1["CONST: resolvedTag, VALUE: resolveTag({"]
            C2["CONST: result, VALUE: await showTaskDirect("]
        end
        subgraph file15Flow["get-task.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file16["mcp-server/src/tools/get-tasks.js"]
        subgraph file16Imports["get-tasks.js-Imports"]
            I1["IMPORT: zod, FROM: zod"]
            I2["IMPORT: ../core/task-master-core.js, FROM: /claude-task-master/mcp-server/src/core/task-master-core.js"]
            I3["IMPORT: ../../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        end
        subgraph file16Functions["get-tasks.js-Functions Defined"]
            FU1["FUNCTION: registerListTasksTool"]
        end
        subgraph file16Exports["get-tasks.js-Exports"]
            E1["EXP: registerListTasksTool"]
        end
        subgraph file16Constants["get-tasks.js-Const Declarations"]
            C1["CONST: resolvedTag, VALUE: resolveTag({"]
            C2["CONST: result, VALUE: await listTasksDirect("]
        end
        subgraph file16Flow["get-tasks.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file17["mcp-server/src/tools/index.js"]
        subgraph file17Imports["index.js-Imports"]
            I1["IMPORT: ./get-tasks.js, FROM: /claude-task-master/mcp-server/src/tools/get-tasks.js"]
            I2["IMPORT: ../logger.js, FROM: /claude-task-master/mcp-server/src/logger.js"]
            I3["IMPORT: ./set-task-status.js, FROM: /claude-task-master/mcp-server/src/tools/set-task-status.js"]
            I4["IMPORT: ./parse-prd.js, FROM: /claude-task-master/mcp-server/src/tools/parse-prd.js"]
            I5["IMPORT: ./update.js, FROM: /claude-task-master/mcp-server/src/tools/update.js"]
            I6["IMPORT: ./update-task.js, FROM: /claude-task-master/mcp-server/src/tools/update-task.js"]
            I7["IMPORT: ./update-subtask.js, FROM: /claude-task-master/mcp-server/src/tools/update-subtask.js"]
            I8["IMPORT: ./generate.js, FROM: /claude-task-master/mcp-server/src/tools/generate.js"]
            I9["IMPORT: ./get-task.js, FROM: /claude-task-master/mcp-server/src/tools/get-task.js"]
            I10["IMPORT: ./next-task.js, FROM: /claude-task-master/mcp-server/src/tools/next-task.js"]
            I11["IMPORT: ./expand-task.js, FROM: /claude-task-master/mcp-server/src/tools/expand-task.js"]
            I12["IMPORT: ./add-task.js, FROM: /claude-task-master/mcp-server/src/tools/add-task.js"]
            I13["IMPORT: ./add-subtask.js, FROM: /claude-task-master/mcp-server/src/tools/add-subtask.js"]
            I14["IMPORT: ./remove-subtask.js, FROM: /claude-task-master/mcp-server/src/tools/remove-subtask.js"]
            I15["IMPORT: ./analyze.js, FROM: /claude-task-master/mcp-server/src/tools/analyze.js"]
            I16["IMPORT: ./clear-subtasks.js, FROM: /claude-task-master/mcp-server/src/tools/clear-subtasks.js"]
            I17["IMPORT: ./expand-all.js, FROM: /claude-task-master/mcp-server/src/tools/expand-all.js"]
            I18["IMPORT: ./remove-dependency.js, FROM: /claude-task-master/mcp-server/src/tools/remove-dependency.js"]
            I19["IMPORT: ./validate-dependencies.js, FROM: /claude-task-master/mcp-server/src/tools/validate-dependencies.js"]
            I20["IMPORT: ./fix-dependencies.js, FROM: /claude-task-master/mcp-server/src/tools/fix-dependencies.js"]
            I21["IMPORT: ./complexity-report.js, FROM: /claude-task-master/mcp-server/src/tools/complexity-report.js"]
            I22["IMPORT: ./add-dependency.js, FROM: /claude-task-master/mcp-server/src/tools/add-dependency.js"]
            I23["IMPORT: ./remove-task.js, FROM: /claude-task-master/mcp-server/src/tools/remove-task.js"]
            I24["IMPORT: ./initialize-project.js, FROM: /claude-task-master/mcp-server/src/tools/initialize-project.js"]
            I25["IMPORT: ./models.js, FROM: /claude-task-master/mcp-server/src/tools/models.js"]
            I26["IMPORT: ./move-task.js, FROM: /claude-task-master/mcp-server/src/tools/move-task.js"]
            I27["IMPORT: ./response-language.js, FROM: /claude-task-master/mcp-server/src/tools/response-language.js"]
            I28["IMPORT: ./add-tag.js, FROM: /claude-task-master/mcp-server/src/tools/add-tag.js"]
            I29["IMPORT: ./delete-tag.js, FROM: /claude-task-master/mcp-server/src/tools/delete-tag.js"]
            I30["IMPORT: ./list-tags.js, FROM: /claude-task-master/mcp-server/src/tools/list-tags.js"]
            I31["IMPORT: ./use-tag.js, FROM: /claude-task-master/mcp-server/src/tools/use-tag.js"]
            I32["IMPORT: ./rename-tag.js, FROM: /claude-task-master/mcp-server/src/tools/rename-tag.js"]
            I33["IMPORT: ./copy-tag.js, FROM: /claude-task-master/mcp-server/src/tools/copy-tag.js"]
            I34["IMPORT: ./research.js, FROM: /claude-task-master/mcp-server/src/tools/research.js"]
            I35["IMPORT: ./rules.js, FROM: /claude-task-master/mcp-server/src/tools/rules.js"]
            I36["IMPORT: ./scope-up.js, FROM: /claude-task-master/mcp-server/src/tools/scope-up.js"]
            I37["IMPORT: ./scope-down.js, FROM: /claude-task-master/mcp-server/src/tools/scope-down.js"]
        end
        subgraph file17Functions["index.js-Functions Defined"]
            FU1["FUNCTION: registerTaskMasterTools"]
        end
        subgraph file17Exports["index.js-Exports"]
            E1["EXP: registerTaskMasterTools"]
        end
        subgraph file17Constants["index.js-Const Declarations"]
            C0["(none)"]
        end
        subgraph file17Flow["index.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file18["mcp-server/src/tools/initialize-project.js"]
        subgraph file18Imports["initialize-project.js-Imports"]
            I1["IMPORT: zod, FROM: zod"]
            I2["IMPORT: ../core/task-master-core.js, FROM: /claude-task-master/mcp-server/src/core/task-master-core.js"]
            I3["IMPORT: ../../../src/constants/profiles.js, FROM: /claude-task-master/src/constants/profiles.js"]
        end
        subgraph file18Functions["initialize-project.js-Functions Defined"]
            FU1["FUNCTION: registerInitializeProjectTool"]
        end
        subgraph file18Exports["initialize-project.js-Exports"]
            E1["EXP: registerInitializeProjectTool"]
        end
        subgraph file18Constants["initialize-project.js-Const Declarations"]
            C1["CONST: session, VALUE: context.session"]
            C2["CONST: result, VALUE: await initializeProjectDirect(args, log, { session })"]
            C3["CONST: errorMessage, VALUE: `Project initialization tool failed: ${error.message || 'Unknown error'}`"]
        end
        subgraph file18Flow["initialize-project.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file19["mcp-server/src/tools/list-tags.js"]
        subgraph file19Imports["list-tags.js-Imports"]
            I1["IMPORT: zod, FROM: zod"]
            I2["IMPORT: ../core/task-master-core.js, FROM: /claude-task-master/mcp-server/src/core/task-master-core.js"]
            I3["IMPORT: ../core/utils/path-utils.js, FROM: /claude-task-master/mcp-server/src/core/utils/path-utils.js"]
        end
        subgraph file19Functions["list-tags.js-Functions Defined"]
            FU1["FUNCTION: registerListTagsTool"]
        end
        subgraph file19Exports["list-tags.js-Exports"]
            E1["EXP: registerListTagsTool"]
        end
        subgraph file19Constants["list-tags.js-Const Declarations"]
            C1["CONST: result, VALUE: await listTagsDirect("]
        end
        subgraph file19Flow["list-tags.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file20["mcp-server/src/tools/models.js"]
        subgraph file20Imports["models.js-Imports"]
            I1["IMPORT: zod, FROM: zod"]
            I2["IMPORT: ../core/task-master-core.js, FROM: /claude-task-master/mcp-server/src/core/task-master-core.js"]
        end
        subgraph file20Functions["models.js-Functions Defined"]
            FU1["FUNCTION: registerModelsTool"]
        end
        subgraph file20Exports["models.js-Exports"]
            E1["EXP: registerModelsTool"]
        end
        subgraph file20Constants["models.js-Const Declarations"]
            C1["CONST: result, VALUE: await modelsDirect("]
        end
        subgraph file20Flow["models.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file21["mcp-server/src/tools/move-task.js"]
        subgraph file21Imports["move-task.js-Imports"]
            I1["IMPORT: zod, FROM: zod"]
            I2["IMPORT: ../core/task-master-core.js, FROM: /claude-task-master/mcp-server/src/core/task-master-core.js"]
            I3["IMPORT: ../core/utils/path-utils.js, FROM: /claude-task-master/mcp-server/src/core/utils/path-utils.js"]
            I4["IMPORT: ../../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        end
        subgraph file21Functions["move-task.js-Functions Defined"]
            FU1["FUNCTION: registerMoveTaskTool"]
        end
        subgraph file21Exports["move-task.js-Exports"]
            E1["EXP: registerMoveTaskTool"]
        end
        subgraph file21Constants["move-task.js-Const Declarations"]
            C1["CONST: resolvedTag, VALUE: resolveTag({"]
            C2["CONST: fromIds, VALUE: args.from.split(',').map((id) => id.trim())"]
            C3["CONST: toIds, VALUE: args.to.split(',').map((id) => id.trim())"]
            C4["CONST: results, VALUE: []"]
            C5["CONST: fromId, VALUE: fromIds[i]"]
            C6["CONST: toId, VALUE: toIds[i]"]
            C7["CONST: shouldGenerateFiles, VALUE: i === fromIds.length - 1"]
            C8["CONST: result, VALUE: await moveTaskDirect("]
        end
        subgraph file21Flow["move-task.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file22["mcp-server/src/tools/next-task.js"]
        subgraph file22Imports["next-task.js-Imports"]
            I1["IMPORT: zod, FROM: zod"]
            I2["IMPORT: ../core/task-master-core.js, FROM: /claude-task-master/mcp-server/src/core/task-master-core.js"]
            I3["IMPORT: ../../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        end
        subgraph file22Functions["next-task.js-Functions Defined"]
            FU1["FUNCTION: registerNextTaskTool"]
        end
        subgraph file22Exports["next-task.js-Exports"]
            E1["EXP: registerNextTaskTool"]
        end
        subgraph file22Constants["next-task.js-Const Declarations"]
            C1["CONST: resolvedTag, VALUE: resolveTag({"]
            C2["CONST: result, VALUE: await nextTaskDirect("]
        end
        subgraph file22Flow["next-task.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file23["mcp-server/src/tools/parse-prd.js"]
        subgraph file23Imports["parse-prd.js-Imports"]
            I1["IMPORT: zod, FROM: zod"]
            I2["IMPORT: ../core/task-master-core.js, FROM: /claude-task-master/mcp-server/src/core/task-master-core.js"]
            I3["IMPORT: ../../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        end
        subgraph file23Functions["parse-prd.js-Functions Defined"]
            FU1["FUNCTION: registerParsePRDTool"]
        end
        subgraph file23Exports["parse-prd.js-Exports"]
            E1["EXP: registerParsePRDTool"]
        end
        subgraph file23Constants["parse-prd.js-Const Declarations"]
            C1["CONST: resolvedTag, VALUE: resolveTag({"]
            C2["CONST: result, VALUE: await parsePRDDirect("]
        end
        subgraph file23Flow["parse-prd.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file24["mcp-server/src/tools/remove-dependency.js"]
        subgraph file24Imports["remove-dependency.js-Imports"]
            I1["IMPORT: zod, FROM: zod"]
            I2["IMPORT: ../core/task-master-core.js, FROM: /claude-task-master/mcp-server/src/core/task-master-core.js"]
            I3["IMPORT: ../core/utils/path-utils.js, FROM: /claude-task-master/mcp-server/src/core/utils/path-utils.js"]
            I4["IMPORT: ../../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        end
        subgraph file24Functions["remove-dependency.js-Functions Defined"]
            FU1["FUNCTION: registerRemoveDependencyTool"]
        end
        subgraph file24Exports["remove-dependency.js-Exports"]
            E1["EXP: registerRemoveDependencyTool"]
        end
        subgraph file24Constants["remove-dependency.js-Const Declarations"]
            C1["CONST: resolvedTag, VALUE: resolveTag({"]
            C2["CONST: result, VALUE: await removeDependencyDirect("]
        end
        subgraph file24Flow["remove-dependency.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file25["mcp-server/src/tools/remove-subtask.js"]
        subgraph file25Imports["remove-subtask.js-Imports"]
            I1["IMPORT: zod, FROM: zod"]
            I2["IMPORT: ../core/task-master-core.js, FROM: /claude-task-master/mcp-server/src/core/task-master-core.js"]
            I3["IMPORT: ../core/utils/path-utils.js, FROM: /claude-task-master/mcp-server/src/core/utils/path-utils.js"]
            I4["IMPORT: ../../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        end
        subgraph file25Functions["remove-subtask.js-Functions Defined"]
            FU1["FUNCTION: registerRemoveSubtaskTool"]
        end
        subgraph file25Exports["remove-subtask.js-Exports"]
            E1["EXP: registerRemoveSubtaskTool"]
        end
        subgraph file25Constants["remove-subtask.js-Const Declarations"]
            C1["CONST: resolvedTag, VALUE: resolveTag({"]
            C2["CONST: result, VALUE: await removeSubtaskDirect("]
        end
        subgraph file25Flow["remove-subtask.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file26["mcp-server/src/tools/remove-task.js"]
        subgraph file26Imports["remove-task.js-Imports"]
            I1["IMPORT: zod, FROM: zod"]
            I2["IMPORT: ../core/task-master-core.js, FROM: /claude-task-master/mcp-server/src/core/task-master-core.js"]
            I3["IMPORT: ../core/utils/path-utils.js, FROM: /claude-task-master/mcp-server/src/core/utils/path-utils.js"]
            I4["IMPORT: ../../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        end
        subgraph file26Functions["remove-task.js-Functions Defined"]
            FU1["FUNCTION: registerRemoveTaskTool"]
        end
        subgraph file26Exports["remove-task.js-Exports"]
            E1["EXP: registerRemoveTaskTool"]
        end
        subgraph file26Constants["remove-task.js-Const Declarations"]
            C1["CONST: resolvedTag, VALUE: resolveTag({"]
            C2["CONST: result, VALUE: await removeTaskDirect("]
        end
        subgraph file26Flow["remove-task.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file27["mcp-server/src/tools/rename-tag.js"]
        subgraph file27Imports["rename-tag.js-Imports"]
            I1["IMPORT: zod, FROM: zod"]
            I2["IMPORT: ../core/task-master-core.js, FROM: /claude-task-master/mcp-server/src/core/task-master-core.js"]
            I3["IMPORT: ../core/utils/path-utils.js, FROM: /claude-task-master/mcp-server/src/core/utils/path-utils.js"]
        end
        subgraph file27Functions["rename-tag.js-Functions Defined"]
            FU1["FUNCTION: registerRenameTagTool"]
        end
        subgraph file27Exports["rename-tag.js-Exports"]
            E1["EXP: registerRenameTagTool"]
        end
        subgraph file27Constants["rename-tag.js-Const Declarations"]
            C1["CONST: result, VALUE: await renameTagDirect("]
        end
        subgraph file27Flow["rename-tag.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file28["mcp-server/src/tools/research.js"]
        subgraph file28Imports["research.js-Imports"]
            I1["IMPORT: zod, FROM: zod"]
            I2["IMPORT: ../core/task-master-core.js, FROM: /claude-task-master/mcp-server/src/core/task-master-core.js"]
            I3["IMPORT: ../../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        end
        subgraph file28Functions["research.js-Functions Defined"]
            FU1["FUNCTION: registerResearchTool"]
        end
        subgraph file28Exports["research.js-Exports"]
            E1["EXP: registerResearchTool"]
        end
        subgraph file28Constants["research.js-Const Declarations"]
            C1["CONST: resolvedTag, VALUE: resolveTag({"]
            C2["CONST: result, VALUE: await researchDirect("]
        end
        subgraph file28Flow["research.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file29["mcp-server/src/tools/response-language.js"]
        subgraph file29Imports["response-language.js-Imports"]
            I1["IMPORT: zod, FROM: zod"]
            I2["IMPORT: ../core/direct-functions/response-language.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/response-language.js"]
        end
        subgraph file29Functions["response-language.js-Functions Defined"]
            FU1["FUNCTION: registerResponseLanguageTool"]
        end
        subgraph file29Exports["response-language.js-Exports"]
            E1["EXP: registerResponseLanguageTool"]
        end
        subgraph file29Constants["response-language.js-Const Declarations"]
            C1["CONST: result, VALUE: await responseLanguageDirect("]
        end
        subgraph file29Flow["response-language.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file30["mcp-server/src/tools/rules.js"]
        subgraph file30Imports["rules.js-Imports"]
            I1["IMPORT: zod, FROM: zod"]
            I2["IMPORT: ../core/direct-functions/rules.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/rules.js"]
            I3["IMPORT: ../../../src/constants/profiles.js, FROM: /claude-task-master/src/constants/profiles.js"]
        end
        subgraph file30Functions["rules.js-Functions Defined"]
            FU1["FUNCTION: registerRulesTool"]
        end
        subgraph file30Exports["rules.js-Exports"]
            E1["EXP: registerRulesTool"]
        end
        subgraph file30Constants["rules.js-Const Declarations"]
            C1["CONST: result, VALUE: await rulesDirect(args, log, { session })"]
        end
        subgraph file30Flow["rules.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file31["mcp-server/src/tools/scope-down.js"]
        subgraph file31Imports["scope-down.js-Imports"]
            I1["IMPORT: zod, FROM: zod"]
            I2["IMPORT: ../core/task-master-core.js, FROM: /claude-task-master/mcp-server/src/core/task-master-core.js"]
            I3["IMPORT: ../core/utils/path-utils.js, FROM: /claude-task-master/mcp-server/src/core/utils/path-utils.js"]
            I4["IMPORT: ../../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        end
        subgraph file31Functions["scope-down.js-Functions Defined"]
            FU1["FUNCTION: registerScopeDownTool"]
        end
        subgraph file31Exports["scope-down.js-Exports"]
            E1["EXP: registerScopeDownTool"]
        end
        subgraph file31Constants["scope-down.js-Const Declarations"]
            C1["CONST: resolvedTag, VALUE: resolveTag({"]
            C2["CONST: result, VALUE: await scopeDownDirect("]
        end
        subgraph file31Flow["scope-down.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file32["mcp-server/src/tools/scope-up.js"]
        subgraph file32Imports["scope-up.js-Imports"]
            I1["IMPORT: zod, FROM: zod"]
            I2["IMPORT: ../core/task-master-core.js, FROM: /claude-task-master/mcp-server/src/core/task-master-core.js"]
            I3["IMPORT: ../core/utils/path-utils.js, FROM: /claude-task-master/mcp-server/src/core/utils/path-utils.js"]
            I4["IMPORT: ../../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        end
        subgraph file32Functions["scope-up.js-Functions Defined"]
            FU1["FUNCTION: registerScopeUpTool"]
        end
        subgraph file32Exports["scope-up.js-Exports"]
            E1["EXP: registerScopeUpTool"]
        end
        subgraph file32Constants["scope-up.js-Const Declarations"]
            C1["CONST: resolvedTag, VALUE: resolveTag({"]
            C2["CONST: result, VALUE: await scopeUpDirect("]
        end
        subgraph file32Flow["scope-up.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file33["mcp-server/src/tools/set-task-status.js"]
        subgraph file33Imports["set-task-status.js-Imports"]
            I1["IMPORT: zod, FROM: zod"]
            I2["IMPORT: ../../../src/constants/task-status.js, FROM: /claude-task-master/src/constants/task-status.js"]
            I3["IMPORT: ../../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        end
        subgraph file33Functions["set-task-status.js-Functions Defined"]
            FU1["FUNCTION: registerSetTaskStatusTool"]
        end
        subgraph file33Exports["set-task-status.js-Exports"]
            E1["EXP: registerSetTaskStatusTool"]
        end
        subgraph file33Constants["set-task-status.js-Const Declarations"]
            C1["CONST: resolvedTag, VALUE: resolveTag({"]
            C2["CONST: result, VALUE: await setTaskStatusDirect("]
        end
        subgraph file33Flow["set-task-status.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file34["mcp-server/src/tools/update-subtask.js"]
        subgraph file34Imports["update-subtask.js-Imports"]
            I1["IMPORT: zod, FROM: zod"]
            I2["IMPORT: ../core/task-master-core.js, FROM: /claude-task-master/mcp-server/src/core/task-master-core.js"]
            I3["IMPORT: ../core/utils/path-utils.js, FROM: /claude-task-master/mcp-server/src/core/utils/path-utils.js"]
            I4["IMPORT: ../../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        end
        subgraph file34Functions["update-subtask.js-Functions Defined"]
            FU1["FUNCTION: registerUpdateSubtaskTool"]
        end
        subgraph file34Exports["update-subtask.js-Exports"]
            E1["EXP: registerUpdateSubtaskTool"]
        end
        subgraph file34Constants["update-subtask.js-Const Declarations"]
            C1["CONST: toolName, VALUE: 'update_subtask'"]
            C2["CONST: resolvedTag, VALUE: resolveTag({"]
            C3["CONST: result, VALUE: await updateSubtaskByIdDirect("]
        end
        subgraph file34Flow["update-subtask.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file35["mcp-server/src/tools/update-task.js"]
        subgraph file35Imports["update-task.js-Imports"]
            I1["IMPORT: zod, FROM: zod"]
            I2["IMPORT: ../core/task-master-core.js, FROM: /claude-task-master/mcp-server/src/core/task-master-core.js"]
            I3["IMPORT: ../core/utils/path-utils.js, FROM: /claude-task-master/mcp-server/src/core/utils/path-utils.js"]
            I4["IMPORT: ../../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        end
        subgraph file35Functions["update-task.js-Functions Defined"]
            FU1["FUNCTION: registerUpdateTaskTool"]
        end
        subgraph file35Exports["update-task.js-Exports"]
            E1["EXP: registerUpdateTaskTool"]
        end
        subgraph file35Constants["update-task.js-Const Declarations"]
            C1["CONST: toolName, VALUE: 'update_task'"]
            C2["CONST: resolvedTag, VALUE: resolveTag({"]
            C3["CONST: result, VALUE: await updateTaskByIdDirect("]
        end
        subgraph file35Flow["update-task.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file36["mcp-server/src/tools/update.js"]
        subgraph file36Imports["update.js-Imports"]
            I1["IMPORT: zod, FROM: zod"]
            I2["IMPORT: ../core/task-master-core.js, FROM: /claude-task-master/mcp-server/src/core/task-master-core.js"]
            I3["IMPORT: ../core/utils/path-utils.js, FROM: /claude-task-master/mcp-server/src/core/utils/path-utils.js"]
            I4["IMPORT: ../../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        end
        subgraph file36Functions["update.js-Functions Defined"]
            FU1["FUNCTION: registerUpdateTool"]
        end
        subgraph file36Exports["update.js-Exports"]
            E1["EXP: registerUpdateTool"]
        end
        subgraph file36Constants["update.js-Const Declarations"]
            C1["CONST: toolName, VALUE: 'update'"]
            C2["CONST: resolvedTag, VALUE: resolveTag({"]
            C3["CONST: result, VALUE: await updateTasksDirect("]
        end
        subgraph file36Flow["update.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file37["mcp-server/src/tools/use-tag.js"]
        subgraph file37Imports["use-tag.js-Imports"]
            I1["IMPORT: zod, FROM: zod"]
            I2["IMPORT: ../core/task-master-core.js, FROM: /claude-task-master/mcp-server/src/core/task-master-core.js"]
            I3["IMPORT: ../core/utils/path-utils.js, FROM: /claude-task-master/mcp-server/src/core/utils/path-utils.js"]
        end
        subgraph file37Functions["use-tag.js-Functions Defined"]
            FU1["FUNCTION: registerUseTagTool"]
        end
        subgraph file37Exports["use-tag.js-Exports"]
            E1["EXP: registerUseTagTool"]
        end
        subgraph file37Constants["use-tag.js-Const Declarations"]
            C1["CONST: result, VALUE: await useTagDirect("]
        end
        subgraph file37Flow["use-tag.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file38["mcp-server/src/tools/utils.js"]
        subgraph file38Imports["utils.js-Imports"]
            I1["IMPORT: child_process, FROM: child_process"]
            I2["IMPORT: path, FROM: path"]
            I3["IMPORT: fs, FROM: fs"]
            I4["IMPORT: ../core/context-manager.js, FROM: /claude-task-master/mcp-server/src/core/context-manager.js"]
            I5["IMPORT: url, FROM: url"]
            I6["IMPORT: ../../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        end
        subgraph file38Functions["utils.js-Functions Defined"]
            FU1["FUNCTION: getVersionInfo"]
            FU2["FUNCTION: getTagInfo"]
            FU3["FUNCTION: getProjectRoot"]
            FU4["FUNCTION: getProjectRootFromSession"]
            FU5["FUNCTION: handleApiResult"]
            FU6["FUNCTION: executeTaskMasterCommand"]
            FU7["FUNCTION: getCachedOrExecute"]
            FU8["FUNCTION: processMCPResponseData"]
            FU9["FUNCTION: createContentResponse"]
            FU10["FUNCTION: createErrorResponse"]
            FU11["FUNCTION: createLogWrapper"]
            FU12["FUNCTION: normalizeProjectRoot"]
            FU13["FUNCTION: getRawProjectRootFromSession"]
            FU14["FUNCTION: withNormalizedProjectRoot"]
            FU15["FUNCTION: processSingleTask"]
            FU16["FUNCTION: processArrayOfTasks"]
        end
        subgraph file38Exports["utils.js-Exports"]
            E1["EXP: getProjectRoot"]
            E2["EXP: getProjectRootFromSession"]
            E3["EXP: getTagInfo"]
            E4["EXP: handleApiResult"]
            E5["EXP: executeTaskMasterCommand"]
            E6["EXP: getCachedOrExecute"]
            E7["EXP: processMCPResponseData"]
            E8["EXP: createContentResponse"]
            E9["EXP: createErrorResponse"]
            E10["EXP: createLogWrapper"]
            E11["EXP: normalizeProjectRoot"]
            E12["EXP: getRawProjectRootFromSession"]
            E13["EXP: withNormalizedProjectRoot"]
        end
        subgraph file38Constants["utils.js-Const Declarations"]
            C1["CONST: __filename, VALUE: fileURLToPath(import.meta.url)"]
            C2["CONST: packageJsonPath, VALUE: path.join("]
            C3["CONST: packageJson, VALUE: JSON.parse(fs.readFileSync(packageJsonPath, 'utf-8'))"]
            C4["CONST: currentTag, VALUE: getCurrentTag(projectRoot)"]
            C5["CONST: tasksJsonPath, VALUE: path.join("]
            C6["CONST: tasksData, VALUE: JSON.parse(fs.readFileSync(tasksJsonPath, 'utf-8'))"]
            C7["CONST: tagKeys, VALUE: Object.keys(tasksData).filter("]
            C8["CONST: envRoot, VALUE: process.env.TASK_MASTER_PROJECT_ROOT"]
            C9["CONST: absolutePath, VALUE: path.isAbsolute(envRoot)"]
            C10["CONST: absolutePath, VALUE: path.isAbsolute(projectRootRaw)"]
            C11["CONST: currentDir, VALUE: process.cwd()"]
            C12["CONST: markerPath, VALUE: path.join(currentDir, marker)"]
            C13["CONST: normalizedSlashes, VALUE: decodedPath.replace(/\\\\/g, '/')"]
            C14["CONST: cwd, VALUE: process.cwd()"]
            C15["CONST: serverPath, VALUE: process.argv[1]"]
            C16["CONST: mcpServerIndex, VALUE: serverPath.indexOf('mcp-server')"]
            C17["CONST: projectRoot, VALUE: path.dirname("]
            C18["CONST: cwd, VALUE: process.cwd()"]
            C19["CONST: versionInfo, VALUE: getVersionInfo()"]
            C20["CONST: tagInfo, VALUE: projectRoot ? getTagInfo(projectRoot, log) : null"]
            C21["CONST: errorMsg, VALUE: result.error?.message || `Unknown ${errorPrefix}`"]
            C22["CONST: processedData, VALUE: processFunction"]
            C23["CONST: responsePayload, VALUE: {"]
            C24["CONST: cwd, VALUE: getProjectRoot(projectRootRaw, log)"]
            C25["CONST: fullArgs, VALUE: [command, ...args]"]
            C26["CONST: spawnOptions, VALUE: {"]
            C27["CONST: errorOutput, VALUE: result.stderr"]
            C28["CONST: cachedResult, VALUE: contextManager.getCachedData(cacheKey)"]
            C29["CONST: result, VALUE: await actionFn()"]
            C30["CONST: processSingleTask, VALUE: (task) => {"]
            C31["CONST: processedTask, VALUE: { ...task }"]
            C32["CONST: processArrayOfTasks, VALUE: (tasks) => {"]
            C33["CONST: resolvedPath, VALUE: path.resolve(pathString)"]
            C34["CONST: envRoot, VALUE: process.env.TASK_MASTER_PROJECT_ROOT"]
            C35["CONST: envRoot, VALUE: session.env.TASK_MASTER_PROJECT_ROOT"]
            C36["CONST: sessionRoot, VALUE: getProjectRootFromSession(session, log)"]
            C37["CONST: updatedArgs, VALUE: { ...args, projectRoot: normalizedRoot }"]
        end
        subgraph file38Flow["utils.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file39["mcp-server/src/tools/validate-dependencies.js"]
        subgraph file39Imports["validate-dependencies.js-Imports"]
            I1["IMPORT: zod, FROM: zod"]
            I2["IMPORT: ../core/task-master-core.js, FROM: /claude-task-master/mcp-server/src/core/task-master-core.js"]
            I3["IMPORT: ../core/utils/path-utils.js, FROM: /claude-task-master/mcp-server/src/core/utils/path-utils.js"]
            I4["IMPORT: ../../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        end
        subgraph file39Functions["validate-dependencies.js-Functions Defined"]
            FU1["FUNCTION: registerValidateDependenciesTool"]
        end
        subgraph file39Exports["validate-dependencies.js-Exports"]
            E1["EXP: registerValidateDependenciesTool"]
        end
        subgraph file39Constants["validate-dependencies.js-Const Declarations"]
            C1["CONST: resolvedTag, VALUE: resolveTag({"]
            C2["CONST: result, VALUE: await validateDependenciesDirect("]
        end
        subgraph file39Flow["validate-dependencies.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file40["scripts/modules/commands.js"]
        subgraph file40Imports["commands.js-Imports"]
            I1["IMPORT: commander, FROM: commander"]
            I2["IMPORT: path, FROM: path"]
            I3["IMPORT: chalk, FROM: chalk"]
            I4["IMPORT: boxen, FROM: boxen"]
            I5["IMPORT: fs, FROM: fs"]
            I6["IMPORT: https, FROM: https"]
            I7["IMPORT: http, FROM: http"]
            I8["IMPORT: inquirer, FROM: inquirer"]
            I9["IMPORT: @inquirer/search, FROM: @inquirer/search"]
            I10["IMPORT: ora, FROM: ora"]
            I11["IMPORT: ../../src/constants/providers.js, FROM: /claude-task-master/src/constants/providers.js"]
            I12["IMPORT: ../../src/task-master.js, FROM: /claude-task-master/src/task-master.js"]
            I13["IMPORT: ../init.js, FROM: /claude-task-master/scripts/init.js"]
            I14["IMPORT: ../../src/utils/getVersion.js, FROM: /claude-task-master/src/utils/getVersion.js"]
            I15["IMPORT: ./sync-readme.js, FROM: /claude-task-master/scripts/modules/sync-readme.js"]
            I16["IMPORT: ../../src/constants/profiles.js, FROM: /claude-task-master/src/constants/profiles.js"]
        end
        subgraph file40Functions["commands.js-Functions Defined"]
            FU1["FUNCTION: runInteractiveSetup"]
            FU2["FUNCTION: fetchOpenRouterModelsCLI"]
            FU3["FUNCTION: fetchOllamaModelsCLI"]
            FU4["FUNCTION: handleSetModel"]
            FU5["FUNCTION: registerCommands"]
            FU6["FUNCTION: confirmOverwriteIfNeeded"]
            FU7["FUNCTION: showAddSubtaskHelp"]
            FU8["FUNCTION: showRemoveSubtaskHelp"]
            FU9["FUNCTION: showTagsHelp"]
            FU10["FUNCTION: showAddTagHelp"]
            FU11["FUNCTION: showDeleteTagHelp"]
            FU12["FUNCTION: showUseTagHelp"]
            FU13["FUNCTION: showResearchHelp"]
            FU14["FUNCTION: setupCLI"]
            FU15["FUNCTION: checkForUpdate"]
            FU16["FUNCTION: compareVersions"]
            FU17["FUNCTION: displayUpgradeNotification"]
            FU18["FUNCTION: runCLI"]
            FU19["FUNCTION: resolveComplexityReportPath"]
            FU20["FUNCTION: getPromptData"]
            FU21["FUNCTION: createSearchSource"]
        end
        subgraph file40Exports["commands.js-Exports"]
            E1["EXP: resolveComplexityReportPath"]
            E2["EXP: registerCommands"]
            E3["EXP: setupCLI"]
            E4["EXP: runCLI"]
            E5["EXP: checkForUpdate"]
            E6["EXP: compareVersions"]
            E7["EXP: displayUpgradeNotification"]
        end
        subgraph file40Constants["commands.js-Const Declarations"]
            C1["CONST: currentConfigResult, VALUE: await getModelConfiguration({ projectRoot })"]
            C2["CONST: currentModels, VALUE: currentConfigResult.success"]
            C3["CONST: options, VALUE: {"]
            C4["CONST: req, VALUE: https.request(options, (res) => {"]
            C5["CONST: parsedData, VALUE: JSON.parse(data)"]
            C6["CONST: url, VALUE: new URL(baseURL)"]
            C7["CONST: isHttps, VALUE: url.protocol === 'https:'"]
            C8["CONST: port, VALUE: url.port || (isHttps ? 443 : 80)"]
            C9["CONST: basePath, VALUE: url.pathname.endsWith('/')"]
            C10["CONST: options, VALUE: {"]
            C11["CONST: requestLib, VALUE: isHttps ? https : http"]
            C12["CONST: req, VALUE: requestLib.request(options, (res) => {"]
            C13["CONST: parsedData, VALUE: JSON.parse(data)"]
            C14["CONST: getPromptData, VALUE: (role, allowNone = false) => {"]
            C15["CONST: currentModel, VALUE: currentModels[role]"]
            C16["CONST: allModelsRaw, VALUE: getAvailableModels()"]
            C17["CONST: modelsByProvider, VALUE: allModelsRaw.reduce((acc, model) => {"]
            C18["CONST: cancelOption, VALUE: { name: '⏹ Cancel Model Setup', value: '__CANCEL__' }"]
            C19["CONST: noChangeOption, VALUE: currentModel?.modelId"]
            C20["CONST: customProviderOptions, VALUE: ["]
            C21["CONST: roleChoices, VALUE: Object.entries(modelsByProvider)"]
            C22["CONST: providerModels, VALUE: models"]
            C23["CONST: systemOptions, VALUE: []"]
            C24["CONST: systemLength, VALUE: systemOptions.length"]
            C25["CONST: noneOptionIndex, VALUE: systemLength + 1"]
            C26["CONST: mainPromptData, VALUE: getPromptData('main')"]
            C27["CONST: researchPromptData, VALUE: getPromptData('research')"]
            C28["CONST: fallbackPromptData, VALUE: getPromptData('fallback', true)"]
            C29["CONST: createSearchSource, VALUE: (choices, defaultValue) => {"]
            C30["CONST: filteredChoices, VALUE: choices.filter((choice) => {"]
            C31["CONST: searchText, VALUE: choice.name || ''"]
            C32["CONST: answers, VALUE: {}"]
            C33["CONST: coreOptionsSetup, VALUE: { projectRoot }"]
            C34["CONST: openRouterModels, VALUE: await fetchOpenRouterModelsCLI()"]
            C35["CONST: ollamaBaseURL, VALUE: getBaseUrlForRole(role, projectRoot)"]
            C36["CONST: ollamaModels, VALUE: await fetchOllamaModelsCLI(ollamaBaseURL)"]
            C37["CONST: result, VALUE: await setModel(role, modelIdToSet, {"]
            C38["CONST: currentCfg, VALUE: getConfig(projectRoot)"]
            C39["CONST: commandName, VALUE: this._name || 'unknown'"]
            C40["CONST: initOptions, VALUE: {"]
            C41["CONST: numTasks, VALUE: parseInt(options.numTasks, 10)"]
            C42["CONST: force, VALUE: options.force || false"]
            C43["CONST: append, VALUE: options.append || false"]
            C44["CONST: research, VALUE: options.research || false"]
            C45["CONST: useAppend, VALUE: append"]
            C46["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
            C47["CONST: tasksPath, VALUE: taskMaster.getTasksPath()"]
            C48["CONST: existingFileContent, VALUE: fs.readFileSync(tasksPath, 'utf8')"]
            C49["CONST: allData, VALUE: JSON.parse(existingFileContent)"]
            C50["CONST: overwrite, VALUE: await confirmTaskOverwrite(tasksPath)"]
            C51["CONST: outputPath, VALUE: taskMaster.getTasksPath() ||"]
            C52["CONST: taskMaster, VALUE: initTaskMaster({"]
            C53["CONST: fromId, VALUE: parseInt(options.from, 10)"]
            C54["CONST: prompt, VALUE: options.prompt"]
            C55["CONST: useResearch, VALUE: options.research || false"]
            C56["CONST: tasksPath, VALUE: taskMaster.getTasksPath()"]
            C57["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
            C58["CONST: taskMaster, VALUE: initTaskMaster({"]
            C59["CONST: tasksPath, VALUE: taskMaster.getTasksPath()"]
            C60["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
            C61["CONST: taskId, VALUE: parseInt(options.id, 10)"]
            C62["CONST: prompt, VALUE: options.prompt"]
            C63["CONST: useResearch, VALUE: options.research || false"]
            C64["CONST: result, VALUE: await updateTaskById("]
            C65["CONST: taskMaster, VALUE: initTaskMaster({"]
            C66["CONST: tasksPath, VALUE: taskMaster.getTasksPath()"]
            C67["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
            C68["CONST: subtaskId, VALUE: options.id"]
            C69["CONST: prompt, VALUE: options.prompt"]
            C70["CONST: useResearch, VALUE: options.research || false"]
            C71["CONST: result, VALUE: await updateSubtaskById("]
            C72["CONST: taskMaster, VALUE: initTaskMaster({"]
            C73["CONST: tasksPath, VALUE: taskMaster.getTasksPath()"]
            C74["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
            C75["CONST: taskIds, VALUE: options.id.split(',').map((id) => {"]
            C76["CONST: parsed, VALUE: parseInt(id.trim(), 10)"]
            C77["CONST: context, VALUE: {"]
            C78["CONST: result, VALUE: await scopeUpTask("]
            C79["CONST: taskMaster, VALUE: initTaskMaster({"]
            C80["CONST: tasksPath, VALUE: taskMaster.getTasksPath()"]
            C81["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
            C82["CONST: taskIds, VALUE: options.id.split(',').map((id) => {"]
            C83["CONST: parsed, VALUE: parseInt(id.trim(), 10)"]
            C84["CONST: context, VALUE: {"]
            C85["CONST: result, VALUE: await scopeDownTask("]
            C86["CONST: taskMaster, VALUE: initTaskMaster({"]
            C87["CONST: outputDir, VALUE: options.output"]
            C88["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
            C89["CONST: taskMaster, VALUE: initTaskMaster({"]
            C90["CONST: taskId, VALUE: options.id"]
            C91["CONST: status, VALUE: options.status"]
            C92["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
            C93["CONST: initOptions, VALUE: {"]
            C94["CONST: taskMaster, VALUE: initTaskMaster(initOptions)"]
            C95["CONST: statusFilter, VALUE: options.status"]
            C96["CONST: withSubtasks, VALUE: options.withSubtasks || false"]
            C97["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
            C98["CONST: initOptions, VALUE: {"]
            C99["CONST: taskMaster, VALUE: initTaskMaster(initOptions)"]
            C100["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
            C101["CONST: result, VALUE: await expandAllTasks("]
            C102["CONST: initOptions, VALUE: {"]
            C103["CONST: taskMaster, VALUE: initTaskMaster(initOptions)"]
            C104["CONST: modelOverride, VALUE: options.model"]
            C105["CONST: thresholdScore, VALUE: parseFloat(options.threshold)"]
            C106["CONST: useResearch, VALUE: options.research || false"]
            C107["CONST: targetTag, VALUE: taskMaster.getCurrentTag()"]
            C108["CONST: outputPath, VALUE: taskMaster.getComplexityReportPath()"]
            C109["CONST: fromStr, VALUE: options.from ? options.from : 'first'"]
            C110["CONST: toStr, VALUE: options.to ? options.to : 'last'"]
            C111["CONST: updatedOptions, VALUE: {"]
            C112["CONST: initOptions, VALUE: {"]
            C113["CONST: taskMaster, VALUE: initTaskMaster(initOptions)"]
            C114["CONST: validDetailLevels, VALUE: ['low', 'medium', 'high']"]
            C115["CONST: trimmedId, VALUE: id.trim()"]
            C116["CONST: trimmedPath, VALUE: filePath.trim()"]
            C117["CONST: saveToId, VALUE: options.saveTo.trim()"]
            C118["CONST: saveTarget, VALUE: options.save.trim()"]
            C119["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
            C120["CONST: tasksData, VALUE: readJSON("]
            C121["CONST: fullPath, VALUE: path.isAbsolute(filePath)"]
            C122["CONST: validatedParams, VALUE: {"]
            C123["CONST: researchOptions, VALUE: {"]
            C124["CONST: result, VALUE: await performResearch("]
            C125["CONST: isSubtask, VALUE: validatedParams.saveToId.includes('.')"]
            C126["CONST: researchContent, VALUE: `## Research Query: ${validatedParams.prompt}"]
            C127["CONST: updateTaskById, VALUE: ("]
            C128["CONST: taskIdNum, VALUE: parseInt(validatedParams.saveToId, 10)"]
            C129["CONST: saveContent, VALUE: `# Research Query: ${validatedParams.prompt}"]
            C130["CONST: taskIds, VALUE: options.id"]
            C131["CONST: all, VALUE: options.all"]
            C132["CONST: taskMaster, VALUE: initTaskMaster({"]
            C133["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
            C134["CONST: data, VALUE: readJSON("]
            C135["CONST: allIds, VALUE: data.tasks.map((t) => t.id).join(',')"]
            C136["CONST: isManualCreation, VALUE: options.title && options.description"]
            C137["CONST: tasksPath, VALUE: options.file || TASKMASTER_TASKS_FILE"]
            C138["CONST: taskMaster, VALUE: initTaskMaster({"]
            C139["CONST: projectRoot, VALUE: taskMaster.getProjectRoot()"]
            C140["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
            C141["CONST: dependenciesArray, VALUE: options.dependencies"]
            C142["CONST: context, VALUE: {"]
            C143["CONST: initOptions, VALUE: {"]
            C144["CONST: taskMaster, VALUE: initTaskMaster({"]
            C145["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
            C146["CONST: context, VALUE: {"]
            C147["CONST: initOptions, VALUE: {"]
            C148["CONST: taskMaster, VALUE: initTaskMaster(initOptions)"]
            C149["CONST: idArg, VALUE: taskId || options.id"]
            C150["CONST: statusFilter, VALUE: options.status"]
            C151["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
            C152["CONST: taskIds, VALUE: idArg"]
            C153["CONST: initOptions, VALUE: {"]
            C154["CONST: taskMaster, VALUE: initTaskMaster(initOptions)"]
            C155["CONST: taskId, VALUE: options.id"]
            C156["CONST: dependencyId, VALUE: options.dependsOn"]
            C157["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
            C158["CONST: formattedTaskId, VALUE: taskId.includes('.')"]
            C159["CONST: formattedDependencyId, VALUE: dependencyId.includes('.')"]
            C160["CONST: initOptions, VALUE: {"]
            C161["CONST: taskMaster, VALUE: initTaskMaster(initOptions)"]
            C162["CONST: taskId, VALUE: options.id"]
            C163["CONST: dependencyId, VALUE: options.dependsOn"]
            C164["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
            C165["CONST: formattedTaskId, VALUE: taskId.includes('.')"]
            C166["CONST: formattedDependencyId, VALUE: dependencyId.includes('.')"]
            C167["CONST: initOptions, VALUE: {"]
            C168["CONST: taskMaster, VALUE: initTaskMaster(initOptions)"]
            C169["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
            C170["CONST: initOptions, VALUE: {"]
            C171["CONST: taskMaster, VALUE: initTaskMaster(initOptions)"]
            C172["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
            C173["CONST: initOptions, VALUE: {"]
            C174["CONST: taskMaster, VALUE: initTaskMaster(initOptions)"]
            C175["CONST: taskMaster, VALUE: initTaskMaster({"]
            C176["CONST: parentId, VALUE: options.parent"]
            C177["CONST: existingTaskId, VALUE: options.taskId"]
            C178["CONST: generateFiles, VALUE: options.generate || false"]
            C179["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
            C180["CONST: newSubtaskData, VALUE: {"]
            C181["CONST: subtask, VALUE: await addSubtask("]
            C182["CONST: taskMaster, VALUE: initTaskMaster({"]
            C183["CONST: subtaskIds, VALUE: options.id"]
            C184["CONST: convertToTask, VALUE: options.convert || false"]
            C185["CONST: generateFiles, VALUE: options.generate || false"]
            C186["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
            C187["CONST: subtaskIdArray, VALUE: subtaskIds.split(',').map((id) => id.trim())"]
            C188["CONST: result, VALUE: await removeSubtask("]
            C189["CONST: taskMaster, VALUE: initTaskMaster({"]
            C190["CONST: taskIdsString, VALUE: options.id"]
            C191["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
            C192["CONST: taskIdsToRemove, VALUE: taskIdsString"]
            C193["CONST: data, VALUE: readJSON("]
            C194["CONST: existingTasksToRemove, VALUE: []"]
            C195["CONST: nonExistentIds, VALUE: []"]
            C196["CONST: dependentTaskMessages, VALUE: []"]
            C197["CONST: findResult, VALUE: findTaskById(data.tasks, taskId)"]
            C198["CONST: taskObject, VALUE: findResult.task"]
            C199["CONST: dependentTasks, VALUE: data.tasks.filter("]
            C200["CONST: indicator, VALUE: startLoadingIndicator("]
            C201["CONST: existingIdsString, VALUE: existingTasksToRemove"]
            C202["CONST: result, VALUE: await removeTask("]
            C203["CONST: userSpecifiedProfiles, VALUE: cmdOptions.rules"]
            C204["CONST: taskMaster, VALUE: initTaskMaster({"]
            C205["CONST: projectRoot, VALUE: taskMaster.getProjectRoot()"]
            C206["CONST: providerFlags, VALUE: ["]
            C207["CONST: isSetup, VALUE: options.setup"]
            C208["CONST: isSetOperation, VALUE: options.setMain || options.setResearch || options.setFallback"]
            C209["CONST: result, VALUE: await setModel('main', options.setMain, {"]
            C210["CONST: result, VALUE: await setModel('research', options.setResearch, {"]
            C211["CONST: result, VALUE: await setModel('fallback', options.setFallback, {"]
            C212["CONST: configResult, VALUE: await getModelConfiguration({ projectRoot })"]
            C213["CONST: availableResult, VALUE: await getAvailableModelsList({ projectRoot })"]
            C214["CONST: apiKeyStatusResult, VALUE: await getApiKeyStatusReport({ projectRoot })"]
            C215["CONST: activeIds, VALUE: configResult.success"]
            C216["CONST: displayableAvailable, VALUE: availableResult.data.models.filter("]
            C217["CONST: configExists, VALUE: isConfigFilePresent(projectRoot)"]
            C218["CONST: taskMaster, VALUE: initTaskMaster({})"]
            C219["CONST: projectRoot, VALUE: taskMaster.getProjectRoot()"]
            C220["CONST: userResponse, VALUE: await inquirer.prompt(["]
            C221["CONST: result, VALUE: setResponseLanguage(responseLanguage, {"]
            C222["CONST: taskMaster, VALUE: initTaskMaster({"]
            C223["CONST: sourceId, VALUE: options.from"]
            C224["CONST: destinationId, VALUE: options.to"]
            C225["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
            C226["CONST: sourceIds, VALUE: sourceId.split(',').map((id) => id.trim())"]
            C227["CONST: destinationIds, VALUE: destinationId.split(',').map((id) => id.trim())"]
            C228["CONST: tasksData, VALUE: readJSON("]
            C229["CONST: fromId, VALUE: sourceIds[i]"]
            C230["CONST: toId, VALUE: destinationIds[i]"]
            C231["CONST: result, VALUE: await moveTask("]
            C232["CONST: taskMaster, VALUE: initTaskMaster({})"]
            C233["CONST: projectRoot, VALUE: taskMaster.getProjectRoot()"]
            C234["CONST: selectedRuleProfiles, VALUE: await runInteractiveProfilesSetup()"]
            C235["CONST: profile, VALUE: selectedRuleProfiles[i]"]
            C236["CONST: profileConfig, VALUE: getRulesProfile(profile)"]
            C237["CONST: addResult, VALUE: convertAllRulesToProfileRules("]
            C238["CONST: expandedProfiles, VALUE: profiles"]
            C239["CONST: installedProfiles, VALUE: getInstalledProfiles(projectRoot)"]
            C240["CONST: removalResults, VALUE: []"]
            C241["CONST: addResults, VALUE: []"]
            C242["CONST: profileConfig, VALUE: getRulesProfile(profile)"]
            C243["CONST: addResult, VALUE: convertAllRulesToProfileRules("]
            C244["CONST: result, VALUE: removeProfileRules(projectRoot, profileConfig)"]
            C245["CONST: totalProcessed, VALUE: removalResults.length"]
            C246["CONST: totalSuccessful, VALUE: successfulRemovals.length"]
            C247["CONST: totalSkipped, VALUE: skippedRemovals.length"]
            C248["CONST: totalFailed, VALUE: failedRemovals.length"]
            C249["CONST: taskMaster, VALUE: initTaskMaster({"]
            C250["CONST: withSubtasks, VALUE: options.withSubtasks || false"]
            C251["CONST: status, VALUE: options.status || null"]
            C252["CONST: tag, VALUE: taskMaster.getCurrentTag()"]
            C253["CONST: success, VALUE: await syncTasksToReadme(taskMaster.getProjectRoot(), {"]
            C254["CONST: taskMaster, VALUE: initTaskMaster({"]
            C255["CONST: tasksPath, VALUE: taskMaster.getTasksPath()"]
            C256["CONST: context, VALUE: {"]
            C257["CONST: gitUtils, VALUE: await import('./utils/git-utils.js')"]
            C258["CONST: currentBranch, VALUE: await gitUtils.getCurrentBranch(projectRoot)"]
            C259["CONST: branchOptions, VALUE: {"]
            C260["CONST: createOptions, VALUE: {"]
            C261["CONST: finalTagName, VALUE: options.fromBranch"]
            C262["CONST: taskMaster, VALUE: initTaskMaster({"]
            C263["CONST: tasksPath, VALUE: taskMaster.getTasksPath()"]
            C264["CONST: deleteOptions, VALUE: {"]
            C265["CONST: context, VALUE: {"]
            C266["CONST: taskMaster, VALUE: initTaskMaster({"]
            C267["CONST: tasksPath, VALUE: taskMaster.getTasksPath()"]
            C268["CONST: listOptions, VALUE: {"]
            C269["CONST: context, VALUE: {"]
            C270["CONST: taskMaster, VALUE: initTaskMaster({"]
            C271["CONST: tasksPath, VALUE: taskMaster.getTasksPath()"]
            C272["CONST: context, VALUE: {"]
            C273["CONST: taskMaster, VALUE: initTaskMaster({"]
            C274["CONST: tasksPath, VALUE: taskMaster.getTasksPath()"]
            C275["CONST: context, VALUE: {"]
            C276["CONST: taskMaster, VALUE: initTaskMaster({"]
            C277["CONST: tasksPath, VALUE: taskMaster.getTasksPath()"]
            C278["CONST: copyOptions, VALUE: {"]
            C279["CONST: context, VALUE: {"]
            C280["CONST: programInstance, VALUE: program"]
            C281["CONST: packageJsonPath, VALUE: path.join(process.cwd(), 'package.json')"]
            C282["CONST: packageJson, VALUE: JSON.parse("]
            C283["CONST: originalHelpInformation, VALUE: programInstance.helpInformation.bind(programInstance)"]
            C284["CONST: currentVersion, VALUE: getTaskMasterVersion()"]
            C285["CONST: options, VALUE: {"]
            C286["CONST: req, VALUE: https.request(options, (res) => {"]
            C287["CONST: npmData, VALUE: JSON.parse(data)"]
            C288["CONST: latestVersion, VALUE: npmData['dist-tags']?.latest || currentVersion"]
            C289["CONST: needsUpdate, VALUE: compareVersions(currentVersion, latestVersion) < 0"]
            C290["CONST: v1Parts, VALUE: v1.split('.').map((p) => parseInt(p, 10))"]
            C291["CONST: v2Parts, VALUE: v2.split('.').map((p) => parseInt(p, 10))"]
            C292["CONST: v1Part, VALUE: v1Parts[i] || 0"]
            C293["CONST: v2Part, VALUE: v2Parts[i] || 0"]
            C294["CONST: message, VALUE: boxen("]
            C295["CONST: updateCheckPromise, VALUE: checkForUpdate()"]
            C296["CONST: programInstance, VALUE: setupCLI()"]
            C297["CONST: updateInfo, VALUE: await updateCheckPromise"]
            C298["CONST: taskMaster, VALUE: initTaskMaster({})"]
            C299["CONST: tasksPath, VALUE: taskMaster.getTasksPath()"]
            C300["CONST: statePath, VALUE: taskMaster.getStatePath()"]
            C301["CONST: rawData, VALUE: fs.readFileSync(tasksPath, 'utf8')"]
            C302["CONST: parsedData, VALUE: JSON.parse(rawData)"]
            C303["CONST: rawStateData, VALUE: fs.readFileSync(statePath, 'utf8')"]
            C304["CONST: base, VALUE: path.join(projectRoot, COMPLEXITY_REPORT_FILE)"]
        end
        subgraph file40Flow["commands.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    SharedImports --> file1Imports
    SharedDependencies --> file1
    SharedParameters --> file1
    SharedConstants --> file1Constants
```