```mermaid
flowchart TB
    subgraph Imports["Imports"]
        I1["IMPORT: zod, FROM: zod"]
        I2["IMPORT: ../task-manager.js, FROM: /claude-task-master/scripts/modules/task-manager.js"]
        I3["IMPORT: ./analyze-task-complexity.js, FROM: /claude-task-master/scripts/modules/task-manager/analyze-task-complexity.js"]
        I4["IMPORT: ../../../src/utils/path-utils.js, FROM: /claude-task-master/src/utils/path-utils.js"]
    end
    subgraph Dependencies["Dependencies"]
        D1["DEP: Path resolution"]
    end
    subgraph FunctionsDefined["Functions Defined"]
        FU1["FUNCTION: validateStrength"]
        FU2["FUNCTION: reanalyzeTaskComplexity"]
        FU3["FUNCTION: getCurrentComplexityScore"]
        FU4["FUNCTION: regenerateSubtasksForComplexity"]
        FU5["FUNCTION: generateScopePrompt"]
        FU6["FUNCTION: adjustTaskComplexity"]
        FU7["FUNCTION: scopeUpTask"]
        FU8["FUNCTION: scopeDownTask"]
    end
    subgraph Exports["Exports"]
        E1["EXP: validateStrength"]
    end
    subgraph Parameters["Parameters"]
        P1["PARAM: {string} strength - The strength level to validate"]
        P2["PARAM: {Object} task - The task to analyze"]
        P3["PARAM: {string} tasksPath - Path to tasks.json"]
        P4["PARAM: {Object} context - Context containing projectRoot, tag, session"]
        P5["PARAM: {number} taskId - Task ID to look up"]
        P6["PARAM: {Object} context - Context containing projectRoot, tag"]
        P7["PARAM: {Object} task - The updated task object"]
        P8["PARAM: {string} tasksPath - Path to tasks.json"]
        P9["PARAM: {Object} context - Context containing projectRoot, tag, session"]
        P10["PARAM: {string} direction - Direction of scope change (up/down) for logging"]
        P11["PARAM: {string} strength - Strength level ('light', 'regular', 'heavy')"]
        P12["PARAM: {number|null} originalComplexity - Original complexity score for smarter adjustments"]
        P13["PARAM: {Object} task - The task to adjust"]
        P14["PARAM: {string} direction - 'up' or 'down'"]
        P15["PARAM: {string} strength - 'light', 'regular', or 'heavy'"]
        P16["PARAM: {string} customPrompt - Optional custom instructions"]
        P17["PARAM: {Object} task - The task to adjust"]
        P18["PARAM: {string} direction - 'up' or 'down'"]
        P19["PARAM: {string} strength - 'light', 'regular', or 'heavy'"]
        P20["PARAM: {string} customPrompt - Optional custom instructions"]
        P21["PARAM: {Object} context - Context object with projectRoot, tag, etc."]
        P22["PARAM: {string} tasksPath - Path to tasks.json file"]
        P23["PARAM: {Array<number>} taskIds - Array of task IDs to scope up"]
        P24["PARAM: {string} strength - Strength level ('light', 'regular', 'heavy')"]
        P25["PARAM: {string} customPrompt - Optional custom instructions"]
        P26["PARAM: {Object} context - Context object with projectRoot, tag, etc."]
        P27["PARAM: {string} outputFormat - Output format ('text' or 'json')"]
        P28["PARAM: {string} tasksPath - Path to tasks.json file"]
        P29["PARAM: {Array<number>} taskIds - Array of task IDs to scope down"]
        P30["PARAM: {string} strength - Strength level ('light', 'regular', 'heavy')"]
        P31["PARAM: {string} customPrompt - Optional custom instructions"]
        P32["PARAM: {Object} context - Context object with projectRoot, tag, etc."]
        P33["PARAM: {string} outputFormat - Output format ('text' or 'json')"]
    end
    subgraph Constants["Const Declarations"]
        C1["CONST: VALID_STRENGTHS, VALUE: ['light', 'regular', 'heavy']"]
        C2["CONST: PRESERVE_STATUSES, VALUE: ["]
        C3["CONST: REGENERATE_STATUSES, VALUE: ['pending']"]
        C4["CONST: tasksForAnalysis, VALUE: {"]
        C5["CONST: complexityReportPath, VALUE: findComplexityReportPath("]
        C6["CONST: analysisOptions, VALUE: {"]
        C7["CONST: updatedReport, VALUE: readComplexityReport(complexityReportPath)"]
        C8["CONST: taskAnalysis, VALUE: findTaskInComplexityReport(updatedReport, task.id)"]
        C9["CONST: complexityReportPath, VALUE: findComplexityReportPath("]
        C10["CONST: complexityReport, VALUE: readComplexityReport(complexityReportPath)"]
        C11["CONST: taskAnalysis, VALUE: findTaskInComplexityReport(complexityReport, taskId)"]
        C12["CONST: preservedSubtasks, VALUE: task.subtasks.filter((subtask) =>"]
        C13["CONST: pendingSubtasks, VALUE: task.subtasks.filter((subtask) =>"]
        C14["CONST: preservedCount, VALUE: preservedSubtasks.length"]
        C15["CONST: currentPendingCount, VALUE: pendingSubtasks.length"]
        C16["CONST: complexityFactor, VALUE: originalComplexity"]
        C17["CONST: complexityInfo, VALUE: originalComplexity"]
        C18["CONST: base, VALUE: Math.max("]
        C19["CONST: base, VALUE: Math.max("]
        C20["CONST: base, VALUE: Math.max("]
        C21["CONST: aggressiveFactor, VALUE: originalComplexity >= 8 ? 0.7 : originalComplexity >= 6 ? 0.85 : 1.0"]
        C22["CONST: base, VALUE: Math.max("]
        C23["CONST: base, VALUE: Math.max("]
        C24["CONST: ultraAggressiveFactor, VALUE: originalComplexity >= 9 ? 0.3 : originalComplexity >= 7 ? 0.5 : 0.7"]
        C25["CONST: base, VALUE: Math.max("]
        C26["CONST: newSubtasksNeeded, VALUE: Math.max(1, targetSubtaskCount - preservedCount)"]
        C27["CONST: systemPrompt, VALUE: `You are an expert project manager who creates task breakdowns that match complexity levels.`"]
        C28["CONST: prompt, VALUE: `Based on this updated task, generate ${newSubtasksNeeded} NEW subtasks that reflect the ${direction === 'up' ? 'incr..."]
        C29["CONST: subtaskSchema, VALUE: z.object({"]
        C30["CONST: aiResult, VALUE: await generateObjectService({"]
        C31["CONST: generatedSubtasks, VALUE: aiResult.mainResult.subtasks || []"]
        C32["CONST: processedGeneratedSubtasks, VALUE: generatedSubtasks.map((subtask) => ({"]
        C33["CONST: isUp, VALUE: direction === 'up'"]
        C34["CONST: strengthDescriptions, VALUE: {"]
        C35["CONST: systemPrompt, VALUE: `You are an expert software project manager who helps adjust task complexity while maintaining clarity and actionabil..."]
        C36["CONST: prompt, VALUE: generateScopePrompt(task, direction, strength, customPrompt)"]
        C37["CONST: taskSchema, VALUE: z.object({"]
        C38["CONST: aiResult, VALUE: await generateObjectService({"]
        C39["CONST: updatedTaskData, VALUE: aiResult.mainResult"]
        C40["CONST: processedTaskData, VALUE: {"]
        C41["CONST: data, VALUE: readJSON(tasksPath, projectRoot, tag)"]
        C42["CONST: tasks, VALUE: data?.tasks || []"]
        C43["CONST: updatedTasks, VALUE: []"]
        C44["CONST: taskResult, VALUE: findTaskById(tasks, taskId)"]
        C45["CONST: task, VALUE: taskResult.task"]
        C46["CONST: originalComplexity, VALUE: getCurrentComplexityScore(taskId, context)"]
        C47["CONST: adjustResult, VALUE: await adjustTaskComplexity("]
        C48["CONST: subtaskResult, VALUE: await regenerateSubtasksForComplexity("]
        C49["CONST: taskIndex, VALUE: data.tasks.findIndex((t) => t.id === taskId)"]
        C50["CONST: newComplexity, VALUE: await reanalyzeTaskComplexity("]
        C51["CONST: complexityChange, VALUE: newComplexity - originalComplexity"]
        C52["CONST: arrow, VALUE: complexityChange > 0 ? '↗️' : complexityChange < 0 ? '↘️' : '➡️'"]
        C53["CONST: data, VALUE: readJSON(tasksPath, projectRoot, tag)"]
        C54["CONST: tasks, VALUE: data?.tasks || []"]
        C55["CONST: updatedTasks, VALUE: []"]
        C56["CONST: taskResult, VALUE: findTaskById(tasks, taskId)"]
        C57["CONST: task, VALUE: taskResult.task"]
        C58["CONST: originalComplexity, VALUE: getCurrentComplexityScore(taskId, context)"]
        C59["CONST: adjustResult, VALUE: await adjustTaskComplexity("]
        C60["CONST: subtaskResult, VALUE: await regenerateSubtasksForComplexity("]
        C61["CONST: taskIndex, VALUE: data.tasks.findIndex((t) => t.id === taskId)"]
        C62["CONST: newComplexity, VALUE: await reanalyzeTaskComplexity("]
        C63["CONST: complexityChange, VALUE: newComplexity - originalComplexity"]
        C64["CONST: arrow, VALUE: complexityChange > 0 ? '↗️' : complexityChange < 0 ? '↘️' : '➡️'"]
    end
    subgraph ExecutionFlow["Execution Flow"]
        FL1["Identify and load dependencies and modules"]
        FL2["Define functions and core logic for this module"]
        FL3["Expose public API via exports"]
    end
    subgraph FileName["scope-adjustment.js"]
        Imports
        Dependencies
        FunctionsDefined
        Exports
        Parameters
        Constants
        ExecutionFlow
    end
    FL1 --> FL2
    FL2 --> FL3
```