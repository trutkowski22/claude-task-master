```mermaid
flowchart TB
    subgraph Imports["Imports"]
        I1["IMPORT: path, FROM: path"]
        I2["IMPORT: chalk, FROM: chalk"]
        I3["IMPORT: boxen, FROM: boxen"]
        I4["IMPORT: cli-table3, FROM: cli-table3"]
        I5["IMPORT: zod, FROM: zod"]
        I6["IMPORT: ../config-manager.js, FROM: /claude-task-master/scripts/modules/config-manager.js"]
        I7["IMPORT: ../prompt-manager.js, FROM: /claude-task-master/scripts/modules/prompt-manager.js"]
        I8["IMPORT: ./generate-task-files.js, FROM: /claude-task-master/scripts/modules/task-manager/generate-task-files.js"]
        I9["IMPORT: ../ai-services-unified.js, FROM: /claude-task-master/scripts/modules/ai-services-unified.js"]
        I10["IMPORT: ./models.js, FROM: /claude-task-master/scripts/modules/task-manager/models.js"]
        I11["IMPORT: ../utils/contextGatherer.js, FROM: /claude-task-master/scripts/modules/utils/contextGatherer.js"]
        I12["IMPORT: ../utils/fuzzyTaskSearch.js, FROM: /claude-task-master/scripts/modules/utils/fuzzyTaskSearch.js"]
        I13["IMPORT: ../utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
    end
    subgraph Dependencies["Dependencies"]
        D1["DEP: Path resolution"]
    end
    subgraph FunctionsDefined["Functions Defined"]
        FU1["FUNCTION: parseUpdatedTasksFromText"]
        FU2["FUNCTION: updateTasks"]
        FU3["FUNCTION: report"]
    end
    subgraph Exports["Exports"]
        E1["EXP: updateTasks"]
    end
    subgraph Parameters["Parameters"]
        P1["PARAM: {string} text - Response text from AI."]
        P2["PARAM: {number} expectedCount - Expected number of tasks."]
        P3["PARAM: {Function | Object} logFn - The logging function or MCP log object."]
        P4["PARAM: {boolean} isMCP - Flag indicating if logFn is MCP logger."]
        P5["PARAM: {string} tasksPath - Path to the tasks.json file"]
        P6["PARAM: {number} fromId - Task ID to start updating from"]
        P7["PARAM: {string} prompt - Prompt with new context"]
        P8["PARAM: {Object} context - Context object containing session and mcpLog."]
        P9["PARAM: {Object} [context.session] - Session object from MCP server."]
        P10["PARAM: {Object} [context.mcpLog] - MCP logger object."]
        P11["PARAM: {string} [context.tag] - Tag for the task"]
    end
    subgraph Constants["Const Declarations"]
        C1["CONST: updatedTaskSchema, VALUE: z"]
        C2["CONST: preprocessTaskSchema, VALUE: z.preprocess((task) => {"]
        C3["CONST: updatedTaskArraySchema, VALUE: z.array(updatedTaskSchema)"]
        C4["CONST: preprocessedTaskArraySchema, VALUE: z.array(preprocessTaskSchema)"]
        C5["CONST: report, VALUE: (level, ...args) => {"]
        C6["CONST: originalResponseForDebug, VALUE: cleanedResponse"]
        C7["CONST: firstBracketIndex, VALUE: cleanedResponse.indexOf('[')"]
        C8["CONST: lastBracketIndex, VALUE: cleanedResponse.lastIndexOf(']')"]
        C9["CONST: testParse, VALUE: JSON.parse(potentialJsonFromArray)"]
        C10["CONST: codeBlockMatch, VALUE: cleanedResponse.match("]
        C11["CONST: commonPrefixes, VALUE: ["]
        C12["CONST: missingFields, VALUE: []"]
        C13["CONST: preprocessResult, VALUE: preprocessedTaskArraySchema.safeParse(parsedTasks)"]
        C14["CONST: logFn, VALUE: mcpLog || consoleLog"]
        C15["CONST: isMCP, VALUE: !!mcpLog"]
        C16["CONST: projectRoot, VALUE: providedProjectRoot || findProjectRoot()"]
        C17["CONST: data, VALUE: readJSON(tasksPath, projectRoot, tag)"]
        C18["CONST: tasksToUpdate, VALUE: data.tasks.filter("]
        C19["CONST: contextGatherer, VALUE: new ContextGatherer(projectRoot, tag)"]
        C20["CONST: allTasksFlat, VALUE: flattenTasksWithSubtasks(data.tasks)"]
        C21["CONST: fuzzySearch, VALUE: new FuzzyTaskSearch(allTasksFlat, 'update')"]
        C22["CONST: searchResults, VALUE: fuzzySearch.findRelevantTasks(prompt, {"]
        C23["CONST: relevantTaskIds, VALUE: fuzzySearch.getTaskIds(searchResults)"]
        C24["CONST: tasksToUpdateIds, VALUE: tasksToUpdate.map((t) => t.id.toString())"]
        C25["CONST: finalTaskIds, VALUE: ["]
        C26["CONST: contextResult, VALUE: await contextGatherer.gather({"]
        C27["CONST: table, VALUE: new Table({"]
        C28["CONST: promptManager, VALUE: getPromptManager()"]
        C29["CONST: serviceRole, VALUE: useResearch ? 'research' : 'main'"]
        C30["CONST: parsedUpdatedTasks, VALUE: parseUpdatedTasksFromText("]
        C31["CONST: updatedTasksMap, VALUE: new Map("]
        C32["CONST: updatedTask, VALUE: updatedTasksMap.get(task.id)"]
    end
    subgraph ExecutionFlow["Execution Flow"]
        FL1["Identify and load dependencies and modules"]
        FL2["Define functions and core logic for this module"]
        FL3["Expose public API via exports"]
    end
    subgraph FileName["update-tasks.js"]
        Imports
        Dependencies
        FunctionsDefined
        Exports
        Parameters
        Constants
        ExecutionFlow
    end
    FL1 --> FL2
    FL2 --> FL3
```