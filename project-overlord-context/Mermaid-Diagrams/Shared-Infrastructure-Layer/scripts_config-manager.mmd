flowchart TB
    subgraph ["config-manager-Imports"]
        I1["IMPORT: fs, FROM: fs"]
        I2["IMPORT: path, FROM: path"]
        I3["IMPORT: fileURLToPath, FROM: url"]
        I4["IMPORT: chalk, FROM: chalk"]
        I5["IMPORT: z, FROM: zod"]
        I6["IMPORT: AI_COMMAND_NAMES, FROM: /claude-task-master/src/constants/commands.js"]
        I7["IMPORT: LEGACY_CONFIG_FILE, TASKMASTER_DIR, FROM: /claude-task-master/src/constants/paths.js"]
        I8["IMPORT: ALL_PROVIDERS, CUSTOM_PROVIDERS, CUSTOM_PROVIDERS_ARRAY, VALIDATED_PROVIDERS, FROM: /claude-task-master/src/constants/providers.js"]
        I9["IMPORT: findConfigPath, FROM: /claude-task-master/src/utils/path-utils.js"]
        I10["IMPORT: findProjectRoot, isEmpty, log, resolveEnvVariable, FROM: /claude-task-master/scripts/modules/utils.js"]
    end
    subgraph ["config-manager-Dependencies"]
        D1["DEP: Node.js file system and path modules"]
        D2["DEP: Chalk for colored console output"]
        D3["DEP: Zod for schema validation"]
        D4["DEP: Configuration file system"]
        D5["DEP: Environment variable resolution"]
    end
    subgraph ["config-manager-FunctionsDefined"]
        FU1["FUNCTION: _loadAndValidateConfig"]
        FU2["FUNCTION: getConfig"]
        FU3["FUNCTION: validateProvider"]
        FU4["FUNCTION: validateProviderModelCombination"]
        FU5["FUNCTION: validateClaudeCodeSettings"]
        FU6["FUNCTION: getClaudeCodeSettings"]
        FU7["FUNCTION: getClaudeCodeSettingsForCommand"]
        FU8["FUNCTION: getModelConfigForRole"]
        FU9["FUNCTION: getMainProvider"]
        FU10["FUNCTION: getMainModelId"]
        FU11["FUNCTION: getMainMaxTokens"]
        FU12["FUNCTION: getMainTemperature"]
        FU13["FUNCTION: getResearchProvider"]
        FU14["FUNCTION: getResearchModelId"]
        FU15["FUNCTION: getResearchMaxTokens"]
        FU16["FUNCTION: getResearchTemperature"]
        FU17["FUNCTION: getFallbackProvider"]
        FU18["FUNCTION: getFallbackModelId"]
        FU19["FUNCTION: getFallbackMaxTokens"]
        FU20["FUNCTION: getFallbackTemperature"]
        FU21["FUNCTION: getGlobalConfig"]
        FU22["FUNCTION: getLogLevel"]
        FU23["FUNCTION: getDebugFlag"]
        FU24["FUNCTION: getDefaultSubtasks"]
        FU25["FUNCTION: getDefaultNumTasks"]
        FU26["FUNCTION: getDefaultPriority"]
        FU27["FUNCTION: getProjectName"]
        FU28["FUNCTION: getOllamaBaseURL"]
        FU29["FUNCTION: getAzureBaseURL"]
        FU30["FUNCTION: getBedrockBaseURL"]
        FU31["FUNCTION: getVertexProjectId"]
        FU32["FUNCTION: getVertexLocation"]
        FU33["FUNCTION: getResponseLanguage"]
        FU34["FUNCTION: getParametersForRole"]
        FU35["FUNCTION: isApiKeySet"]
        FU36["FUNCTION: getMcpApiKeyStatus"]
        FU37["FUNCTION: getAvailableModels"]
        FU38["FUNCTION: writeConfig"]
        FU39["FUNCTION: isConfigFilePresent"]
        FU40["FUNCTION: getUserId"]
        FU41["FUNCTION: getAllProviders"]
        FU42["FUNCTION: getBaseUrlForRole"]
    end
    subgraph ["config-manager-Exports"]
        E1["EXP: providersWithoutApiKeys"]
        E2["EXP: getConfig"]
        E3["EXP: writeConfig"]
        E4["EXP: ConfigurationError"]
        E5["EXP: isConfigFilePresent"]
        E6["EXP: getClaudeCodeSettings"]
        E7["EXP: getClaudeCodeSettingsForCommand"]
        E8["EXP: validateProvider"]
        E9["EXP: validateProviderModelCombination"]
        E10["EXP: validateClaudeCodeSettings"]
        E11["EXP: VALIDATED_PROVIDERS"]
        E12["EXP: CUSTOM_PROVIDERS"]
        E13["EXP: ALL_PROVIDERS"]
        E14["EXP: MODEL_MAP"]
        E15["EXP: getAvailableModels"]
        E16["EXP: getMainProvider"]
        E17["EXP: getMainModelId"]
        E18["EXP: getMainMaxTokens"]
        E19["EXP: getMainTemperature"]
        E20["EXP: getResearchProvider"]
        E21["EXP: getResearchModelId"]
        E22["EXP: getResearchMaxTokens"]
        E23["EXP: getResearchTemperature"]
        E24["EXP: getFallbackProvider"]
        E25["EXP: getFallbackModelId"]
        E26["EXP: getFallbackMaxTokens"]
        E27["EXP: getFallbackTemperature"]
        E28["EXP: getBaseUrlForRole"]
        E29["EXP: getLogLevel"]
        E30["EXP: getDebugFlag"]
        E31["EXP: getDefaultNumTasks"]
        E32["EXP: getDefaultSubtasks"]
        E33["EXP: getDefaultPriority"]
        E34["EXP: getProjectName"]
        E35["EXP: getOllamaBaseURL"]
        E36["EXP: getAzureBaseURL"]
        E37["EXP: getBedrockBaseURL"]
        E38["EXP: getResponseLanguage"]
        E39["EXP: getParametersForRole"]
        E40["EXP: getUserId"]
        E41["EXP: isApiKeySet"]
        E42["EXP: getMcpApiKeyStatus"]
        E43["EXP: getAllProviders"]
        E44["EXP: getVertexProjectId"]
        E45["EXP: getVertexLocation"]
    end
    subgraph ["config-manager-Parameters"]
        P1["PARAM: {string|null} explicitRoot - Optional explicit path to the project root"]
        P2["PARAM: {boolean} forceReload - Force reloading the config file"]
        P3["PARAM: {string} providerName - The name of the provider"]
        P4["PARAM: {string} modelId - The model ID"]
        P5["PARAM: {object} settings - The settings to validate"]
        P6["PARAM: {string} role - The role ('main', 'research', 'fallback')"]
        P7["PARAM: {object|null} [session=null] - The MCP session object"]
        P8["PARAM: {string|null} [projectRoot=null] - The project root directory"]
        P9["PARAM: {Object} config - The configuration object to write"]
    end
    subgraph ["config-manager-Constants"]
        C1["CONST: __filename, VALUE: fileURLToPath(import.meta.url)"]
        C2["CONST: __dirname, VALUE: path.dirname(__filename)"]
        C3["CONST: DEFAULTS, VALUE: Default configuration object with models, global, and claudeCode settings"]
        C4["CONST: MODEL_MAP, VALUE: Loaded supported models from JSON file"]
        C5["CONST: loadedConfig, VALUE: Cached configuration object"]
        C6["CONST: loadedConfigRoot, VALUE: Track which root loaded the config"]
        C7["CONST: providersWithoutApiKeys, VALUE: Array of providers that don't require API keys"]
    end
    subgraph ["config-manager-ExecutionFlow"]
        FL1["Load supported models from JSON file with error handling"]
        FL2["Define default configuration structure for all settings"]
        FL3["Implement config loading and validation with caching"]
        FL4["Provide role-specific getters for main/research/fallback models"]
        FL5["Implement global configuration accessors for project settings"]
        FL6["Handle API key validation across different providers"]
        FL7["Support Claude Code specific configuration management"]
        FL8["Implement config file writing with validation"]
        FL9["Provide model availability and validation functions"]
        FL10["Export comprehensive configuration management interface"]
    end
    subgraph ["config-manager.js"]
        ["config-manager-Imports"]
        ["config-manager-Dependencies"]
        ["config-manager-FunctionsDefined"]
        ["config-manager-Exports"]
        ["config-manager-Parameters"]
        ["config-manager-Constants"]
        ["config-manager-ExecutionFlow"]
    end
    FL1 --> FL2
    FL2 --> FL3
    FL3 --> FL4
    FL4 --> FL5
    FL5 --> FL6
    FL6 --> FL7
    FL7 --> FL8
    FL8 --> FL9
    FL9 --> FL10