```mermaid
flowchart TB
    subgraph Imports["Imports"]
        I1["IMPORT: fs, FROM: fs"]
        I2["IMPORT: path, FROM: path"]
        I3["IMPORT: chalk, FROM: chalk"]
        I4["IMPORT: ./utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        I5["IMPORT: ./config-manager.js, FROM: /claude-task-master/scripts/modules/config-manager.js"]
        I6["IMPORT: ./task-manager/list-tasks.js, FROM: /claude-task-master/scripts/modules/task-manager/list-tasks.js"]
    end
    subgraph Dependencies["Dependencies"]
        D1["DEP: File system"]
        D2["DEP: Path resolution"]
    end
    subgraph FunctionsDefined["Functions Defined"]
        FU1["FUNCTION: createBasicReadme"]
        FU2["FUNCTION: createTaskMasterUrl"]
        FU3["FUNCTION: createStartMarker"]
        FU4["FUNCTION: createEndMarker"]
        FU5["FUNCTION: syncTasksToReadme"]
    end
    subgraph Exports["Exports"]
        E1["EXP: syncTasksToReadme"]
    end
    subgraph Parameters["Parameters"]
        P1["PARAM: {string} projectName - Name of the project"]
        P2["PARAM: {string} projectRoot - The project root path"]
        P3["PARAM: {Object} options - Export options"]
        P4["PARAM: {string} projectRoot - Path to the project root directory"]
        P5["PARAM: {Object} options - Options for syncing"]
        P6["PARAM: {boolean} options.withSubtasks - Include subtasks in the output (default: false)"]
        P7["PARAM: {string} options.status - Filter by status (e.g., 'pending', 'done')"]
        P8["PARAM: {string} options.tasksPath - Custom path to tasks.json"]
    end
    subgraph Constants["Const Declarations"]
        C1["CONST: folderName, VALUE: path.basename(projectRoot)"]
        C2["CONST: cleanFolderName, VALUE: folderName"]
        C3["CONST: utmParams, VALUE: new URLSearchParams({"]
        C4["CONST: statusText, VALUE: status"]
        C5["CONST: subtasksText, VALUE: withSubtasks ? 'with subtasks' : 'without subtasks'"]
        C6["CONST: exportInfo, VALUE: `ðŸŽ¯ **Taskmaster Export** - ${timestamp}\\n` +"]
        C7["CONST: boxContent, VALUE: `<!-- TASKMASTER_EXPORT_START -->\\n` +"]
        C8["CONST: actualProjectRoot, VALUE: projectRoot || findProjectRoot() || '.'"]
        C9["CONST: tasksOutput, VALUE: await listTasks("]
        C10["CONST: timestamp, VALUE: new Date().toISOString().replace('T', ' ').substring(0, 19) + ' UTC'"]
        C11["CONST: projectName, VALUE: getProjectName(actualProjectRoot)"]
        C12["CONST: startMarker, VALUE: createStartMarker({"]
        C13["CONST: endMarker, VALUE: createEndMarker()"]
        C14["CONST: taskSection, VALUE: startMarker + tasksOutput + endMarker"]
        C15["CONST: readmePath, VALUE: path.join(actualProjectRoot, 'README.md')"]
        C16["CONST: startComment, VALUE: '<!-- TASKMASTER_EXPORT_START -->'"]
        C17["CONST: endComment, VALUE: '<!-- TASKMASTER_EXPORT_END -->'"]
        C18["CONST: startIndex, VALUE: readmeContent.indexOf(startComment)"]
        C19["CONST: endIndex, VALUE: readmeContent.indexOf(endComment)"]
        C20["CONST: beforeTasks, VALUE: readmeContent.substring(0, startIndex)"]
        C21["CONST: afterTasks, VALUE: readmeContent.substring(endIndex + endComment.length)"]
    end
    subgraph ExecutionFlow["Execution Flow"]
        FL1["Identify and load dependencies and modules"]
        FL2["Define functions and core logic for this module"]
        FL3["Expose public API via exports"]
    end
    subgraph FileName["sync-readme.js"]
        Imports
        Dependencies
        FunctionsDefined
        Exports
        Parameters
        Constants
        ExecutionFlow
    end
    FL1 --> FL2
    FL2 --> FL3
```