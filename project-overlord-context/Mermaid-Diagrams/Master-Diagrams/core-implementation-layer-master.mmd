flowchart TB
    %% SHARED INFRASTRUCTURE SECTIONS
    subgraph SharedImports["Shared-Infrastructure-Imports"]
        I1["IMPORT: ../../../../scripts/modules/dependency-manager.js, FROM: /claude-task-master/scripts/modules/dependency-manager.js"]
        I2["IMPORT: ../../../../scripts/modules/task-manager.js, FROM: /claude-task-master/scripts/modules/task-manager.js"]
        I3["IMPORT: ../../tools/utils.js, FROM: /claude-task-master/mcp-server/src/tools/utils.js"]
        I4["IMPORT: ../../../../scripts/modules/task-manager/analyze-task-complexity.js, FROM: /claude-task-master/scripts/modules/task-manager/analyze-task-complexity.js"]
        I5["IMPORT: fs, FROM: fs"]
        I6["IMPORT: ../context-manager.js, FROM: /claude-task-master/mcp-server/src/core/context-manager.js"]
        I7["IMPORT: path, FROM: path"]
        I8["IMPORT: ../../../../scripts/modules/task-manager/tag-management.js, FROM: /claude-task-master/scripts/modules/task-manager/tag-management.js"]
        I9["IMPORT: ../../../../scripts/modules/task-manager/expand-task.js, FROM: /claude-task-master/scripts/modules/task-manager/expand-task.js"]
        I10["IMPORT: ../../../../scripts/init.js, FROM: /claude-task-master/scripts/init.js"]
        I11["IMPORT: os, FROM: os"]
        I12["IMPORT: ../../../../src/constants/profiles.js, FROM: /claude-task-master/src/constants/profiles.js"]
        I13["IMPORT: ../../../../src/utils/rule-transformer.js, FROM: /claude-task-master/src/utils/rule-transformer.js"]
        I14["IMPORT: ../../../../src/constants/providers.js, FROM: /claude-task-master/src/constants/providers.js"]
        I15["IMPORT: ../utils/path-utils.js, FROM: /claude-task-master/mcp-server/src/core/utils/path-utils.js"]
        I16["IMPORT: ../../../../scripts/modules/config-manager.js, FROM: /claude-task-master/scripts/modules/config-manager.js"]
        I17["IMPORT: ../../../../src/constants/paths.js, FROM: /claude-task-master/src/constants/paths.js"]
        I18["IMPORT: ../../../../src/constants/rules-actions.js, FROM: /claude-task-master/src/constants/rules-actions.js"]
        I19["IMPORT: ./next-task.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/next-task.js"]
        I20["IMPORT: ai, FROM: ai"]
        I21["IMPORT: ../../src/provider-registry/index.js, FROM: /claude-task-master/src/provider-registry/index.js"]
        I22["IMPORT: url, FROM: url"]
        I23["IMPORT: chalk, FROM: chalk"]
        I24["IMPORT: zod, FROM: zod"]
        I25["IMPORT: ../../src/constants/commands.js, FROM: /claude-task-master/src/constants/commands.js"]
        I26["IMPORT: ../../src/utils/path-utils.js, FROM: /claude-task-master/src/utils/path-utils.js"]
        I27["IMPORT: ./utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        I28["IMPORT: boxen, FROM: boxen"]
        I29["IMPORT: ./ui.js, FROM: /claude-task-master/scripts/modules/ui.js"]
        I30["IMPORT: ./task-manager.js, FROM: /claude-task-master/scripts/modules/task-manager.js"]
        I31["IMPORT: ajv, FROM: ajv"]
        I32["IMPORT: ajv-formats, FROM: ajv-formats"]
        I33["IMPORT: ./config-manager.js, FROM: /claude-task-master/scripts/modules/config-manager.js"]
        I34["IMPORT: ./task-manager/list-tasks.js, FROM: /claude-task-master/scripts/modules/task-manager/list-tasks.js"]
        I35["IMPORT: ../utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        I36["IMPORT: ../task-manager.js, FROM: /claude-task-master/scripts/modules/task-manager.js"]
        I37["IMPORT: ./generate-task-files.js, FROM: /claude-task-master/scripts/modules/task-manager/generate-task-files.js"]
        I38["IMPORT: cli-table3, FROM: cli-table3"]
        I39["IMPORT: fuse.js, FROM: fuse.js"]
        I40["IMPORT: ../ai-services-unified.js, FROM: /claude-task-master/scripts/modules/ai-services-unified.js"]
        I41["IMPORT: ../config-manager.js, FROM: /claude-task-master/scripts/modules/config-manager.js"]
        I42["IMPORT: ../prompt-manager.js, FROM: /claude-task-master/scripts/modules/prompt-manager.js"]
        I43["IMPORT: ../utils/contextGatherer.js, FROM: /claude-task-master/scripts/modules/utils/contextGatherer.js"]
        I44["IMPORT: readline, FROM: readline"]
        I45["IMPORT: ../../../src/constants/providers.js, FROM: /claude-task-master/src/constants/providers.js"]
        I46["IMPORT: ../../../src/utils/path-utils.js, FROM: /claude-task-master/src/utils/path-utils.js"]
        I47["IMPORT: ../utils/fuzzyTaskSearch.js, FROM: /claude-task-master/scripts/modules/utils/fuzzyTaskSearch.js"]
        I48["IMPORT: ../ui.js, FROM: /claude-task-master/scripts/modules/ui.js"]
        I49["IMPORT: ./expand-task.js, FROM: /claude-task-master/scripts/modules/task-manager/expand-task.js"]
        I50["IMPORT: ../../../src/constants/paths.js, FROM: /claude-task-master/src/constants/paths.js"]
        I51["IMPORT: ../dependency-manager.js, FROM: /claude-task-master/scripts/modules/dependency-manager.js"]
        I52["IMPORT: ./find-next-task.js, FROM: /claude-task-master/scripts/modules/task-manager/find-next-task.js"]
        I53["IMPORT: ../../../mcp-server/src/tools/utils.js, FROM: /claude-task-master/mcp-server/src/tools/utils.js"]
        I54["IMPORT: https, FROM: https"]
        I55["IMPORT: http, FROM: http"]
        I56["IMPORT: ./task-exists.js, FROM: /claude-task-master/scripts/modules/task-manager/task-exists.js"]
        I57["IMPORT: inquirer, FROM: inquirer"]
        I58["IMPORT: cli-highlight, FROM: cli-highlight"]
        I59["IMPORT: ./analyze-task-complexity.js, FROM: /claude-task-master/scripts/modules/task-manager/analyze-task-complexity.js"]
        I60["IMPORT: ./update-single-task-status.js, FROM: /claude-task-master/scripts/modules/task-manager/update-single-task-status.js"]
        I61["IMPORT: ../../../src/constants/task-status.js, FROM: /claude-task-master/src/constants/task-status.js"]
        I62["IMPORT: ./models.js, FROM: /claude-task-master/scripts/modules/task-manager/models.js"]
        I63["IMPORT: ./task-manager/parse-prd.js, FROM: /claude-task-master/scripts/modules/task-manager/parse-prd.js"]
        I64["IMPORT: ./task-manager/update-tasks.js, FROM: /claude-task-master/scripts/modules/task-manager/update-tasks.js"]
        I65["IMPORT: ./task-manager/update-task-by-id.js, FROM: /claude-task-master/scripts/modules/task-manager/update-task-by-id.js"]
        I66["IMPORT: ./task-manager/generate-task-files.js, FROM: /claude-task-master/scripts/modules/task-manager/generate-task-files.js"]
        I67["IMPORT: ./task-manager/set-task-status.js, FROM: /claude-task-master/scripts/modules/task-manager/set-task-status.js"]
        I68["IMPORT: ./task-manager/update-single-task-status.js, FROM: /claude-task-master/scripts/modules/task-manager/update-single-task-status.js"]
        I69["IMPORT: ./task-manager/expand-task.js, FROM: /claude-task-master/scripts/modules/task-manager/expand-task.js"]
        I70["IMPORT: ./task-manager/expand-all-tasks.js, FROM: /claude-task-master/scripts/modules/task-manager/expand-all-tasks.js"]
        I71["IMPORT: ./task-manager/clear-subtasks.js, FROM: /claude-task-master/scripts/modules/task-manager/clear-subtasks.js"]
        I72["IMPORT: ./task-manager/add-task.js, FROM: /claude-task-master/scripts/modules/task-manager/add-task.js"]
        I73["IMPORT: ./task-manager/analyze-task-complexity.js, FROM: /claude-task-master/scripts/modules/task-manager/analyze-task-complexity.js"]
        I74["IMPORT: ./task-manager/find-next-task.js, FROM: /claude-task-master/scripts/modules/task-manager/find-next-task.js"]
        I75["IMPORT: ./task-manager/add-subtask.js, FROM: /claude-task-master/scripts/modules/task-manager/add-subtask.js"]
        I76["IMPORT: ./task-manager/remove-subtask.js, FROM: /claude-task-master/scripts/modules/task-manager/remove-subtask.js"]
        I77["IMPORT: ./task-manager/update-subtask-by-id.js, FROM: /claude-task-master/scripts/modules/task-manager/update-subtask-by-id.js"]
        I78["IMPORT: ./task-manager/remove-task.js, FROM: /claude-task-master/scripts/modules/task-manager/remove-task.js"]
        I79["IMPORT: ./task-manager/task-exists.js, FROM: /claude-task-master/scripts/modules/task-manager/task-exists.js"]
        I80["IMPORT: ./task-manager/is-task-dependent.js, FROM: /claude-task-master/scripts/modules/task-manager/is-task-dependent.js"]
        I81["IMPORT: ./task-manager/response-language.js, FROM: /claude-task-master/scripts/modules/task-manager/response-language.js"]
        I82["IMPORT: ./task-manager/move-task.js, FROM: /claude-task-master/scripts/modules/task-manager/move-task.js"]
        I83["IMPORT: ./task-manager/migrate.js, FROM: /claude-task-master/scripts/modules/task-manager/migrate.js"]
        I84["IMPORT: ./task-manager/research.js, FROM: /claude-task-master/scripts/modules/task-manager/research.js"]
        I85["IMPORT: figlet, FROM: figlet"]
        I86["IMPORT: ora, FROM: ora"]
        I87["IMPORT: gradient-string, FROM: gradient-string"]
        I88["IMPORT: ../../src/constants/task-status.js, FROM: /claude-task-master/src/constants/task-status.js"]
        I89["IMPORT: ../../src/utils/getVersion.js, FROM: /claude-task-master/src/utils/getVersion.js"]
        I90["IMPORT: dotenv, FROM: dotenv"]
        I91["IMPORT: ./utils/git-utils.js, FROM: /claude-task-master/scripts/modules/utils/git-utils.js"]
    end
    subgraph SharedDependencies["Shared-Infrastructure-Dependencies"]
        D1["DEP: Path resolution"]
        D2["DEP: File system"]
        D3["DEP: FastMCP"]
    end
    subgraph SharedParameters["Shared-Infrastructure-Parameters"]
        P1["PARAM: {Object} args - Command arguments"]
        P2["PARAM: {string} args.tasksJsonPath - Explicit path to the tasks.json file."]
        P3["PARAM: {string|number} args.id - Task ID to add dependency to"]
        P4["PARAM: {string|number} args.dependsOn - Task ID that will become a dependency"]
        P5["PARAM: {string} args.tag - Tag for the task (optional)"]
        P6["PARAM: {string} args.projectRoot - Project root path (for MCP/env fallback)"]
        P7["PARAM: {Object} log - Logger object"]
        P8["PARAM: {Object} args - Function arguments"]
        P9["PARAM: {string} args.id - Parent task ID"]
        P10["PARAM: {string} [args.taskId] - Existing task ID to convert to subtask (optional)"]
        P11["PARAM: {string} [args.title] - Title for new subtask (when creating a new subtask)"]
        P12["PARAM: {string} [args.description] - Description for new subtask"]
        P13["PARAM: {string} [args.details] - Implementation details for new subtask"]
        P14["PARAM: {string} [args.status] - Status for new subtask (default: 'pending')"]
        P15["PARAM: {string} [args.dependencies] - Comma-separated list of dependency IDs"]
        P16["PARAM: {boolean} [args.skipGenerate] - Skip regenerating task files"]
        P17["PARAM: {string} [args.projectRoot] - Project root directory"]
        P18["PARAM: {string} [args.tag] - Tag for the task"]
        P19["PARAM: {string} args.name - Name of the new tag to create"]
        P20["PARAM: {string} [args.copyFromTag] - Specific tag to copy tasks from"]
        P21["PARAM: {string} [args.description] - Optional description for the tag"]
        P22["PARAM: {string} [args.tasksJsonPath] - Path to the tasks.json file (resolved by tool)"]
        P23["PARAM: {string} [args.projectRoot] - Project root path"]
        P24["PARAM: {Object} context - Additional context (session)"]
        P25["PARAM: {string} [args.prompt] - Description of the task to add (required if not using manual fields)"]
        P26["PARAM: {string} [args.title] - Task title (for manual task creation)"]
        P27["PARAM: {string} [args.description] - Task description (for manual task creation)"]
        P28["PARAM: {string} [args.details] - Implementation details (for manual task creation)"]
        P29["PARAM: {string} [args.testStrategy] - Test strategy (for manual task creation)"]
        P30["PARAM: {string} [args.dependencies] - Comma-separated list of task IDs this task depends on"]
        P31["PARAM: {string} [args.tag] - Tag for the task (optional)"]
        P32["PARAM: {string} args.outputPath - Explicit absolute path to save the report."]
        P33["PARAM: {string|number} [args.threshold] - Minimum complexity score to recommend expansion (1-10)"]
        P34["PARAM: {boolean} [args.research] - Use Perplexity AI for research-backed complexity analysis"]
        P35["PARAM: {string} [args.ids] - Comma-separated list of task IDs to analyze"]
        P36["PARAM: {number} [args.from] - Starting task ID in a range to analyze"]
        P37["PARAM: {number} [args.to] - Ending task ID in a range to analyze"]
        P38["PARAM: {string} [args.projectRoot] - Project root path."]
        P39["PARAM: {Object} [context.session] - MCP session object"]
        P40["PARAM: {string} [args.id] - Task IDs (comma-separated) to clear subtasks from"]
        P41["PARAM: {boolean} [args.all] - Clear subtasks from all tasks"]
        P42["PARAM: {string} [args.tag] - Tag context to operate on (defaults to current active tag)"]
        P43["PARAM: {string} [args.projectRoot] - Project root path (for MCP/env fallback)"]
        P44["PARAM: {Object} args - Command arguments containing reportPath."]
        P45["PARAM: {string} args.reportPath - Explicit path to the complexity report file."]
        P46["PARAM: {string} args.sourceName - Name of the source tag to copy from"]
        P47["PARAM: {string} args.targetName - Name of the new tag to create"]
        P48["PARAM: {string} [args.description] - Optional description for the new tag"]
        P49["PARAM: {string} args.tasksJsonPath - Path to the tasks.json file (resolved by tool)"]
        P50["PARAM: {string} [args.branchName] - Git branch name (optional, uses current branch if not provided)"]
        P51["PARAM: {boolean} [args.copyFromCurrent] - Copy tasks from current tag"]
        P52["PARAM: {string} [args.copyFromTag] - Copy tasks from specific tag"]
        P53["PARAM: {string} [args.description] - Custom description for the tag"]
        P54["PARAM: {boolean} [args.autoSwitch] - Automatically switch to the new tag"]
        P55["PARAM: {string} args.name - Name of the tag to delete"]
        P56["PARAM: {number|string} [args.num] - Number of subtasks to generate"]
        P57["PARAM: {boolean} [args.research] - Enable research-backed subtask generation"]
        P58["PARAM: {string} [args.prompt] - Additional context to guide subtask generation"]
        P59["PARAM: {boolean} [args.force] - Force regeneration of subtasks for tasks that already have them"]
        P60["PARAM: {Object} log - Logger object from FastMCP"]
        P61["PARAM: {Object} context - Context object containing session"]
        P62["PARAM: {string} args.id - The ID of the task to expand."]
        P63["PARAM: {number|string} [args.num] - Number of subtasks to generate."]
        P64["PARAM: {boolean} [args.research] - Enable research role for subtask generation."]
        P65["PARAM: {string} [args.prompt] - Additional context to guide subtask generation."]
        P66["PARAM: {boolean} [args.force] - Force expansion even if subtasks exist."]
        P67["PARAM: {string} [args.projectRoot] - Project root directory."]
        P68["PARAM: {Object} [context.session] - MCP Session object"]
        P69["PARAM: {string} args.projectRoot - Project root directory"]
        P70["PARAM: {string} args.tag - Tag for the project"]
        P71["PARAM: {Object} args - Command arguments containing tasksJsonPath and outputDir."]
        P72["PARAM: {string} args.tasksJsonPath - Path to the tasks.json file."]
        P73["PARAM: {string} args.outputDir - Path to the output directory."]
        P74["PARAM: {Object} log - Logger object."]
        P75["PARAM: {object} args - Arguments containing initialization options (addAliases, initGit, storeTasksInGit, skipInstall, yes, projectRoot, rules)"]
        P76["PARAM: {object} log - The FastMCP logger instance."]
        P77["PARAM: {object} context - The context object, must contain { session }."]
        P78["PARAM: {Object} args - Command arguments (now expecting tasksJsonPath explicitly)."]
        P79["PARAM: {string} args.reportPath - Path to the report file."]
        P80["PARAM: {string} args.status - Status of the task."]
        P81["PARAM: {boolean} args.withSubtasks - Whether to include subtasks."]
        P82["PARAM: {Object} args - Arguments containing provider flags"]
        P83["PARAM: {Object} args - Arguments containing role-specific model IDs"]
        P84["PARAM: {Object} context - Context object with session, mcpLog, projectRoot"]
        P85["PARAM: {Object} args - Arguments passed by the MCP tool"]
        P86["PARAM: {Object} log - MCP logger"]
        P87["PARAM: {Object} context - MCP context (contains session)"]
        P88["PARAM: {string} args.tasksJsonPath - Explicit path to the tasks.json file"]
        P89["PARAM: {string} args.sourceId - ID of the task/subtask to move (e.g., '5' or '5.2' or '5,6,7')"]
        P90["PARAM: {string} args.destinationId - ID of the destination (e.g., '7' or '7.3' or '7,8,9')"]
        P91["PARAM: {string} args.file - Alternative path to the tasks.json file"]
        P92["PARAM: {boolean} args.generateFiles - Whether to regenerate task files after moving (default: true)"]
        P93["PARAM: {Object} args - Command arguments containing projectRoot, input, output, numTasks options."]
        P94["PARAM: {string} args.input - Path to the input PRD file."]
        P95["PARAM: {string} args.output - Path to the output directory."]
        P96["PARAM: {string} args.numTasks - Number of tasks to generate."]
        P97["PARAM: {boolean} args.force - Whether to force parsing."]
        P98["PARAM: {boolean} args.append - Whether to append to the output file."]
        P99["PARAM: {boolean} args.research - Whether to use research mode."]
        P100["PARAM: {string} args.tag - Tag context for organizing tasks into separate task lists."]
        P101["PARAM: {Object} context - Context object containing session data."]
        P102["PARAM: {string|number} args.id - Task ID to remove dependency from"]
        P103["PARAM: {string|number} args.dependsOn - Task ID to remove as a dependency"]
        P104["PARAM: {string} args.id - Subtask ID in format \parentId.subtaskId\ (required)"]
        P105["PARAM: {boolean} [args.convert] - Whether to convert the subtask to a standalone task"]
        P106["PARAM: {string} args.id - The ID(s) of the task(s) or subtask(s) to remove (comma-separated for multiple)."]
        P107["PARAM: {string} args.oldName - Current name of the tag to rename"]
        P108["PARAM: {string} args.newName - New name for the tag"]
        P109["PARAM: {string} args.query - Research query/prompt (required)"]
        P110["PARAM: {string} [args.taskIds] - Comma-separated list of task/subtask IDs for context"]
        P111["PARAM: {string} [args.filePaths] - Comma-separated list of file paths for context"]
        P112["PARAM: {string} [args.customContext] - Additional custom context text"]
        P113["PARAM: {string} [args.saveTo] - Automatically save to task/subtask ID (e.g., \15\ or \15.2\)"]
        P114["PARAM: {\add\|\remove\} args.action - Action to perform: add or remove rules"]
        P115["PARAM: {string[]} args.profiles - List of profiles to add or remove"]
        P116["PARAM: {string} args.projectRoot - Absolute path to the project root"]
        P117["PARAM: {string} args.id - Comma-separated list of task IDs to scope down"]
        P118["PARAM: {string} [args.prompt] - Custom prompt for scoping adjustments"]
        P119["PARAM: {string} args.projectRoot - Project root path"]
        P120["PARAM: {string} [args.tag] - Tag for the task context (optional)"]
        P121["PARAM: {string} args.id - Comma-separated list of task IDs to scope up"]
        P122["PARAM: {Object} args - Command arguments containing id, status, tasksJsonPath, and projectRoot."]
        P123["PARAM: {string} args.id - The ID of the task to update."]
        P124["PARAM: {string} args.status - The new status to set for the task."]
        P125["PARAM: {Object} args - Command arguments."]
        P126["PARAM: {string} args.id - Task ID to show."]
        P127["PARAM: {string} [args.file] - Optional path to the tasks file (passed to findTasksPath)."]
        P128["PARAM: {string} [args.status] - Optional status to filter subtasks by."]
        P129["PARAM: {string} args.projectRoot - Absolute path to the project root directory (already normalized by tool)."]
        P130["PARAM: {Object} args - Command arguments containing id, prompt, useResearch, tasksJsonPath, and projectRoot."]
        P131["PARAM: {string} args.id - Subtask ID in format \parent.sub\."]
        P132["PARAM: {string} args.prompt - Information to append to the subtask."]
        P133["PARAM: {boolean} [args.research] - Whether to use research role."]
        P134["PARAM: {string} args.id - Task ID (or subtask ID like \1.2\)."]
        P135["PARAM: {string} args.prompt - New information/context prompt."]
        P136["PARAM: {boolean} [args.append] - Whether to append timestamped information instead of full update."]
        P137["PARAM: {Object} args - Command arguments containing projectRoot, from, prompt, research options."]
        P138["PARAM: {string} args.from - The ID of the task to update."]
        P139["PARAM: {string} args.prompt - The prompt to update the task with."]
        P140["PARAM: {string} args.name - Name of the tag to switch to"]
        P141["PARAM: {Error | object | any} error - The error object."]
        P142["PARAM: {string} providerName - The name of the provider (lowercase)."]
        P143["PARAM: {object|null} session - Optional MCP session object."]
        P144["PARAM: {string|null} projectRoot - Optional project root path for .env fallback."]
        P145["PARAM: {function} providerApiFn - The specific provider function to call (e.g., generateAnthropicText)."]
        P146["PARAM: {object} callParams - Parameters object for the provider function."]
        P147["PARAM: {string} providerName - Name of the provider (for logging)."]
        P148["PARAM: {string} modelId - Specific model ID (for logging)."]
        P149["PARAM: {string} attemptRole - The role being attempted (for logging)."]
        P150["PARAM: {string} serviceType - Type of service ('generateText', 'streamText', 'generateObject')."]
        P151["PARAM: {object} params - Original parameters passed to the service function."]
        P152["PARAM: {string} params.role - The initial client role."]
        P153["PARAM: {string} [params.projectRoot] - Optional project root path."]
        P154["PARAM: {string} params.commandName - Name of the command invoking the service."]
        P155["PARAM: {string} params.outputType - 'cli' or 'mcp'."]
        P156["PARAM: {string} [params.systemPrompt] - Optional system prompt."]
        P157["PARAM: {string} [params.prompt] - The prompt for the AI."]
        P158["PARAM: {string} [params.schema] - The Zod schema for the expected object."]
        P159["PARAM: {string} [params.objectName] - Name for object/tool."]
        P160["PARAM: {object} params - Parameters for the service call."]
        P161["PARAM: {string} params.role - The initial client role ('main', 'research', 'fallback')."]
        P162["PARAM: {string} params.prompt - The prompt for the AI."]
        P163["PARAM: {import('zod').ZodSchema} params.schema - The Zod schema for the expected object."]
        P164["PARAM: {object} params - Telemetry parameters."]
        P165["PARAM: {string} params.userId - Unique user identifier."]
        P166["PARAM: {string} params.commandName - The command that triggered the AI call."]
        P167["PARAM: {string} params.providerName - The AI provider used (e.g., 'openai')."]
        P168["PARAM: {string} params.modelId - The specific AI model ID used."]
        P169["PARAM: {number} params.inputTokens - Number of input tokens."]
        P170["PARAM: {number} params.outputTokens - Number of output tokens."]
        P171["PARAM: {string|null} explicitRoot - Optional explicit path to the project root."]
        P172["PARAM: {boolean} forceReload - Force reloading the config file."]
        P173["PARAM: {string} role - The role ('main', 'research', 'fallback')."]
        P174["PARAM: {string} providerName - The name of the provider (e.g., 'openai', 'anthropic')."]
        P175["PARAM: {string|null} projectRoot - Optional explicit path to the project root."]
        P176["PARAM: {string|null} explicitRoot - Optional explicit path to the project root"]
        P177["PARAM: {string} tasksPath - Path to the tasks.json file"]
        P178["PARAM: {number|string} taskId - ID of the task to add dependency to"]
        P179["PARAM: {number|string} dependencyId - ID of the task to add as dependency"]
        P180["PARAM: {Object} context - Context object containing projectRoot and tag information"]
        P181["PARAM: {string} [context.projectRoot] - Project root path"]
        P182["PARAM: {string} [context.tag] - Tag for the task"]
        P183["PARAM: {number|string} taskId - ID of the task to remove dependency from"]
        P184["PARAM: {number|string} dependencyId - ID of the task to remove as dependency"]
        P185["PARAM: {Array} tasks - Array of all tasks"]
        P186["PARAM: {number|string} taskId - ID of task to check"]
        P187["PARAM: {Array} chain - Chain of dependencies to check"]
        P188["PARAM: {Object} tasksData - Tasks data object with tasks array"]
        P189["PARAM: {string} tasksPath - Path to tasks.json"]
        P190["PARAM: {Object} options - Options object, including context"]
        P191["PARAM: {Array} tasks - All tasks"]
        P192["PARAM: {Object} tasksData - The tasks data object with tasks array"]
        P193["PARAM: {string} tasksPath - Optional path to save the changes"]
        P194["PARAM: {string} projectRoot - Optional project root for tag context"]
        P195["PARAM: {string} tag - Optional tag for tag context"]
        P196["PARAM: {string} promptId - The prompt template ID"]
        P197["PARAM: {Object} variables - Variables to inject into the template"]
        P198["PARAM: {string} [variantKey] - Optional specific variant to use"]
        P199["PARAM: {string} projectName - Name of the project"]
        P200["PARAM: {string} projectRoot - The project root path"]
        P201["PARAM: {Object} options - Export options"]
        P202["PARAM: {string} projectRoot - Path to the project root directory"]
        P203["PARAM: {Object} options - Options for syncing"]
        P204["PARAM: {boolean} options.withSubtasks - Include subtasks in the output (default: false)"]
        P205["PARAM: {string} options.status - Filter by status (e.g., 'pending', 'done')"]
        P206["PARAM: {string} options.tasksPath - Custom path to tasks.json"]
        P207["PARAM: {number|string} parentId - ID of the parent task"]
        P208["PARAM: {number|string|null} existingTaskId - ID of an existing task to convert to subtask (optional)"]
        P209["PARAM: {Object} newSubtaskData - Data for creating a new subtask (used if existingTaskId is null)"]
        P210["PARAM: {boolean} generateFiles - Whether to regenerate task files after adding the subtask"]
        P211["PARAM: {string} context.projectRoot - Project root path"]
        P212["PARAM: {string} context.tag - Tag for the task"]
        P213["PARAM: {Object} rawData - The raw tagged data object"]
        P214["PARAM: {string} prompt - Description of the task to add (required for AI-driven creation)"]
        P215["PARAM: {Array} dependencies - Task dependencies"]
        P216["PARAM: {string} priority - Task priority"]
        P217["PARAM: {function} reportProgress - Function to report progress to MCP server (optional)"]
        P218["PARAM: {Object} mcpLog - MCP logger object (optional)"]
        P219["PARAM: {Object} session - Session object from MCP server (optional)"]
        P220["PARAM: {string} outputFormat - Output format (text or json)"]
        P221["PARAM: {Object} customEnv - Custom environment variables (optional) - Note: AI params override deprecated"]
        P222["PARAM: {Object} manualTaskData - Manual task data (optional, for direct task creation without AI)"]
        P223["PARAM: {boolean} useResearch - Whether to use the research model (passed to unified service)"]
        P224["PARAM: {Object} context - Context object containing session and potentially projectRoot"]
        P225["PARAM: {string} [context.projectRoot] - Project root path (for MCP/env fallback)"]
        P226["PARAM: {string} [context.commandName] - The name of the command being executed (for telemetry)"]
        P227["PARAM: {string} [context.outputType] - The output type ('cli' or 'mcp', for telemetry)"]
        P228["PARAM: {string} [context.tag] - Tag for the task (optional)"]
        P229["PARAM: {Array} tasks - All tasks from tasks.json"]
        P230["PARAM: {number} taskId - ID of the task to analyze"]
        P231["PARAM: {Set} visited - Set of already visited task IDs"]
        P232["PARAM: {Map} depthMap - Map of task ID to its depth in the graph"]
        P233["PARAM: {number} depth - Current depth in the recursion"]
        P234["PARAM: {Object} tasksData - The tasks data object."]
        P235["PARAM: {string} [gatheredContext] - The gathered context for the analysis."]
        P236["PARAM: {string} options.file - Path to tasks file"]
        P237["PARAM: {string} options.output - Path to report output file"]
        P238["PARAM: {string|number} [options.threshold] - Complexity threshold"]
        P239["PARAM: {boolean} [options.research] - Use research role"]
        P240["PARAM: {string} [options.projectRoot] - Project root path (for MCP/env fallback)."]
        P241["PARAM: {string} [options.tag] - Tag for the task"]
        P242["PARAM: {string} [options.id] - Comma-separated list of task IDs to analyze specifically"]
        P243["PARAM: {number} [options.from] - Starting task ID in a range to analyze"]
        P244["PARAM: {number} [options.to] - Ending task ID in a range to analyze"]
        P245["PARAM: {Object} [options._filteredTasksData] - Pre-filtered task data (internal use)"]
        P246["PARAM: {number} [options._originalTaskCount] - Original task count (internal use)"]
        P247["PARAM: {Object} context - Context object, potentially containing session and mcpLog"]
        P248["PARAM: {Object} [context.session] - Session object from MCP server (optional)"]
        P249["PARAM: {Object} [context.mcpLog] - MCP logger object (optional)"]
        P250["PARAM: {function} [context.reportProgress] - Deprecated: Function to report progress (ignored)"]
        P251["PARAM: {string} taskIds - Task IDs to clear subtasks from"]
        P252["PARAM: {Object} context - Context object containing projectRoot and tag"]
        P253["PARAM: {number} [numSubtasks] - Optional: Target number of subtasks per task."]
        P254["PARAM: {Object} context - Context object containing session and mcpLog."]
        P255["PARAM: {Object} [context.session] - Session object from MCP."]
        P256["PARAM: {Object} [context.mcpLog] - MCP logger object."]
        P257["PARAM: {string} [context.complexityReportPath] - Path to the complexity report file"]
        P258["PARAM: {string} text - Response text from AI."]
        P259["PARAM: {number} startId - Starting subtask ID expected."]
        P260["PARAM: {number} expectedCount - Expected number of subtasks."]
        P261["PARAM: {number} parentTaskId - Parent task ID for context."]
        P262["PARAM: {Object} logger - Logging object (mcpLog or console log)."]
        P263["PARAM: {number} taskId - Task ID to expand"]
        P264["PARAM: {number | null | undefined} [numSubtasks] - Optional: Explicit target number of subtasks. If null/undefined, check complexity report or config default."]
        P265["PARAM: {string} outputDir - Output directory for task files"]
        P266["PARAM: {Object} options - Additional options (mcpLog for MCP mode, projectRoot, tag)"]
        P267["PARAM: {string} [options.projectRoot] - Project root path"]
        P268["PARAM: {Object} [options.mcpLog] - MCP logger object"]
        P269["PARAM: {Array} allTasks - Array of all tasks"]
        P270["PARAM: {Object} task - The task to check"]
        P271["PARAM: {number} targetTaskId - The task ID to check dependency against"]
        P272["PARAM: {string} statusFilter - Filter by status (single status or comma-separated list, e.g., 'pending' or 'blocked,deferred')"]
        P273["PARAM: {string} reportPath - Path to the complexity report"]
        P274["PARAM: {boolean} withSubtasks - Whether to show subtasks"]
        P275["PARAM: {Object} context - Context object (required)"]
        P276["PARAM: {Object} data - Full tasks data"]
        P277["PARAM: {Array} filteredTasks - Filtered tasks array"]
        P278["PARAM: {Object} stats - Statistics object"]
        P279["PARAM: {Object} options - Migration options"]
        P280["PARAM: {string} projectRoot - Project root directory"]
        P281["PARAM: {Array} migrationPlan - List of files to migrate"]
        P282["PARAM: {string} baseURL - The base URL for the Ollama API (e.g., \http://localhost:11434/api\)"]
        P283["PARAM: {Object} [options] - Options for the operation"]
        P284["PARAM: {Object} [options.session] - Session object containing environment variables (for MCP)"]
        P285["PARAM: {Function} [options.mcpLog] - MCP logger object (for MCP)"]
        P286["PARAM: {string} [options.projectRoot] - Project root directory"]
        P287["PARAM: {string} role - The model role to update ('main', 'research', 'fallback')"]
        P288["PARAM: {string} modelId - The model ID to set for the role"]
        P289["PARAM: {string} [options.providerHint] - Provider hint if already determined ('openrouter' or 'ollama')"]
        P290["PARAM: {string} tasksPath - Path to tasks.json file"]
        P291["PARAM: {string} sourceId - ID(s) of the task/subtask to move (e.g., '5' or '5.2' or '5,6,7')"]
        P292["PARAM: {string} destinationId - ID(s) of the destination (e.g., '7' or '7.3' or '7,8,9')"]
        P293["PARAM: {boolean} generateFiles - Whether to regenerate task files after moving"]
        P294["PARAM: {Object} options - Additional options"]
        P295["PARAM: {string} options.projectRoot - Project root directory for tag resolution"]
        P296["PARAM: {string} options.tag - Explicit tag to use (optional)"]
        P297["PARAM: {string} prdPath - Path to the PRD file"]
        P298["PARAM: {number} numTasks - Number of tasks to generate"]
        P299["PARAM: {Object} [options.reportProgress] - Function to report progress (optional, likely unused)."]
        P300["PARAM: {Object} [options.mcpLog] - MCP logger object (optional)."]
        P301["PARAM: {Object} [options.session] - Session object from MCP server (optional)."]
        P302["PARAM: {string} [options.tag] - Target tag for task generation."]
        P303["PARAM: {string} subtaskId - ID of the subtask to remove in format \"parentId.subtaskId\""]
        P304["PARAM: {boolean} convertToTask - Whether to convert the subtask to a standalone task"]
        P305["PARAM: {boolean} generateFiles - Whether to regenerate task files after removing the subtask"]
        P306["PARAM: {string} tasksPath - Path to the tasks file"]
        P307["PARAM: {string} taskIds - Comma-separated string of task/subtask IDs to remove (e.g., '5,6.1,7')"]
        P308["PARAM: {string} query - Research query/prompt"]
        P309["PARAM: {Object} options - Research options"]
        P310["PARAM: {Array<string>} [options.taskIds] - Task/subtask IDs for context"]
        P311["PARAM: {Array<string>} [options.filePaths] - File paths for context"]
        P312["PARAM: {string} [options.customContext] - Additional custom context"]
        P313["PARAM: {boolean} [options.includeProjectTree] - Include project file tree"]
        P314["PARAM: {string} [options.detailLevel] - Detail level: 'low', 'medium', 'high'"]
        P315["PARAM: {boolean} [options.saveToFile] - Whether to save results to file (MCP mode)"]
        P316["PARAM: {Object} [context] - Execution context"]
        P317["PARAM: {Object} [context.mcpLog] - MCP logger object"]
        P318["PARAM: {string} [context.commandName] - Command name for telemetry"]
        P319["PARAM: {string} [context.outputType] - Output type ('cli' or 'mcp')"]
        P320["PARAM: {string} [outputFormat] - Output format ('text' or 'json')"]
        P321["PARAM: {boolean} [allowFollowUp] - Whether to allow follow-up questions (default: true)"]
        P322["PARAM: {Object} tokenBreakdown - Token breakdown from context gatherer"]
        P323["PARAM: {number} systemPromptTokens - System prompt token count"]
        P324["PARAM: {number} userPromptTokens - User prompt token count"]
        P325["PARAM: {string} text - Raw research result text"]
        P326["PARAM: {string} result - AI research result"]
        P327["PARAM: {string} query - Original query"]
        P328["PARAM: {string} detailLevel - Detail level used"]
        P329["PARAM: {Object} tokenBreakdown - Detailed token usage"]
        P330["PARAM: {Object} originalOptions - Original research options"]
        P331["PARAM: {Object} context - Execution context"]
        P332["PARAM: {string} outputFormat - Output format"]
        P333["PARAM: {Object} logFn - Logger function"]
        P334["PARAM: {string} initialQuery - Initial query for context"]
        P335["PARAM: {string} initialResult - Initial AI result for context"]
        P336["PARAM: {Array} conversationHistory - Array of conversation exchanges"]
        P337["PARAM: {string} initialQuery - The initial query for metadata"]
        P338["PARAM: {string} strength - The strength level to validate"]
        P339["PARAM: {Object} task - The task to analyze"]
        P340["PARAM: {Object} context - Context containing projectRoot, tag, session"]
        P341["PARAM: {number} taskId - Task ID to look up"]
        P342["PARAM: {Object} context - Context containing projectRoot, tag"]
        P343["PARAM: {Object} task - The updated task object"]
        P344["PARAM: {string} direction - Direction of scope change (up/down) for logging"]
        P345["PARAM: {string} strength - Strength level ('light', 'regular', 'heavy')"]
        P346["PARAM: {number|null} originalComplexity - Original complexity score for smarter adjustments"]
        P347["PARAM: {Object} task - The task to adjust"]
        P348["PARAM: {string} direction - 'up' or 'down'"]
        P349["PARAM: {string} strength - 'light', 'regular', or 'heavy'"]
        P350["PARAM: {string} customPrompt - Optional custom instructions"]
        P351["PARAM: {Object} context - Context object with projectRoot, tag, etc."]
        P352["PARAM: {Array<number>} taskIds - Array of task IDs to scope up"]
        P353["PARAM: {string} outputFormat - Output format ('text' or 'json')"]
        P354["PARAM: {Array<number>} taskIds - Array of task IDs to scope down"]
        P355["PARAM: {string} taskIdInput - Task ID(s) to update"]
        P356["PARAM: {string} newStatus - New status"]
        P357["PARAM: {Object} options - Additional options (mcpLog for MCP mode, projectRoot for tag resolution)"]
        P358["PARAM: {string} [options.tag] - Optional tag to override current tag resolution"]
        P359["PARAM: {string} [options.mcpLog] - MCP logger object"]
        P360["PARAM: {string} tagName - Name of the new tag to create"]
        P361["PARAM: {Object} options - Options object"]
        P362["PARAM: {string} [options.copyFromTag] - Specific tag to copy tasks from"]
        P363["PARAM: {string} [options.description] - Optional description for the tag"]
        P364["PARAM: {Object} context - Context object containing session and projectRoot"]
        P365["PARAM: {string} tagName - Name of the tag to delete"]
        P366["PARAM: {Object} rawData - The raw tagged data"]
        P367["PARAM: {Object} context - Context object"]
        P368["PARAM: {string} tagName - Name of the tag to switch to"]
        P369["PARAM: {string} oldName - Current name of the tag"]
        P370["PARAM: {string} newName - New name for the tag"]
        P371["PARAM: {string} sourceName - Name of the source tag to copy from"]
        P372["PARAM: {string} targetName - Name of the new tag to create"]
        P373["PARAM: {string} [options.description] - Optional description for the new tag"]
        P374["PARAM: {string} branchName - Git branch name"]
        P375["PARAM: {string} tagName - Tag name to map to"]
        P376["PARAM: {string} branchName - Git branch name to create tag from"]
        P377["PARAM: {boolean} [options.copyFromCurrent] - Copy tasks from current tag"]
        P378["PARAM: {string} [options.copyFromTag] - Copy tasks from specific tag"]
        P379["PARAM: {string} [options.description] - Custom description for the tag"]
        P380["PARAM: {boolean} [options.autoSwitch] - Automatically switch to the new tag"]
        P381["PARAM: {boolean} [options.createIfMissing] - Create tag if it doesn't exist"]
        P382["PARAM: {boolean} [options.copyFromCurrent] - Copy tasks when creating new tag"]
        P383["PARAM: {Array} tasks - Array of tasks to search"]
        P384["PARAM: {string|number} taskId - ID of task or subtask to check"]
        P385["PARAM: {string} taskIdInput - Task ID to update"]
        P386["PARAM: {Object} data - Tasks data"]
        P387["PARAM: {boolean} showUi - Whether to show UI elements"]
        P388["PARAM: {string} subtaskId - ID of the subtask to update in format \"parentId.subtaskId\""]
        P389["PARAM: {string} prompt - Prompt for generating additional information"]
        P390["PARAM: {Object} [context.session] - Session object from MCP server."]
        P391["PARAM: {string} [context.projectRoot] - Project root path (needed for AI service key resolution)."]
        P392["PARAM: {number} expectedTaskId - The ID of the task expected."]
        P393["PARAM: {Function | Object} logFn - Logging function or MCP logger."]
        P394["PARAM: {boolean} isMCP - Flag indicating MCP context."]
        P395["PARAM: {number} taskId - ID of the task to update"]
        P396["PARAM: {string} prompt - Prompt for generating updated task information"]
        P397["PARAM: {string} [context.projectRoot] - Project root path."]
        P398["PARAM: {number} expectedCount - Expected number of tasks."]
        P399["PARAM: {Function | Object} logFn - The logging function or MCP log object."]
        P400["PARAM: {boolean} isMCP - Flag indicating if logFn is MCP logger."]
        P401["PARAM: {number} fromId - Task ID to start updating from"]
        P402["PARAM: {string} prompt - Prompt with new context"]
        P403["PARAM: {Object} data - Data object that may contain _migrationHappened flag"]
        P404["PARAM: {string} tagName - The tag name to display"]
        P405["PARAM: {Object} options - Display options"]
        P406["PARAM: {string} message - Message to display next to the spinner"]
        P407["PARAM: {Object} spinner - Spinner object to stop"]
        P408["PARAM: {Object} spinner - Spinner object to complete"]
        P409["PARAM: {string} message - Optional success message (defaults to current text)"]
        P410["PARAM: {Object} spinner - Spinner object to fail"]
        P411["PARAM: {string} message - Optional failure message (defaults to current text)"]
        P412["PARAM: {Object} spinner - Spinner object to warn"]
        P413["PARAM: {string} message - Optional warning message (defaults to current text)"]
        P414["PARAM: {Object} spinner - Spinner object to complete with info"]
        P415["PARAM: {string} message - Optional info message (defaults to current text)"]
        P416["PARAM: {number} percent - The completion percentage"]
        P417["PARAM: {number} length - The total length of the progress bar in characters"]
        P418["PARAM: {Object} statusBreakdown - Optional breakdown of non-complete statuses (e.g., {pending: 20, 'in-progress': 10})"]
        P419["PARAM: {string} status - Task status (e.g., \done\, \pending\, \in-progress\)"]
        P420["PARAM: {boolean} forTable - Whether the status is being displayed in a table"]
        P421["PARAM: {Array} dependencies - Array of dependency IDs"]
        P422["PARAM: {boolean} forConsole - Whether the output is for console display"]
        P423["PARAM: {Object|null} complexityReport - Optional pre-loaded complexity report"]
        P424["PARAM: {number} score - Complexity score (1-10)"]
        P425["PARAM: {string} str - The string to truncate"]
        P426["PARAM: {number} maxLength - Maximum length"]
        P427["PARAM: {string} complexityReportPath - Path to the complexity report file"]
        P428["PARAM: {string} tag - Optional tag to override current tag resolution"]
        P429["PARAM: {string|number} taskId - The ID of the task to display"]
        P430["PARAM: {string} [statusFilter] - Optional status to filter subtasks by"]
        P431["PARAM: {object} context - Context object containing projectRoot and tag"]
        P432["PARAM: {string} reportPath - Path to the complexity report file"]
        P433["PARAM: {Object} tasksData - Tasks data object containing tasks array"]
        P434["PARAM: {ConfigData} configData - The active configuration data."]
        P435["PARAM: {AvailableModel[]} allAvailableModels - Needed for SWE score tertiles."]
        P436["PARAM: {AvailableModel[]} availableModels - List of available models."]
        P437["PARAM: {object} telemetryData - The telemetry data object."]
        P438["PARAM: {string} outputType - 'cli' or 'mcp' (though typically only called for 'cli')."]
        P439["PARAM: {Array<string>} taskIds - Array of task IDs to display"]
        P440["PARAM: {string} complexityReportPath - Path to complexity report"]
        P441["PARAM: {string} statusFilter - Optional status filter for subtasks"]
        P442["PARAM: {Object} analysisData - Analysis data from ContextGatherer"]
        P443["PARAM: {string} semanticQuery - The original query used for semantic search"]
        P444["PARAM: {number} contextSize - Size of gathered context in characters"]
        P445["PARAM: {string} configPath - Path to the config.json file to update"]
        P446["PARAM: {string} key - The environment variable key."]
        P447["PARAM: {string} tagName - The tag name to slugify"]
        P448["PARAM: {string} basePath - The base file path (e.g., '.taskmaster/reports/task-complexity-report.json')"]
        P449["PARAM: {string|null} tag - The tag name (null, undefined, or 'master' uses base path)"]
        P450["PARAM: {string} level - The log level (debug, info, warn, error)"]
        P451["PARAM: {...any} args - Arguments to log"]
        P452["PARAM: {Object} data - The data object to check"]
        P453["PARAM: {Array} tasks - Array of tasks to normalize"]
        P454["PARAM: {string} filepath - Path to the JSON file"]
        P455["PARAM: {string} [projectRoot] - Optional project root for tag resolution (used by MCP)"]
        P456["PARAM: {string} [tag] - Optional tag to use instead of current tag resolution"]
        P457["PARAM: {string} tasksJsonPath - Path to the tasks.json file that was migrated"]
        P458["PARAM: {string} configPath - Path to the config.json file"]
        P459["PARAM: {string} statePath - Path where state.json should be created"]
        P460["PARAM: {string} tasksJsonPath - Path to the tasks.json file"]
        P461["PARAM: {Object} data - Data to write (can be resolved tag data or raw tagged data)"]
        P462["PARAM: {string} customPath - Optional custom path to the report"]
        P463["PARAM: {Object} report - The complexity report"]
        P464["PARAM: {number} taskId - The task ID to find"]
        P465["PARAM: {Array} tasks - The tasks array"]
        P466["PARAM: {string|number} taskId - The task ID to check"]
        P467["PARAM: {string|number} id - The task ID to format"]
        P468["PARAM: {string|number} taskId - The task ID to find"]
        P469["PARAM: {string} text - The text to truncate"]
        P470["PARAM: {number} maxLength - The maximum length"]
        P471["PARAM: {*} value - The value to check"]
        P472["PARAM: {string} subtaskId - Current subtask ID"]
        P473["PARAM: {Map} dependencyMap - Map of subtask IDs to their dependencies"]
        P474["PARAM: {Set} visited - Set of visited nodes"]
        P475["PARAM: {Set} recursionStack - Set of nodes in current recursion stack"]
        P476["PARAM: {string} str - The string to convert"]
        P477["PARAM: {string[]} args - Command line arguments to check"]
        P478["PARAM: {Array<Object>} telemetryArray - Array of telemetryData objects."]
        P479["PARAM: {string} overallCommandName - The name for the aggregated command."]
        P480["PARAM: {string} projectRoot - The project root directory (required)"]
        P481["PARAM: {string} options.projectRoot - The project root directory (required)"]
        P482["PARAM: {string} [options.tag] - Explicit tag to use"]
        P483["PARAM: {Object} data - The parsed tasks.json data (after migration)"]
        P484["PARAM: {string} tagName - The tag name to get tasks for"]
        P485["PARAM: {Object} data - The tasks.json data object"]
        P486["PARAM: {string} tagName - The tag name to set tasks for"]
        P487["PARAM: {Array} tasks - The tasks array to set"]
        P488["PARAM: {Array} tasks - Array of task objects"]
        P489["PARAM: {Object} tagObj - The tag object (e.g., data['master'])"]
        P490["PARAM: {Object} [opts] - Optional fields (e.g., description, skipUpdate)"]
        P491["PARAM: {string} [opts.description] - Description for the tag"]
        P492["PARAM: {boolean} [opts.skipUpdate] - If true, don't update the 'updated' timestamp"]
    end
    subgraph SharedConstants["Shared-Infrastructure-Constants"]
        C1["CONST: tasksPath, VALUE: tasksJsonPath"]
        C2["CONST: taskId, VALUE: id && id.includes && id.includes('.') ? id : parseInt(id, 10)"]
        C3["CONST: dependencyId, VALUE: dependsOn && dependsOn.includes && dependsOn.includes('.')"]
        C4["CONST: context, VALUE: { projectRoot, tag }"]
        C5["CONST: existingTaskId, VALUE: taskId ? parseInt(taskId, 10) : null"]
        C6["CONST: parentId, VALUE: parseInt(id, 10)"]
        C7["CONST: generateFiles, VALUE: !skipGenerate"]
        C8["CONST: result, VALUE: await addSubtask("]
        C9["CONST: newSubtaskData, VALUE: {"]
        C10["CONST: mcpLog, VALUE: createLogWrapper(log)"]
        C11["CONST: gitUtils, VALUE: await import("]
        C12["CONST: currentBranch, VALUE: await gitUtils.getCurrentBranch(projectRoot)"]
        C13["CONST: branchOptions, VALUE: {"]
        C14["CONST: result, VALUE: await createTagFromBranch("]
        C15["CONST: options, VALUE: {"]
        C16["CONST: result, VALUE: await createTag("]
        C17["CONST: isManualCreation, VALUE: args.title && args.description"]
        C18["CONST: taskDependencies, VALUE: Array.isArray(dependencies)"]
        C19["CONST: taskPriority, VALUE: priority || 'medium'"]
        C20["CONST: result, VALUE: await addTask("]
        C21["CONST: logWrapper, VALUE: createLogWrapper(log)"]
        C22["CONST: resolvedOutputPath, VALUE: outputPath"]
        C23["CONST: fromStr, VALUE: from !== undefined ? from : 'first'"]
        C24["CONST: toStr, VALUE: to !== undefined ? to : 'last'"]
        C25["CONST: coreOptions, VALUE: {"]
        C26["CONST: wasSilent, VALUE: isSilentMode()"]
        C27["CONST: analysisArray, VALUE: Array.isArray(coreResult.report.complexityAnalysis)"]
        C28["CONST: highComplexityTasks, VALUE: analysisArray.filter("]
        C29["CONST: mediumComplexityTasks, VALUE: analysisArray.filter("]
        C30["CONST: lowComplexityTasks, VALUE: analysisArray.filter("]
        C31["CONST: stats, VALUE: contextManager.getStats()"]
        C32["CONST: data, VALUE: readJSON(tasksPath, projectRoot, tag)"]
        C33["CONST: currentTag, VALUE: data.tag || tag"]
        C34["CONST: tasks, VALUE: data.tasks"]
        C35["CONST: updatedData, VALUE: readJSON(tasksPath, projectRoot, currentTag)"]
        C36["CONST: taskIdArray, VALUE: taskIds.split(',').map((id) => parseInt(id.trim(), 10))"]
        C37["CONST: clearedTasksCount, VALUE: taskIdArray.length"]
        C38["CONST: updatedTasks, VALUE: updatedData.tasks || []"]
        C39["CONST: taskSummary, VALUE: taskIdArray.map((id) => {"]
        C40["CONST: task, VALUE: updatedTasks.find((t) => t.id === id)"]
        C41["CONST: cacheKey, VALUE: `complexityReport:${reportPath}`"]
        C42["CONST: coreActionFn, VALUE: async () => {"]
        C43["CONST: report, VALUE: readComplexityReport(reportPath)"]
        C44["CONST: result, VALUE: await coreActionFn()"]
        C45["CONST: result, VALUE: await copyTag("]
        C46["CONST: result, VALUE: await deleteTag("]
        C47["CONST: numSubtasks, VALUE: num ? parseInt(num, 10) : undefined"]
        C48["CONST: useResearch, VALUE: research === true"]
        C49["CONST: additionalContext, VALUE: prompt || ''"]
        C50["CONST: forceFlag, VALUE: force === true"]
        C51["CONST: result, VALUE: await expandAllTasks("]
        C52["CONST: taskId, VALUE: id ? parseInt(id, 10) : null"]
        C53["CONST: data, VALUE: readJSON(tasksPath, projectRoot)"]
        C54["CONST: task, VALUE: data.tasks.find((t) => t.id === taskId)"]
        C55["CONST: hasExistingSubtasks, VALUE: task.subtasks && task.subtasks.length > 0"]
        C56["CONST: originalTask, VALUE: JSON.parse(JSON.stringify(task))"]
        C57["CONST: subtasksCountBefore, VALUE: task.subtasks ? task.subtasks.length : 0"]
        C58["CONST: coreResult, VALUE: await expandTask("]
        C59["CONST: updatedData, VALUE: readJSON(tasksPath, projectRoot)"]
        C60["CONST: updatedTask, VALUE: updatedData.tasks.find((t) => t.id === taskId)"]
        C61["CONST: subtasksAdded, VALUE: updatedTask.subtasks"]
        C62["CONST: options, VALUE: { projectRoot, tag }"]
        C63["CONST: errorMessage, VALUE: 'tasksJsonPath is required but was not provided.'"]
        C64["CONST: errorMessage, VALUE: 'outputDir is required but was not provided.'"]
        C65["CONST: resolvedOutputDir, VALUE: outputDir"]
        C66["CONST: homeDir, VALUE: os.homedir()"]
        C67["CONST: targetDirectory, VALUE: args.projectRoot"]
        C68["CONST: originalCwd, VALUE: process.cwd()"]
        C69["CONST: result, VALUE: await initializeProject(options)"]
        C70["CONST: result, VALUE: await tags("]
        C71["CONST: tagsSummary, VALUE: result.tags.map((tag) => {"]
        C72["CONST: tasks, VALUE: tag.tasks || []"]
        C73["CONST: statusBreakdown, VALUE: tasks.reduce((acc, task) => {"]
        C74["CONST: status, VALUE: task.status || 'pending'"]
        C75["CONST: subtaskCounts, VALUE: tasks.reduce("]
        C76["CONST: subStatus, VALUE: subtask.status || 'pending'"]
        C77["CONST: statusFilter, VALUE: status || 'all'"]
        C78["CONST: withSubtasksFilter, VALUE: withSubtasks || false"]
        C79["CONST: coreListTasksAction, VALUE: async () => {"]
        C80["CONST: resultData, VALUE: listTasks("]
        C81["CONST: result, VALUE: await coreListTasksAction()"]
        C82["CONST: MODEL_ROLES, VALUE: ['main', 'research', 'fallback']"]
        C83["CONST: roleKey, VALUE: `set${role.charAt(0).toUpperCase() + role.slice(1)}`"]
        C84["CONST: providerHint, VALUE: getProviderHint(args)"]
        C85["CONST: customProviderFlags, VALUE: CUSTOM_PROVIDERS_ARRAY.filter("]
        C86["CONST: modelContext, VALUE: { session, mcpLog, projectRoot }"]
        C87["CONST: modelSetResult, VALUE: await handleModelSetting(args, modelContext)"]
        C88["CONST: generateFiles, VALUE: args.generateFiles !== false"]
        C89["CONST: result, VALUE: await moveTask("]
        C90["CONST: coreNextTaskAction, VALUE: async () => {"]
        C91["CONST: data, VALUE: readJSON(tasksJsonPath, projectRoot, tag)"]
        C92["CONST: complexityReport, VALUE: readComplexityReport(reportPath)"]
        C93["CONST: nextTask, VALUE: findNextTask(data.tasks, complexityReport)"]
        C94["CONST: isSubtask, VALUE: typeof nextTask.id === 'string' && nextTask.id.includes('.')"]
        C95["CONST: taskOrSubtask, VALUE: isSubtask ? 'subtask' : 'task'"]
        C96["CONST: additionalAdvice, VALUE: isSubtask"]
        C97["CONST: result, VALUE: await coreNextTaskAction()"]
        C98["CONST: outputPath, VALUE: outputArg"]
        C99["CONST: errorMsg, VALUE: `Input PRD file not found at resolved path: ${inputPath}`"]
        C100["CONST: outputDir, VALUE: path.dirname(outputPath)"]
        C101["CONST: errorMsg, VALUE: `Failed to create output directory ${outputDir}: ${error.message}`"]
        C102["CONST: result, VALUE: await parsePRD("]
        C103["CONST: successMsg, VALUE: `Successfully parsed PRD and generated tasks in ${result.tasksPath}`"]
        C104["CONST: convertToTask, VALUE: convert === true"]
        C105["CONST: result, VALUE: await removeSubtask("]
        C106["CONST: taskIdArray, VALUE: id.split(',').map((taskId) => taskId.trim())"]
        C107["CONST: invalidTasks, VALUE: taskIdArray.filter("]
        C108["CONST: result, VALUE: await removeTask(tasksJsonPath, id, {"]
        C109["CONST: result, VALUE: await renameTag("]
        C110["CONST: parsedTaskIds, VALUE: taskIds"]
        C111["CONST: parsedFilePaths, VALUE: filePaths"]
        C112["CONST: validDetailLevels, VALUE: ['low', 'medium', 'high']"]
        C113["CONST: researchOptions, VALUE: {"]
        C114["CONST: researchContext, VALUE: {"]
        C115["CONST: result, VALUE: await performResearch("]
        C116["CONST: isSubtask, VALUE: saveTo.includes('.')"]
        C117["CONST: researchContent, VALUE: `## Research Query: ${query.trim()}"]
        C118["CONST: tasksPath, VALUE: path.join("]
        C119["CONST: updateTaskById, VALUE: ("]
        C120["CONST: taskIdNum, VALUE: parseInt(saveTo, 10)"]
        C121["CONST: removalResults, VALUE: []"]
        C122["CONST: addResults, VALUE: []"]
        C123["CONST: installedProfiles, VALUE: getInstalledProfiles(projectRoot)"]
        C124["CONST: remainingProfiles, VALUE: installedProfiles.filter("]
        C125["CONST: profileConfig, VALUE: getRulesProfile(profile)"]
        C126["CONST: result, VALUE: removeProfileRules(projectRoot, profileConfig)"]
        C127["CONST: successes, VALUE: removalResults"]
        C128["CONST: skipped, VALUE: removalResults"]
        C129["CONST: errors, VALUE: removalResults.filter("]
        C130["CONST: withNotices, VALUE: removalResults.filter((r) => r.notice)"]
        C131["CONST: rulesDir, VALUE: profileConfig.rulesDir"]
        C132["CONST: profileRulesDir, VALUE: path.join(projectRoot, rulesDir)"]
        C133["CONST: profileDir, VALUE: profileConfig.profileDir"]
        C134["CONST: mcpConfig, VALUE: profileConfig.mcpConfig !== false"]
        C135["CONST: mcpPath, VALUE: mcpConfig && profileConfig.mcpConfigPath"]
        C136["CONST: mcpConfigCreated, VALUE: mcpConfig && mcpPath ? fs.existsSync(mcpPath) : undefined"]
        C137["CONST: rulesDirCreated, VALUE: fs.existsSync(profileRulesDir)"]
        C138["CONST: profileFolderCreated, VALUE: fs.existsSync("]
        C139["CONST: error, VALUE: failed > 0 ? `${failed} rule files failed to convert.` : null"]
        C140["CONST: resultObj, VALUE: {"]
        C141["CONST: successes, VALUE: addResults"]
        C142["CONST: errors, VALUE: addResults.filter((r) => r.error && !r.success)"]
        C143["CONST: taskIds, VALUE: id.split(',').map((taskId) => parseInt(taskId.trim(), 10))"]
        C144["CONST: result, VALUE: await scopeDownTask("]
        C145["CONST: result, VALUE: await scopeUpTask("]
        C146["CONST: errorMessage, VALUE: 'No task ID specified. Please provide a task ID to update.'"]
        C147["CONST: errorMessage, VALUE: 'No status specified. Please provide a new status value.'"]
        C148["CONST: taskId, VALUE: id"]
        C149["CONST: newStatus, VALUE: status"]
        C150["CONST: result, VALUE: {"]
        C151["CONST: nextResult, VALUE: await nextTaskDirect("]
        C152["CONST: tasksData, VALUE: readJSON(tasksJsonPath, projectRoot, tag)"]
        C153["CONST: taskIds, VALUE: id"]
        C154["CONST: returnData, VALUE: { ...task }"]
        C155["CONST: foundTasks, VALUE: []"]
        C156["CONST: notFoundIds, VALUE: []"]
        C157["CONST: taskData, VALUE: { ...task }"]
        C158["CONST: errorMessage, VALUE: 'Invalid subtask ID format. Must be in format \parentId.subtaskId\ (e.g., \5.2\).'"]
        C159["CONST: errorMessage, VALUE: 'No prompt specified. Please provide the information to append.'"]
        C160["CONST: subtaskId, VALUE: id"]
        C161["CONST: errorMessage, VALUE: `Invalid subtask ID type: ${typeof subtaskId}. Subtask ID must be a string or number.`"]
        C162["CONST: subtaskIdStr, VALUE: String(subtaskId)"]
        C163["CONST: errorMessage, VALUE: `Invalid subtask ID format: ${subtaskIdStr}. Subtask ID must be in format \parentId.subtaskId\ (e.g., \5.2\).`"]
        C164["CONST: coreResult, VALUE: await updateSubtaskById("]
        C165["CONST: message, VALUE: `Subtask ${id} or its parent task not found.`"]
        C166["CONST: successMessage, VALUE: `Successfully updated subtask with ID ${subtaskIdStr}`"]
        C167["CONST: errorMessage, VALUE: 'No prompt specified. Please provide a prompt with new information for the task update.'"]
        C168["CONST: errorMessage, VALUE: `Invalid task ID: ${id}. Task ID must be a positive integer or subtask ID (e.g., \5.2\).`"]
        C169["CONST: coreResult, VALUE: await updateTaskById("]
        C170["CONST: message, VALUE: `Task ${taskId} was not updated (likely already completed).`"]
        C171["CONST: successMessage, VALUE: `Successfully updated task with ID ${taskId} based on the prompt`"]
        C172["CONST: result, VALUE: await updateTasks("]
        C173["CONST: result, VALUE: await useTag("]
        C174["CONST: PROVIDERS, VALUE: {"]
        C175["CONST: providerRegistry, VALUE: ProviderRegistry.getInstance()"]
        C176["CONST: modelData, VALUE: MODEL_MAP[providerName].find((m) => m.id === modelId)"]
        C177["CONST: currency, VALUE: modelData.cost_per_1m_tokens.currency || 'USD'"]
        C178["CONST: currentTag, VALUE: getCurrentTag(projectRoot)"]
        C179["CONST: path, VALUE: require('path')"]
        C180["CONST: fs, VALUE: require('fs')"]
        C181["CONST: tasksData, VALUE: JSON.parse(fs.readFileSync(tasksPath, 'utf8'))"]
        C182["CONST: potentialTags, VALUE: Object.keys(tasksData).filter("]
        C183["CONST: MAX_RETRIES, VALUE: 2"]
        C184["CONST: INITIAL_RETRY_DELAY_MS, VALUE: 1000"]
        C185["CONST: errorMessage, VALUE: error.message?.toLowerCase() || ''"]
        C186["CONST: body, VALUE: JSON.parse(error.responseBody)"]
        C187["CONST: provider, VALUE: _getProvider(providerName)"]
        C188["CONST: envVarName, VALUE: provider.getRequiredApiKeyName()"]
        C189["CONST: apiKey, VALUE: resolveEnvVariable(envVarName, session, projectRoot)"]
        C190["CONST: fnName, VALUE: serviceType"]
        C191["CONST: result, VALUE: await provider[serviceType](callParams)"]
        C192["CONST: delay, VALUE: INITIAL_RETRY_DELAY_MS * 2 ** (retries - 1)"]
        C193["CONST: effectiveProjectRoot, VALUE: projectRoot || findProjectRoot()"]
        C194["CONST: userId, VALUE: getUserId(effectiveProjectRoot)"]
        C195["CONST: projectId, VALUE: getVertexProjectId(effectiveProjectRoot) ||"]
        C196["CONST: location, VALUE: getVertexLocation(effectiveProjectRoot) ||"]
        C197["CONST: credentialsPath, VALUE: resolveEnvVariable("]
        C198["CONST: messages, VALUE: []"]
        C199["CONST: responseLanguage, VALUE: getResponseLanguage(effectiveProjectRoot)"]
        C200["CONST: systemPromptWithLanguage, VALUE: `${systemPrompt} \\n\\n Always respond in ${responseLanguage}.`"]
        C201["CONST: callParams, VALUE: {"]
        C202["CONST: tagInfo, VALUE: _getTagInfo(effectiveProjectRoot)"]
        C203["CONST: cleanMessage, VALUE: _extractErrorMessage(error)"]
        C204["CONST: lowerCaseMessage, VALUE: cleanMessage.toLowerCase()"]
        C205["CONST: specificErrorMsg, VALUE: `Model '${modelId || 'unknown'}' via provider '${providerName || 'unknown'}' does not support the 'tool use' required..."]
        C206["CONST: defaults, VALUE: { outputType: 'cli' }"]
        C207["CONST: combinedParams, VALUE: { ...defaults, ...params }"]
        C208["CONST: defaults, VALUE: {"]
        C209["CONST: isMCP, VALUE: outputType === 'mcp'"]
        C210["CONST: timestamp, VALUE: new Date().toISOString()"]
        C211["CONST: totalTokens, VALUE: (inputTokens || 0) + (outputTokens || 0)"]
        C212["CONST: totalCost, VALUE: ((inputTokens || 0) / 1_000_000) * inputCost +"]
        C213["CONST: telemetryData, VALUE: {"]
        C214["CONST: __filename, VALUE: fileURLToPath(import.meta.url)"]
        C215["CONST: __dirname, VALUE: path.dirname(__filename)"]
        C216["CONST: supportedModelsRaw, VALUE: fs.readFileSync("]
        C217["CONST: DEFAULTS, VALUE: {"]
        C218["CONST: defaults, VALUE: DEFAULTS"]
        C219["CONST: hasProjectMarkers, VALUE: fs.existsSync(path.join(rootToUse, TASKMASTER_DIR)) ||"]
        C220["CONST: isLegacy, VALUE: configPath.endsWith(LEGACY_CONFIG_FILE)"]
        C221["CONST: rawData, VALUE: fs.readFileSync(configPath, 'utf-8')"]
        C222["CONST: parsedConfig, VALUE: JSON.parse(rawData)"]
        C223["CONST: hasTaskmasterDir, VALUE: fs.existsSync("]
        C224["CONST: hasLegacyMarker, VALUE: fs.existsSync("]
        C225["CONST: needsLoad, VALUE: !loadedConfig ||"]
        C226["CONST: newConfig, VALUE: _loadAndValidateConfig(explicitRoot)"]
        C227["CONST: BaseSettingsSchema, VALUE: z.object({"]
        C228["CONST: CommandSpecificSchema, VALUE: z.record("]
        C229["CONST: SettingsSchema, VALUE: BaseSettingsSchema.extend({"]
        C230["CONST: config, VALUE: getConfig(explicitRoot, forceReload)"]
        C231["CONST: settings, VALUE: getClaudeCodeSettings(explicitRoot, forceReload)"]
        C232["CONST: commandSpecific, VALUE: settings?.commandSpecific || {}"]
        C233["CONST: config, VALUE: getConfig(explicitRoot)"]
        C234["CONST: roleConfig, VALUE: config?.models?.[role]"]
        C235["CONST: val, VALUE: getGlobalConfig(explicitRoot).defaultSubtasks"]
        C236["CONST: parsedVal, VALUE: parseInt(val, 10)"]
        C237["CONST: val, VALUE: getGlobalConfig(explicitRoot).defaultNumTasks"]
        C238["CONST: roleConfig, VALUE: getModelConfigForRole(role, explicitRoot)"]
        C239["CONST: roleMaxTokens, VALUE: roleConfig.maxTokens"]
        C240["CONST: roleTemperature, VALUE: roleConfig.temperature"]
        C241["CONST: modelId, VALUE: roleConfig.modelId"]
        C242["CONST: providerName, VALUE: roleConfig.provider"]
        C243["CONST: providerModels, VALUE: MODEL_MAP[providerName]"]
        C244["CONST: modelDefinition, VALUE: providerModels.find((m) => m.id === modelId)"]
        C245["CONST: modelSpecificMaxTokens, VALUE: modelDefinition.max_tokens"]
        C246["CONST: openrouterDefault, VALUE: 32768"]
        C247["CONST: providersWithoutApiKeys, VALUE: ["]
        C248["CONST: keyMap, VALUE: {"]
        C249["CONST: providerKey, VALUE: providerName?.toLowerCase()"]
        C250["CONST: envVarName, VALUE: keyMap[providerKey]"]
        C251["CONST: apiKeyValue, VALUE: resolveEnvVariable(envVarName, session, projectRoot)"]
        C252["CONST: rootDir, VALUE: projectRoot || findProjectRoot()"]
        C253["CONST: mcpConfigPath, VALUE: path.join(rootDir, '.cursor', 'mcp.json')"]
        C254["CONST: mcpConfigRaw, VALUE: fs.readFileSync(mcpConfigPath, 'utf-8')"]
        C255["CONST: mcpConfig, VALUE: JSON.parse(mcpConfigRaw)"]
        C256["CONST: mcpEnv, VALUE: mcpConfig?.mcpServers?.['task-master-ai']?.env ||"]
        C257["CONST: available, VALUE: []"]
        C258["CONST: modelId, VALUE: modelObj.id"]
        C259["CONST: sweScore, VALUE: modelObj.swe_score"]
        C260["CONST: cost, VALUE: modelObj.cost_per_1m_tokens"]
        C261["CONST: allowedRoles, VALUE: modelObj.allowed_roles || ['main', 'fallback']"]
        C262["CONST: nameParts, VALUE: modelId"]
        C263["CONST: foundRoot, VALUE: findProjectRoot()"]
        C264["CONST: taskmasterDir, VALUE: path.join(rootPath, '.taskmaster')"]
        C265["CONST: configPath, VALUE: path.join(taskmasterDir, 'config.json')"]
        C266["CONST: success, VALUE: writeConfig(config, explicitRoot)"]
        C267["CONST: provider, VALUE: roleConfig?.provider"]
        C268["CONST: envVarName, VALUE: `${provider.toUpperCase()}_BASE_URL`"]
        C269["CONST: data, VALUE: readJSON(tasksPath, context.projectRoot, context.tag)"]
        C270["CONST: formattedTaskId, VALUE: typeof taskId === 'string' && taskId.includes('.')"]
        C271["CONST: formattedDependencyId, VALUE: formatTaskId(dependencyId)"]
        C272["CONST: parentTask, VALUE: data.tasks.find((t) => t.id === parentId)"]
        C273["CONST: dependencyChain, VALUE: [formattedTaskId]"]
        C274["CONST: normalizedDependencyId, VALUE: String(formattedDependencyId)"]
        C275["CONST: dependencyIndex, VALUE: targetTask.dependencies.findIndex((dep) => {"]
        C276["CONST: taskIdStr, VALUE: String(taskId)"]
        C277["CONST: parentTask, VALUE: tasks.find((t) => t.id === parentId)"]
        C278["CONST: newChain, VALUE: [...chain, taskIdStr]"]
        C279["CONST: issues, VALUE: []"]
        C280["CONST: fullSubtaskId, VALUE: `${task.id}.${subtask.id}`"]
        C281["CONST: tasks, VALUE: tasksData.tasks.map((task) => {"]
        C282["CONST: uniqueDeps, VALUE: [...new Set(task.dependencies)]"]
        C283["CONST: taskCount, VALUE: data.tasks.length"]
        C284["CONST: validationResult, VALUE: validateTaskDependencies(data.tasks)"]
        C285["CONST: originalData, VALUE: JSON.parse(JSON.stringify(data))"]
        C286["CONST: stats, VALUE: {"]
        C287["CONST: uniqueDeps, VALUE: new Set()"]
        C288["CONST: originalLength, VALUE: task.dependencies.length"]
        C289["CONST: depIdStr, VALUE: String(depId)"]
        C290["CONST: originalLength, VALUE: subtask.dependencies.length"]
        C291["CONST: validTaskIds, VALUE: new Set(data.tasks.map((t) => t.id))"]
        C292["CONST: validSubtaskIds, VALUE: new Set()"]
        C293["CONST: isSubtask, VALUE: typeof depId === 'string' && depId.includes('.')"]
        C294["CONST: numericId, VALUE: typeof depId === 'string' ? parseInt(depId, 10) : depId"]
        C295["CONST: subtaskId, VALUE: `${task.id}.${subtask.id}`"]
        C296["CONST: hasSelfDependency, VALUE: subtask.dependencies.some((depId) => {"]
        C297["CONST: normalizedDepId, VALUE: typeof depId === 'number' && depId < 100"]
        C298["CONST: numericId, VALUE: typeof depId === 'number' ? depId : parseInt(depId, 10)"]
        C299["CONST: fullSubtaskId, VALUE: `${task.id}.${numericId}`"]
        C300["CONST: subtaskDependencyMap, VALUE: new Map()"]
        C301["CONST: normalizedDeps, VALUE: subtask.dependencies.map((depId) => {"]
        C302["CONST: visited, VALUE: new Set()"]
        C303["CONST: recursionStack, VALUE: new Set()"]
        C304["CONST: cycleEdges, VALUE: findCycles("]
        C305["CONST: subtask, VALUE: task.subtasks.find((st) => st.id === subtaskNum)"]
        C306["CONST: edgesToRemove, VALUE: cycleEdges.map((edge) => {"]
        C307["CONST: dataChanged, VALUE: JSON.stringify(data) !== JSON.stringify(originalData)"]
        C308["CONST: totalFixedAll, VALUE: stats.nonExistentDependenciesRemoved +"]
        C309["CONST: hasIndependentSubtask, VALUE: task.subtasks.some("]
        C310["CONST: firstSubtask, VALUE: task.subtasks[0]"]
        C311["CONST: originalData, VALUE: JSON.parse(JSON.stringify(tasksData))"]
        C312["CONST: uniqueDeps, VALUE: [...new Set(subtask.dependencies)]"]
        C313["CONST: fullSubtaskId, VALUE: `${task.id}.${depId}`"]
        C314["CONST: changesDetected, VALUE: JSON.stringify(tasksData) !== JSON.stringify(originalData)"]
        C315["CONST: schemaPath, VALUE: path.join("]
        C316["CONST: schemaContent, VALUE: fs.readFileSync(schemaPath, 'utf-8')"]
        C317["CONST: schema, VALUE: JSON.parse(schemaContent)"]
        C318["CONST: cacheKey, VALUE: `${promptId}-${JSON.stringify(variables)}-${variantKey}`"]
        C319["CONST: template, VALUE: this.loadTemplate(promptId)"]
        C320["CONST: variant, VALUE: variantKey"]
        C321["CONST: rendered, VALUE: {"]
        C322["CONST: templatePath, VALUE: path.join(this.promptsDir, `${promptId}.json`)"]
        C323["CONST: content, VALUE: fs.readFileSync(templatePath, 'utf-8')"]
        C324["CONST: template, VALUE: JSON.parse(content)"]
        C325["CONST: valid, VALUE: this.validatePrompt(template)"]
        C326["CONST: errors, VALUE: this.validatePrompt.errors"]
        C327["CONST: errors, VALUE: []"]
        C328["CONST: value, VALUE: variables[paramName]"]
        C329["CONST: regex, VALUE: new RegExp(paramConfig.pattern)"]
        C330["CONST: context, VALUE: { ...variables }"]
        C331["CONST: func, VALUE: new Function(...Object.keys(context), `return ${condition}`)"]
        C332["CONST: value, VALUE: this.getNestedValue(variables, path)"]
        C333["CONST: numValue, VALUE: parseFloat(compareValue)"]
        C334["CONST: array, VALUE: this.getNestedValue(variables, path)"]
        C335["CONST: itemContext, VALUE: {"]
        C336["CONST: results, VALUE: { total: 0, errors: [], valid: [] }"]
        C337["CONST: files, VALUE: fs.readdirSync(this.promptsDir)"]
        C338["CONST: promptFiles, VALUE: files.filter((file) => file.endsWith('.json'))"]
        C339["CONST: promptId, VALUE: file.replace('.json', '')"]
        C340["CONST: prompts, VALUE: []"]
        C341["CONST: required, VALUE: ['id', 'version', 'description', 'prompts']"]
        C342["CONST: folderName, VALUE: path.basename(projectRoot)"]
        C343["CONST: cleanFolderName, VALUE: folderName"]
        C344["CONST: utmParams, VALUE: new URLSearchParams({"]
        C345["CONST: statusText, VALUE: status"]
        C346["CONST: subtasksText, VALUE: withSubtasks ? 'with subtasks' : 'without subtasks'"]
        C347["CONST: exportInfo, VALUE: `🎯 **Taskmaster Export** - ${timestamp}\\n` +"]
        C348["CONST: boxContent, VALUE: `<!-- TASKMASTER_EXPORT_START -->\\n` +"]
        C349["CONST: actualProjectRoot, VALUE: projectRoot || findProjectRoot() || '.'"]
        C350["CONST: tasksOutput, VALUE: await listTasks("]
        C351["CONST: timestamp, VALUE: new Date().toISOString().replace('T', ' ').substring(0, 19) + ' UTC'"]
        C352["CONST: projectName, VALUE: getProjectName(actualProjectRoot)"]
        C353["CONST: startMarker, VALUE: createStartMarker({"]
        C354["CONST: endMarker, VALUE: createEndMarker()"]
        C355["CONST: taskSection, VALUE: startMarker + tasksOutput + endMarker"]
        C356["CONST: readmePath, VALUE: path.join(actualProjectRoot, 'README.md')"]
        C357["CONST: startComment, VALUE: '<!-- TASKMASTER_EXPORT_START -->'"]
        C358["CONST: endComment, VALUE: '<!-- TASKMASTER_EXPORT_END -->'"]
        C359["CONST: startIndex, VALUE: readmeContent.indexOf(startComment)"]
        C360["CONST: endIndex, VALUE: readmeContent.indexOf(endComment)"]
        C361["CONST: beforeTasks, VALUE: readmeContent.substring(0, startIndex)"]
        C362["CONST: afterTasks, VALUE: readmeContent.substring(endIndex + endComment.length)"]
        C363["CONST: parentIdNum, VALUE: parseInt(parentId, 10)"]
        C364["CONST: parentTask, VALUE: data.tasks.find((t) => t.id === parentIdNum)"]
        C365["CONST: existingTaskIdNum, VALUE: parseInt(existingTaskId, 10)"]
        C366["CONST: existingTaskIndex, VALUE: data.tasks.findIndex("]
        C367["CONST: existingTask, VALUE: data.tasks[existingTaskIndex]"]
        C368["CONST: highestSubtaskId, VALUE: parentTask.subtasks.length > 0"]
        C369["CONST: newSubtaskId, VALUE: highestSubtaskId + 1"]
        C370["CONST: AiTaskDataSchema, VALUE: z.object({"]
        C371["CONST: isMCP, VALUE: !!mcpLog"]
        C372["CONST: logFn, VALUE: isMCP"]
        C373["CONST: normalizedPriority, VALUE: normalizeTaskPriority(priority)"]
        C374["CONST: report, VALUE: (message, level = 'info') => {"]
        C375["CONST: task, VALUE: tasks.find((t) => t.id === taskId)"]
        C376["CONST: dependencyData, VALUE: []"]
        C377["CONST: depData, VALUE: buildDependencyGraph("]
        C378["CONST: targetTag, VALUE: tag"]
        C379["CONST: allTasks, VALUE: getAllTasks(rawData)"]
        C380["CONST: tasksInTargetTag, VALUE: rawData[targetTag].tasks"]
        C381["CONST: highestId, VALUE: tasksInTargetTag.length > 0"]
        C382["CONST: newTaskId, VALUE: highestId + 1"]
        C383["CONST: invalidDeps, VALUE: dependencies.filter((depId) => {"]
        C384["CONST: numDepId, VALUE: parseInt(depId, 10)"]
        C385["CONST: numericDependencies, VALUE: dependencies.map((dep) => parseInt(dep, 10))"]
        C386["CONST: dependencyGraphs, VALUE: []"]
        C387["CONST: allRelatedTaskIds, VALUE: new Set()"]
        C388["CONST: depthMap, VALUE: new Map()"]
        C389["CONST: graph, VALUE: buildDependencyGraph(allTasks, depId, new Set(), depthMap)"]
        C390["CONST: contextGatherer, VALUE: new ContextGatherer(projectRoot, tag)"]
        C391["CONST: gatherResult, VALUE: await contextGatherer.gather({"]
        C392["CONST: gatheredContext, VALUE: gatherResult.context"]
        C393["CONST: analysisData, VALUE: gatherResult.analysisData"]
        C394["CONST: promptManager, VALUE: getPromptManager()"]
        C395["CONST: serviceRole, VALUE: useResearch ? 'research' : 'main'"]
        C396["CONST: newTask, VALUE: {"]
        C397["CONST: allValidDeps, VALUE: taskData.dependencies.every((depId) => {"]
        C398["CONST: table, VALUE: new Table({"]
        C399["CONST: getPriorityColor, VALUE: (p) => {"]
        C400["CONST: aiAddedDeps, VALUE: newTask.dependencies.filter("]
        C401["CONST: aiRemovedDeps, VALUE: numericDependencies.filter("]
        C402["CONST: depTitles, VALUE: {}"]
        C403["CONST: depTask, VALUE: allTasks.find((t) => t.id === dep)"]
        C404["CONST: isAiAdded, VALUE: aiAddedDeps.includes(dep)"]
        C405["CONST: depType, VALUE: isAiAdded ? chalk.yellow(' (AI suggested)') : ''"]
        C406["CONST: title, VALUE: depTask ? truncate(depTask.title, 30) : 'Unknown task'"]
        C407["CONST: tasksString, VALUE: JSON.stringify(tasksData.tasks, null, 2)"]
        C408["CONST: tasksPath, VALUE: options.file || LEGACY_TASKS_FILE"]
        C409["CONST: thresholdScore, VALUE: parseFloat(options.threshold || '5')"]
        C410["CONST: useResearch, VALUE: options.research || false"]
        C411["CONST: projectRoot, VALUE: options.projectRoot"]
        C412["CONST: tag, VALUE: options.tag"]
        C413["CONST: specificIds, VALUE: options.id"]
        C414["CONST: fromId, VALUE: options.from !== undefined ? parseInt(options.from, 10) : null"]
        C415["CONST: toId, VALUE: options.to !== undefined ? parseInt(options.to, 10) : null"]
        C416["CONST: outputFormat, VALUE: mcpLog ? 'json' : 'text'"]
        C417["CONST: reportLog, VALUE: (message, level = 'info') => {"]
        C418["CONST: outputPath, VALUE: resolveComplexityReportOutputPath("]
        C419["CONST: activeStatuses, VALUE: ['pending', 'blocked', 'in-progress']"]
        C420["CONST: foundIds, VALUE: filteredTasks.map((t) => t.id)"]
        C421["CONST: missingIds, VALUE: specificIds.filter("]
        C422["CONST: effectiveFromId, VALUE: fromId !== null ? fromId : 1"]
        C423["CONST: effectiveToId, VALUE: toId !== null"]
        C424["CONST: allTasksFlat, VALUE: flattenTasksWithSubtasks(originalData.tasks)"]
        C425["CONST: fuzzySearch, VALUE: new FuzzyTaskSearch("]
        C426["CONST: searchQuery, VALUE: tasksData.tasks"]
        C427["CONST: searchResults, VALUE: fuzzySearch.findRelevantTasks(searchQuery, {"]
        C428["CONST: relevantTaskIds, VALUE: fuzzySearch.getTaskIds(searchResults)"]
        C429["CONST: contextResult, VALUE: await contextGatherer.gather({"]
        C430["CONST: skippedCount, VALUE: originalTaskCount - tasksData.tasks.length"]
        C431["CONST: filterMsg, VALUE: specificIds"]
        C432["CONST: skipMessage, VALUE: `Skipping ${skippedCount} tasks marked as done/cancelled/deferred. Analyzing ${tasksData.tasks.length} active tasks.`"]
        C433["CONST: existingAnalysisMap, VALUE: new Map()"]
        C434["CONST: emptyReport, VALUE: {"]
        C435["CONST: highComplexity, VALUE: 0"]
        C436["CONST: mediumComplexity, VALUE: 0"]
        C437["CONST: lowComplexity, VALUE: 0"]
        C438["CONST: totalAnalyzed, VALUE: 0"]
        C439["CONST: currentProvider, VALUE: useResearch"]
        C440["CONST: isClaudeCode, VALUE: currentProvider === CUSTOM_PROVIDERS.CLAUDE_CODE"]
        C441["CONST: promptParams, VALUE: {"]
        C442["CONST: role, VALUE: useResearch ? 'research' : 'main'"]
        C443["CONST: codeBlockMatch, VALUE: cleanedResponse.match("]
        C444["CONST: firstBracket, VALUE: cleanedResponse.indexOf('[')"]
        C445["CONST: lastBracket, VALUE: cleanedResponse.lastIndexOf(']')"]
        C446["CONST: taskIds, VALUE: tasksData.tasks.map((t) => t.id)"]
        C447["CONST: analysisTaskIds, VALUE: complexityAnalysis.map((a) => a.taskId)"]
        C448["CONST: missingTaskIds, VALUE: taskIds.filter("]
        C449["CONST: missingTask, VALUE: tasksData.tasks.find((t) => t.id === missingId)"]
        C450["CONST: analyzedTaskIds, VALUE: new Set("]
        C451["CONST: currentTagTaskIds, VALUE: new Set(tasksData.tasks.map((t) => t.id))"]
        C452["CONST: existingEntriesNotAnalyzed, VALUE: existingReport.complexityAnalysis.filter("]
        C453["CONST: report, VALUE: {"]
        C454["CONST: highComplexity, VALUE: complexityAnalysis.filter("]
        C455["CONST: mediumComplexity, VALUE: complexityAnalysis.filter("]
        C456["CONST: lowComplexity, VALUE: complexityAnalysis.filter("]
        C457["CONST: totalAnalyzed, VALUE: complexityAnalysis.length"]
        C458["CONST: taskIdArray, VALUE: taskIds.split(',').map((id) => id.trim())"]
        C459["CONST: summaryTable, VALUE: new Table({"]
        C460["CONST: id, VALUE: parseInt(taskId, 10)"]
        C461["CONST: task, VALUE: data.tasks.find((t) => t.id === id)"]
        C462["CONST: subtaskCount, VALUE: task.subtasks.length"]
        C463["CONST: isMCPCall, VALUE: !!mcpLog"]
        C464["CONST: projectRoot, VALUE: providedProjectRoot || findProjectRoot()"]
        C465["CONST: logger, VALUE: mcpLog ||"]
        C466["CONST: allTelemetryData, VALUE: []"]
        C467["CONST: tasksToExpand, VALUE: data.tasks.filter("]
        C468["CONST: result, VALUE: await expandTask("]
        C469["CONST: aggregatedTelemetryData, VALUE: aggregateTelemetry("]
        C470["CONST: summaryContent, VALUE: `${chalk.white.bold('Expansion Summary:')}\\n\\n` +"]
        C471["CONST: subtaskSchema, VALUE: z"]
        C472["CONST: subtaskArraySchema, VALUE: z.array(subtaskSchema)"]
        C473["CONST: subtaskWrapperSchema, VALUE: z.object({"]
        C474["CONST: originalTrimmedResponse, VALUE: text.trim()"]
        C475["CONST: malformedPattern, VALUE: /\dependencies\:\\s*,/g"]
        C476["CONST: codeBlockMatch, VALUE: jsonToParse.match(/```(?:json)?\\s*([\\s\\S]*?)\\s*```/)"]
        C477["CONST: targetPattern, VALUE: '{\subtasks\:'"]
        C478["CONST: patternStartIndex, VALUE: jsonToParse.indexOf(targetPattern)"]
        C479["CONST: openBraces, VALUE: 0"]
        C480["CONST: firstBraceFound, VALUE: false"]
        C481["CONST: extractedJsonBlock, VALUE: ''"]
        C482["CONST: parsedSubtasks, VALUE: parsedObject.subtasks"]
        C483["CONST: validatedSubtasks, VALUE: []"]
        C484["CONST: validationErrors, VALUE: []"]
        C485["CONST: correctedSubtask, VALUE: {"]
        C486["CONST: result, VALUE: subtaskSchema.safeParse(correctedSubtask)"]
        C487["CONST: errorMessage, VALUE: `  - Field '${err.path.join('.')}': ${err.message}`"]
        C488["CONST: projectRoot, VALUE: contextProjectRoot || findProjectRoot(tasksPath)"]
        C489["CONST: logger, VALUE: mcpLog || {"]
        C490["CONST: taskIndex, VALUE: data.tasks.findIndex("]
        C491["CONST: task, VALUE: data.tasks[taskIndex]"]
        C492["CONST: allTasksFlat, VALUE: flattenTasksWithSubtasks(data.tasks)"]
        C493["CONST: fuzzySearch, VALUE: new FuzzyTaskSearch(allTasksFlat, 'expand-task')"]
        C494["CONST: searchQuery, VALUE: `${task.title} ${task.description}`"]
        C495["CONST: finalTaskIds, VALUE: ["]
        C496["CONST: complexityReport, VALUE: readJSON(complexityReportPath)"]
        C497["CONST: explicitNumSubtasks, VALUE: parseInt(numSubtasks, 10)"]
        C498["CONST: nextSubtaskId, VALUE: (task.subtasks?.length || 0) + 1"]
        C499["CONST: priorityValues, VALUE: { high: 3, medium: 2, low: 1 }"]
        C500["CONST: toFullSubId, VALUE: (parentId, maybeDotId) => {"]
        C501["CONST: completedIds, VALUE: new Set()"]
        C502["CONST: candidateSubtasks, VALUE: []"]
        C503["CONST: stStatus, VALUE: (st.status || 'pending').toLowerCase()"]
        C504["CONST: fullDeps, VALUE: st.dependencies?.map((d) => toFullSubId(parent.id, d)) ?? []"]
        C505["CONST: depsSatisfied, VALUE: fullDeps.length === 0 ||"]
        C506["CONST: pa, VALUE: priorityValues[a.priority] ?? 2"]
        C507["CONST: pb, VALUE: priorityValues[b.priority] ?? 2"]
        C508["CONST: nextTask, VALUE: candidateSubtasks[0]"]
        C509["CONST: eligibleTasks, VALUE: tasks.filter((task) => {"]
        C510["CONST: status, VALUE: (task.status || 'pending').toLowerCase()"]
        C511["CONST: deps, VALUE: task.dependencies ?? []"]
        C512["CONST: nextTask, VALUE: eligibleTasks.sort((a, b) => {"]
        C513["CONST: pa, VALUE: priorityValues[a.priority || 'medium'] ?? 2"]
        C514["CONST: pb, VALUE: priorityValues[b.priority || 'medium'] ?? 2"]
        C515["CONST: da, VALUE: (a.dependencies ?? []).length"]
        C516["CONST: db, VALUE: (b.dependencies ?? []).length"]
        C517["CONST: isMcpMode, VALUE: !!options?.mcpLog"]
        C518["CONST: resolvedData, VALUE: readJSON(tasksPath, projectRoot, tag)"]
        C519["CONST: rawData, VALUE: resolvedData._rawTaggedData || resolvedData"]
        C520["CONST: tagData, VALUE: rawData[tag]"]
        C521["CONST: tasksForGeneration, VALUE: tagData.tasks"]
        C522["CONST: allTasksInTag, VALUE: tagData.tasks"]
        C523["CONST: validTaskIds, VALUE: allTasksInTag.map((task) => task.id)"]
        C524["CONST: files, VALUE: fs.readdirSync(outputDir)"]
        C525["CONST: masterFilePattern, VALUE: /^task_(\\d+)\\.txt$/"]
        C526["CONST: taggedFilePattern, VALUE: new RegExp(`^task_(\\\\d+)_${tag}\\\\.txt$`)"]
        C527["CONST: orphanedFiles, VALUE: files.filter((file) => {"]
        C528["CONST: filePath, VALUE: path.join(outputDir, file)"]
        C529["CONST: taskFileName, VALUE: tag === 'master'"]
        C530["CONST: taskPath, VALUE: path.join(outputDir, taskFileName)"]
        C531["CONST: subtaskDeps, VALUE: subtask.dependencies"]
        C532["CONST: depTask, VALUE: allTasks.find((t) => t.id === depId)"]
        C533["CONST: allowedStatuses, VALUE: statusFilter"]
        C534["CONST: totalTasks, VALUE: data.tasks.length"]
        C535["CONST: completedTasks, VALUE: data.tasks.filter("]
        C536["CONST: completionPercentage, VALUE: totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 0"]
        C537["CONST: doneCount, VALUE: completedTasks"]
        C538["CONST: inProgressCount, VALUE: data.tasks.filter("]
        C539["CONST: pendingCount, VALUE: data.tasks.filter("]
        C540["CONST: blockedCount, VALUE: data.tasks.filter("]
        C541["CONST: deferredCount, VALUE: data.tasks.filter("]
        C542["CONST: cancelledCount, VALUE: data.tasks.filter("]
        C543["CONST: reviewCount, VALUE: data.tasks.filter("]
        C544["CONST: subtaskCompletionPercentage, VALUE: totalSubtasks > 0 ? (completedSubtasks / totalSubtasks) * 100 : 0"]
        C545["CONST: completedTaskIds, VALUE: new Set("]
        C546["CONST: tasksWithNoDeps, VALUE: data.tasks.filter("]
        C547["CONST: tasksWithAllDepsSatisfied, VALUE: data.tasks.filter("]
        C548["CONST: tasksWithUnsatisfiedDeps, VALUE: data.tasks.filter("]
        C549["CONST: tasksReadyToWork, VALUE: tasksWithNoDeps + tasksWithAllDepsSatisfied"]
        C550["CONST: dependencyCount, VALUE: {}"]
        C551["CONST: mostDependedOnTask, VALUE: mostDependedOnTaskId !== null"]
        C552["CONST: totalDependencies, VALUE: data.tasks.reduce("]
        C553["CONST: avgDependenciesPerTask, VALUE: totalDependencies / data.tasks.length"]
        C554["CONST: nextItem, VALUE: findNextTask(data.tasks, complexityReport)"]
        C555["CONST: tasksWithoutDetails, VALUE: filteredTasks.map((task) => {"]
        C556["CONST: taskStatusBreakdown, VALUE: {"]
        C557["CONST: subtaskStatusBreakdown, VALUE: {"]
        C558["CONST: taskProgressBar, VALUE: createProgressBar("]
        C559["CONST: subtaskProgressBar, VALUE: createProgressBar("]
        C560["CONST: projectDashboardContent, VALUE: chalk.white.bold('Project Dashboard') +"]
        C561["CONST: dependencyDashboardContent, VALUE: chalk.white.bold('Dependency Status & Next Task') +"]
        C562["CONST: minDashboardWidth, VALUE: 50"]
        C563["CONST: minDependencyWidth, VALUE: 50"]
        C564["CONST: totalMinWidth, VALUE: minDashboardWidth + minDependencyWidth + 4"]
        C565["CONST: availableWidth, VALUE: terminalWidth"]
        C566["CONST: halfWidth, VALUE: Math.floor(availableWidth / 2)"]
        C567["CONST: boxContentWidth, VALUE: halfWidth - 4"]
        C568["CONST: dashboardBox, VALUE: boxen(projectDashboardContent, {"]
        C569["CONST: dependencyBox, VALUE: boxen(dependencyDashboardContent, {"]
        C570["CONST: dashboardLines, VALUE: dashboardBox.split('\\n')"]
        C571["CONST: dependencyLines, VALUE: dependencyBox.split('\\n')"]
        C572["CONST: maxHeight, VALUE: Math.max(dashboardLines.length, dependencyLines.length)"]
        C573["CONST: combinedLines, VALUE: []"]
        C574["CONST: dashLine, VALUE: i < dashboardLines.length ? dashboardLines[i] : ''"]
        C575["CONST: depLine, VALUE: i < dependencyLines.length ? dependencyLines[i] : ''"]
        C576["CONST: trimmedDashLine, VALUE: dashLine.trimEnd()"]
        C577["CONST: paddedDashLine, VALUE: trimmedDashLine.padEnd(halfWidth, ' ')"]
        C578["CONST: idWidthPct, VALUE: withSubtasks ? 10 : 7"]
        C579["CONST: statusWidthPct, VALUE: 15"]
        C580["CONST: priorityWidthPct, VALUE: 12"]
        C581["CONST: depsWidthPct, VALUE: 20"]
        C582["CONST: complexityWidthPct, VALUE: 10"]
        C583["CONST: titleWidthPct, VALUE: 100 -"]
        C584["CONST: availableWidth, VALUE: terminalWidth - 10"]
        C585["CONST: idWidth, VALUE: Math.floor(availableWidth * (idWidthPct / 100))"]
        C586["CONST: statusWidth, VALUE: Math.floor(availableWidth * (statusWidthPct / 100))"]
        C587["CONST: priorityWidth, VALUE: Math.floor(availableWidth * (priorityWidthPct / 100))"]
        C588["CONST: depsWidth, VALUE: Math.floor(availableWidth * (depsWidthPct / 100))"]
        C589["CONST: complexityWidth, VALUE: Math.floor("]
        C590["CONST: titleWidth, VALUE: Math.floor(availableWidth * (titleWidthPct / 100))"]
        C591["CONST: cleanTitle, VALUE: task.title.replace(/\\n/g, ' ')"]
        C592["CONST: priorityColor, VALUE: {"]
        C593["CONST: status, VALUE: getStatusWithColor(task.status, true)"]
        C594["CONST: formattedDeps, VALUE: subtask.dependencies"]
        C595["CONST: foundSubtask, VALUE: task.subtasks.find("]
        C596["CONST: isDone, VALUE: foundSubtask.status === 'done' ||"]
        C597["CONST: isInProgress, VALUE: foundSubtask.status === 'in-progress'"]
        C598["CONST: depTask, VALUE: data.tasks.find((t) => t.id === depId)"]
        C599["CONST: isDone, VALUE: depTask.status === 'done' || depTask.status === 'completed'"]
        C600["CONST: isInProgress, VALUE: depTask.status === 'in-progress'"]
        C601["CONST: priorityColors, VALUE: {"]
        C602["CONST: parentTaskForSubtasks, VALUE: data.tasks.find("]
        C603["CONST: status, VALUE: subtask.status || 'pending'"]
        C604["CONST: statusColors, VALUE: {"]
        C605["CONST: statusColor, VALUE: statusColors[status.toLowerCase()] || chalk.white"]
        C606["CONST: parent, VALUE: allTasks.find((t) => t.id === item.parentId)"]
        C607["CONST: subtask, VALUE: parent?.subtasks?.find("]
        C608["CONST: task, VALUE: allTasks.find((t) => String(t.id) === String(item.id))"]
        C609["CONST: createMarkdownProgressBar, VALUE: (percentage, width = 20) => {"]
        C610["CONST: filled, VALUE: Math.round((percentage / 100) * width)"]
        C611["CONST: empty, VALUE: width - filled"]
        C612["CONST: taskProgressBar, VALUE: createMarkdownProgressBar(completionPercentage, 20)"]
        C613["CONST: subtaskProgressBar, VALUE: createMarkdownProgressBar("]
        C614["CONST: getStatusSymbol, VALUE: (status) => {"]
        C615["CONST: formatDependenciesForMarkdown, VALUE: (deps, allTasks) => {"]
        C616["CONST: taskTitle, VALUE: task.title"]
        C617["CONST: statusSymbol, VALUE: getStatusSymbol(task.status)"]
        C618["CONST: priority, VALUE: task.priority || 'medium'"]
        C619["CONST: deps, VALUE: formatDependenciesForMarkdown(task.dependencies, data.tasks)"]
        C620["CONST: complexity, VALUE: task.complexityScore"]
        C621["CONST: subtaskTitle, VALUE: `${subtask.title}`"]
        C622["CONST: subtaskStatus, VALUE: getStatusSymbol(subtask.status)"]
        C623["CONST: subtaskDeps, VALUE: formatDependenciesForMarkdown("]
        C624["CONST: subtaskComplexity, VALUE: subtask.complexityScore"]
        C625["CONST: log, VALUE: createLogWrapper({"]
        C626["CONST: projectRoot, VALUE: findProjectRoot() || process.cwd()"]
        C627["CONST: taskmasterDir, VALUE: path.join(projectRoot, '.taskmaster')"]
        C628["CONST: migrationPlan, VALUE: analyzeMigrationNeeds(projectRoot)"]
        C629["CONST: action, VALUE: options.dryRun ? 'Would move' : 'Will move'"]
        C630["CONST: readline, VALUE: await import('readline')"]
        C631["CONST: rl, VALUE: readline.createInterface({"]
        C632["CONST: answer, VALUE: await new Promise((resolve) => {"]
        C633["CONST: migrationPlan, VALUE: []"]
        C634["CONST: tasksDir, VALUE: path.join(projectRoot, 'tasks')"]
        C635["CONST: tasksFiles, VALUE: fs.readdirSync(tasksDir)"]
        C636["CONST: scriptsDir, VALUE: path.join(projectRoot, 'scripts')"]
        C637["CONST: scriptsFiles, VALUE: fs.readdirSync(scriptsDir)"]
        C638["CONST: filePath, VALUE: path.join(scriptsDir, file)"]
        C639["CONST: lowerFile, VALUE: file.toLowerCase()"]
        C640["CONST: oldConfig, VALUE: path.join(projectRoot, LEGACY_CONFIG_FILE)"]
        C641["CONST: neededDirs, VALUE: new Set()"]
        C642["CONST: destDir, VALUE: path.dirname(item.to)"]
        C643["CONST: fullDirPath, VALUE: path.join(projectRoot, dir)"]
        C644["CONST: backupDir, VALUE: path.join(projectRoot, '.taskmaster-migration-backup')"]
        C645["CONST: fromPath, VALUE: path.join(projectRoot, item.from)"]
        C646["CONST: toPath, VALUE: path.join(projectRoot, item.to)"]
        C647["CONST: backupPath, VALUE: path.join("]
        C648["CONST: backupDir, VALUE: path.dirname(backupPath)"]
        C649["CONST: toDir, VALUE: path.dirname(toPath)"]
        C650["CONST: dirsToCheck, VALUE: ['tasks', 'scripts']"]
        C651["CONST: dirPath, VALUE: path.join(projectRoot, dir)"]
        C652["CONST: files, VALUE: fs.readdirSync(dirPath)"]
        C653["CONST: CONFIG_MISSING_ERROR, VALUE: 'The configuration file is missing. Run \task-master init\ to create it.'"]
        C654["CONST: req, VALUE: https.request(options, (res) => {"]
        C655["CONST: parsedData, VALUE: JSON.parse(data)"]
        C656["CONST: url, VALUE: new URL(baseURL)"]
        C657["CONST: isHttps, VALUE: url.protocol === 'https:'"]
        C658["CONST: port, VALUE: url.port || (isHttps ? 443 : 80)"]
        C659["CONST: basePath, VALUE: url.pathname.endsWith('/')"]
        C660["CONST: requestLib, VALUE: isHttps ? https : http"]
        C661["CONST: req, VALUE: requestLib.request(options, (res) => {"]
        C662["CONST: report, VALUE: (level, ...args) => {"]
        C663["CONST: configPath, VALUE: findConfigPath(null, { projectRoot })"]
        C664["CONST: configExists, VALUE: isConfigFilePresent(projectRoot)"]
        C665["CONST: mainProvider, VALUE: getMainProvider(projectRoot)"]
        C666["CONST: mainModelId, VALUE: getMainModelId(projectRoot)"]
        C667["CONST: researchProvider, VALUE: getResearchProvider(projectRoot)"]
        C668["CONST: researchModelId, VALUE: getResearchModelId(projectRoot)"]
        C669["CONST: fallbackProvider, VALUE: getFallbackProvider(projectRoot)"]
        C670["CONST: fallbackModelId, VALUE: getFallbackModelId(projectRoot)"]
        C671["CONST: mainCliKeyOk, VALUE: isApiKeySet(mainProvider, session, projectRoot)"]
        C672["CONST: mainMcpKeyOk, VALUE: getMcpApiKeyStatus(mainProvider, projectRoot)"]
        C673["CONST: researchCliKeyOk, VALUE: isApiKeySet("]
        C674["CONST: researchMcpKeyOk, VALUE: getMcpApiKeyStatus(researchProvider, projectRoot)"]
        C675["CONST: fallbackCliKeyOk, VALUE: fallbackProvider"]
        C676["CONST: fallbackMcpKeyOk, VALUE: fallbackProvider"]
        C677["CONST: availableModels, VALUE: getAvailableModels(projectRoot)"]
        C678["CONST: mainModelData, VALUE: availableModels.find((m) => m.id === mainModelId)"]
        C679["CONST: researchModelData, VALUE: availableModels.find("]
        C680["CONST: fallbackModelData, VALUE: fallbackModelId"]
        C681["CONST: allAvailableModels, VALUE: getAvailableModels(projectRoot)"]
        C682["CONST: activeIds, VALUE: [mainModelId, researchModelId, fallbackModelId].filter("]
        C683["CONST: otherAvailableModels, VALUE: allAvailableModels.map((model) => ({"]
        C684["CONST: currentConfig, VALUE: getConfig(projectRoot)"]
        C685["CONST: openRouterModels, VALUE: await fetchOpenRouterModels()"]
        C686["CONST: ollamaBaseURL, VALUE: getBaseUrlForRole(role, projectRoot)"]
        C687["CONST: ollamaModels, VALUE: await fetchOllamaModels(ollamaBaseURL)"]
        C688["CONST: tagsUrl, VALUE: `${ollamaBaseURL}/tags`"]
        C689["CONST: claudeCodeModels, VALUE: availableModels.filter("]
        C690["CONST: claudeCodeModelData, VALUE: claudeCodeModels.find("]
        C691["CONST: geminiCliModels, VALUE: availableModels.filter("]
        C692["CONST: geminiCliModelData, VALUE: geminiCliModels.find("]
        C693["CONST: writeResult, VALUE: writeConfig(currentConfig, projectRoot)"]
        C694["CONST: successMessage, VALUE: `Successfully set ${role} model to ${modelId} (Provider: ${determinedProvider})`"]
        C695["CONST: providers, VALUE: getAllProviders()"]
        C696["CONST: providersToCheck, VALUE: providers.filter("]
        C697["CONST: statusReport, VALUE: providersToCheck.map((provider) => {"]
        C698["CONST: cliOk, VALUE: isApiKeySet(provider, session, projectRoot)"]
        C699["CONST: mcpOk, VALUE: getMcpApiKeyStatus(provider, projectRoot)"]
        C700["CONST: sourceIds, VALUE: sourceId.split(',').map((id) => id.trim())"]
        C701["CONST: destinationIds, VALUE: destinationId.split(',').map((id) => id.trim())"]
        C702["CONST: results, VALUE: []"]
        C703["CONST: tasks, VALUE: rawData[tag].tasks"]
        C704["CONST: isSourceSubtask, VALUE: sourceId.includes('.')"]
        C705["CONST: isDestSubtask, VALUE: destinationId.includes('.')"]
        C706["CONST: sourceParentTask, VALUE: tasks.find((t) => t.id === sourceParentId)"]
        C707["CONST: destParentTask, VALUE: tasks.find((t) => t.id === destParentId)"]
        C708["CONST: sourceSubtaskIndex, VALUE: sourceParentTask.subtasks.findIndex("]
        C709["CONST: sourceSubtask, VALUE: sourceParentTask.subtasks[sourceSubtaskIndex]"]
        C710["CONST: destSubtaskIndex, VALUE: destParentTask.subtasks.findIndex("]
        C711["CONST: adjustedIndex, VALUE: sourceSubtaskIndex < destSubtaskIndex"]
        C712["CONST: destTaskId, VALUE: parseInt(destinationId, 10)"]
        C713["CONST: existingDestTask, VALUE: tasks.find((t) => t.id === destTaskId)"]
        C714["CONST: insertIndex, VALUE: tasks.findIndex((t) => t.id > destTaskId)"]
        C715["CONST: sourceTaskId, VALUE: parseInt(sourceId, 10)"]
        C716["CONST: sourceTaskIndex, VALUE: tasks.findIndex((t) => t.id === sourceTaskId)"]
        C717["CONST: sourceTask, VALUE: tasks[sourceTaskIndex]"]
        C718["CONST: newSubtask, VALUE: {"]
        C719["CONST: insertPosition, VALUE: destSubtaskIndex === -1 ? 0 : destSubtaskIndex + 1"]
        C720["CONST: destTaskIndex, VALUE: tasks.findIndex((t) => t.id === destTaskId)"]
        C721["CONST: destTask, VALUE: tasks[destTaskIndex]"]
        C722["CONST: destSubtaskId_num, VALUE: parseInt(destSubtaskId, 10)"]
        C723["CONST: movedTask, VALUE: {"]
        C724["CONST: depIndex, VALUE: task.dependencies.indexOf(sourceTask.id)"]
        C725["CONST: depIndex, VALUE: subtask.dependencies.indexOf(sourceTask.id)"]
        C726["CONST: adjustedDestIndex, VALUE: sourceTaskIndex < destTaskIndex ? destTaskIndex - 1 : destTaskIndex"]
        C727["CONST: prdSingleTaskSchema, VALUE: z.object({"]
        C728["CONST: prdResponseSchema, VALUE: z.object({"]
        C729["CONST: outputFormat, VALUE: isMCP ? 'json' : 'text'"]
        C730["CONST: logFn, VALUE: mcpLog"]
        C731["CONST: existingFileContent, VALUE: fs.readFileSync(tasksPath, 'utf8')"]
        C732["CONST: allData, VALUE: JSON.parse(existingFileContent)"]
        C733["CONST: overwriteError, VALUE: new Error("]
        C734["CONST: prdContent, VALUE: fs.readFileSync(prdPath, 'utf8')"]
        C735["CONST: defaultTaskPriority, VALUE: getDefaultPriority(projectRoot) || 'medium'"]
        C736["CONST: currentProvider, VALUE: research"]
        C737["CONST: tasksDir, VALUE: path.dirname(tasksPath)"]
        C738["CONST: generatedData, VALUE: aiServiceResponse?.mainResult?.object"]
        C739["CONST: taskMap, VALUE: new Map()"]
        C740["CONST: processedNewTasks, VALUE: generatedData.tasks.map((task) => {"]
        C741["CONST: newId, VALUE: currentId++"]
        C742["CONST: finalTasks, VALUE: append"]
        C743["CONST: parentId, VALUE: parseInt(parentIdStr, 10)"]
        C744["CONST: subtaskIdNum, VALUE: parseInt(subtaskIdStr, 10)"]
        C745["CONST: subtaskIndex, VALUE: parentTask.subtasks.findIndex("]
        C746["CONST: removedSubtask, VALUE: { ...parentTask.subtasks[subtaskIndex] }"]
        C747["CONST: highestId, VALUE: Math.max(...data.tasks.map((t) => t.id))"]
        C748["CONST: results, VALUE: {"]
        C749["CONST: taskIdsToRemove, VALUE: taskIds"]
        C750["CONST: rawData, VALUE: readJSON(tasksPath, projectRoot, tag)"]
        C751["CONST: fullTaggedData, VALUE: rawData._rawTaggedData || rawData"]
        C752["CONST: tasks, VALUE: fullTaggedData[tag].tasks"]
        C753["CONST: tasksToDeleteFiles, VALUE: []"]
        C754["CONST: errorMsg, VALUE: `Task with ID ${taskId} in tag '${tag}' not found or already removed.`"]
        C755["CONST: parentTask, VALUE: tasks.find((t) => t.id === parentTaskId)"]
        C756["CONST: removedSubtask, VALUE: {"]
        C757["CONST: taskIdNum, VALUE: parseInt(taskId, 10)"]
        C758["CONST: taskIndex, VALUE: tasks.findIndex((t) => t.id === taskIdNum)"]
        C759["CONST: removedTask, VALUE: tasks[taskIndex]"]
        C760["CONST: errorMsg, VALUE: `Error processing ID ${taskId}: ${innerError.message}`"]
        C761["CONST: allRemovedIds, VALUE: new Set("]
        C762["CONST: currentTagTasks, VALUE: fullTaggedData[tagName].tasks"]
        C763["CONST: taskFileName, VALUE: path.join("]
        C764["CONST: unlinkMsg, VALUE: `Failed to delete task file ${taskFileName}: ${unlinkError.message}`"]
        C765["CONST: genErrMsg, VALUE: `Failed to regenerate task files: ${genError.message}`"]
        C766["CONST: finalMessage, VALUE: results.messages.join('\\n')"]
        C767["CONST: finalError, VALUE: results.errors.join('\\n')"]
        C768["CONST: tasksData, VALUE: await readJSON(tasksPath, projectRoot, tag)"]
        C769["CONST: flattenedTasks, VALUE: flattenTasksWithSubtasks(tasksData.tasks)"]
        C770["CONST: fuzzySearch, VALUE: new FuzzyTaskSearch(flattenedTasks, 'research')"]
        C771["CONST: searchResults, VALUE: fuzzySearch.findRelevantTasks(query, {"]
        C772["CONST: uniqueAutoDiscovered, VALUE: autoDiscoveredIds.filter("]
        C773["CONST: sortedTaskIds, VALUE: finalTaskIds"]
        C774["CONST: sortedProvidedIds, VALUE: taskIds"]
        C775["CONST: sortedAutoIds, VALUE: uniqueAutoDiscovered"]
        C776["CONST: gatheredContext, VALUE: contextResult.context"]
        C777["CONST: tokenBreakdown, VALUE: contextResult.tokenBreakdown"]
        C778["CONST: systemPromptTokens, VALUE: contextGatherer.countTokens(systemPrompt)"]
        C779["CONST: userPromptTokens, VALUE: contextGatherer.countTokens(userPrompt)"]
        C780["CONST: totalInputTokens, VALUE: systemPromptTokens + userPromptTokens"]
        C781["CONST: researchResult, VALUE: aiResult.mainResult"]
        C782["CONST: telemetryData, VALUE: aiResult.telemetryData"]
        C783["CONST: tagInfo, VALUE: aiResult.tagInfo"]
        C784["CONST: conversationHistory, VALUE: ["]
        C785["CONST: savedFilePath, VALUE: await handleSaveToFile("]
        C786["CONST: parts, VALUE: []"]
        C787["CONST: totalTaskTokens, VALUE: tokenBreakdown.tasks.reduce("]
        C788["CONST: taskDetails, VALUE: tokenBreakdown.tasks"]
        C789["CONST: titleDisplay, VALUE: task.title.length > 30"]
        C790["CONST: totalFileTokens, VALUE: tokenBreakdown.files.reduce("]
        C791["CONST: fileDetails, VALUE: tokenBreakdown.files"]
        C792["CONST: pathDisplay, VALUE: file.path.length > 40"]
        C793["CONST: totalPromptTokens, VALUE: systemPromptTokens + userPromptTokens"]
        C794["CONST: promptDetails, VALUE: ["]
        C795["CONST: content, VALUE: parts.join('\\n\\n')"]
        C796["CONST: tokenBox, VALUE: boxen(content, {"]
        C797["CONST: codeBlockRegex, VALUE: /```(\\w+)?\\n([\\s\\S]*?)```/g"]
        C798["CONST: lang, VALUE: language || 'javascript'"]
        C799["CONST: highlightedCode, VALUE: highlight(code.trim(), {"]
        C800["CONST: codeBox, VALUE: boxen(highlightedCode, {"]
        C801["CONST: header, VALUE: boxen("]
        C802["CONST: processedResult, VALUE: processCodeBlocks(result)"]
        C803["CONST: contentBox, VALUE: boxen(processedResult, {"]
        C804["CONST: updateTaskById, VALUE: (await import('./update-task-by-id.js')).default"]
        C805["CONST: saveResult, VALUE: await handleSaveToTask("]
        C806["CONST: conversationContext, VALUE: buildConversationContext(conversationHistory)"]
        C807["CONST: followUpOptions, VALUE: {"]
        C808["CONST: followUpResult, VALUE: await performResearch("]
        C809["CONST: trimmedInput, VALUE: input.trim()"]
        C810["CONST: trimmedTaskId, VALUE: taskId.trim()"]
        C811["CONST: conversationThread, VALUE: formatConversationForSaving(conversationHistory)"]
        C812["CONST: isSubtask, VALUE: trimmedTaskId.includes('.')"]
        C813["CONST: data, VALUE: readJSON(tasksPath, projectRoot, context.tag)"]
        C814["CONST: taskIdNum, VALUE: parseInt(trimmedTaskId, 10)"]
        C815["CONST: task, VALUE: data.tasks.find((t) => t.id === taskIdNum)"]
        C816["CONST: researchDir, VALUE: path.join("]
        C817["CONST: firstQuery, VALUE: conversationHistory[0]?.question || 'research-query'"]
        C818["CONST: timestamp, VALUE: new Date().toISOString().split('T')[0]"]
        C819["CONST: querySlug, VALUE: firstQuery"]
        C820["CONST: filename, VALUE: `${timestamp}_${querySlug}.md`"]
        C821["CONST: filePath, VALUE: path.join(researchDir, filename)"]
        C822["CONST: fileContent, VALUE: formatConversationForFile("]
        C823["CONST: relativePath, VALUE: path.relative(projectRoot, filePath)"]
        C824["CONST: date, VALUE: new Date().toLocaleDateString()"]
        C825["CONST: time, VALUE: new Date().toLocaleTimeString()"]
        C826["CONST: contextParts, VALUE: ['--- Conversation History ---']"]
        C827["CONST: questionLabel, VALUE: exchange.type === 'initial' ? 'Initial Question' : `Follow-up ${index}`"]
        C828["CONST: answerLabel, VALUE: exchange.type === 'initial' ? 'Initial Answer' : `Answer ${index}`"]
        C829["CONST: successMessage, VALUE: `Successfully set response language to: ${lang}`"]
        C830["CONST: VALID_STRENGTHS, VALUE: ['light', 'regular', 'heavy']"]
        C831["CONST: PRESERVE_STATUSES, VALUE: ["]
        C832["CONST: REGENERATE_STATUSES, VALUE: ['pending']"]
        C833["CONST: tasksForAnalysis, VALUE: {"]
        C834["CONST: complexityReportPath, VALUE: findComplexityReportPath("]
        C835["CONST: analysisOptions, VALUE: {"]
        C836["CONST: updatedReport, VALUE: readComplexityReport(complexityReportPath)"]
        C837["CONST: taskAnalysis, VALUE: findTaskInComplexityReport(updatedReport, task.id)"]
        C838["CONST: complexityReport, VALUE: readComplexityReport(complexityReportPath)"]
        C839["CONST: taskAnalysis, VALUE: findTaskInComplexityReport(complexityReport, taskId)"]
        C840["CONST: preservedSubtasks, VALUE: task.subtasks.filter((subtask) =>"]
        C841["CONST: pendingSubtasks, VALUE: task.subtasks.filter((subtask) =>"]
        C842["CONST: preservedCount, VALUE: preservedSubtasks.length"]
        C843["CONST: currentPendingCount, VALUE: pendingSubtasks.length"]
        C844["CONST: complexityFactor, VALUE: originalComplexity"]
        C845["CONST: complexityInfo, VALUE: originalComplexity"]
        C846["CONST: base, VALUE: Math.max("]
        C847["CONST: aggressiveFactor, VALUE: originalComplexity >= 8 ? 0.7 : originalComplexity >= 6 ? 0.85 : 1.0"]
        C848["CONST: ultraAggressiveFactor, VALUE: originalComplexity >= 9 ? 0.3 : originalComplexity >= 7 ? 0.5 : 0.7"]
        C849["CONST: newSubtasksNeeded, VALUE: Math.max(1, targetSubtaskCount - preservedCount)"]
        C850["CONST: systemPrompt, VALUE: `You are an expert project manager who creates task breakdowns that match complexity levels.`"]
        C851["CONST: prompt, VALUE: `Based on this updated task, generate ${newSubtasksNeeded} NEW subtasks that reflect the ${direction === 'up' ? 'incr..."]
        C852["CONST: subtaskSchema, VALUE: z.object({"]
        C853["CONST: aiResult, VALUE: await generateObjectService({"]
        C854["CONST: generatedSubtasks, VALUE: aiResult.mainResult.subtasks || []"]
        C855["CONST: processedGeneratedSubtasks, VALUE: generatedSubtasks.map((subtask) => ({"]
        C856["CONST: isUp, VALUE: direction === 'up'"]
        C857["CONST: strengthDescriptions, VALUE: {"]
        C858["CONST: systemPrompt, VALUE: `You are an expert software project manager who helps adjust task complexity while maintaining clarity and actionabil..."]
        C859["CONST: prompt, VALUE: generateScopePrompt(task, direction, strength, customPrompt)"]
        C860["CONST: taskSchema, VALUE: z.object({"]
        C861["CONST: updatedTaskData, VALUE: aiResult.mainResult"]
        C862["CONST: processedTaskData, VALUE: {"]
        C863["CONST: tasks, VALUE: data?.tasks || []"]
        C864["CONST: updatedTasks, VALUE: []"]
        C865["CONST: taskResult, VALUE: findTaskById(tasks, taskId)"]
        C866["CONST: task, VALUE: taskResult.task"]
        C867["CONST: originalComplexity, VALUE: getCurrentComplexityScore(taskId, context)"]
        C868["CONST: adjustResult, VALUE: await adjustTaskComplexity("]
        C869["CONST: subtaskResult, VALUE: await regenerateSubtasksForComplexity("]
        C870["CONST: taskIndex, VALUE: data.tasks.findIndex((t) => t.id === taskId)"]
        C871["CONST: newComplexity, VALUE: await reanalyzeTaskComplexity("]
        C872["CONST: complexityChange, VALUE: newComplexity - originalComplexity"]
        C873["CONST: arrow, VALUE: complexityChange > 0 ? '↗️' : complexityChange < 0 ? '↘️' : '➡️'"]
        C874["CONST: data, VALUE: {"]
        C875["CONST: taskIds, VALUE: taskIdInput.split(',').map((id) => id.trim())"]
        C876["CONST: subtask, VALUE: parentTask.subtasks.find((st) => st.id === subtaskId)"]
        C877["CONST: taskId, VALUE: parseInt(id, 10)"]
        C878["CONST: logFn, VALUE: mcpLog || {"]
        C879["CONST: reservedNames, VALUE: ['master', 'main', 'default']"]
        C880["CONST: sourceTag, VALUE: copyFromTag || getCurrentTag(projectRoot)"]
        C881["CONST: cleanData, VALUE: {}"]
        C882["CONST: isCurrentTag, VALUE: currentTag === tagName"]
        C883["CONST: tasks, VALUE: getTasksForTag(rawData, tagName)"]
        C884["CONST: taskCount, VALUE: tasks.length"]
        C885["CONST: firstConfirm, VALUE: await inquirer.prompt(["]
        C886["CONST: secondConfirm, VALUE: await inquirer.prompt(["]
        C887["CONST: stats, VALUE: fs.statSync(tasksPath)"]
        C888["CONST: logFn, VALUE: context.mcpLog || {"]
        C889["CONST: rawData, VALUE: data._rawTaggedData || data"]
        C890["CONST: tagList, VALUE: []"]
        C891["CONST: tasks, VALUE: tagData.tasks || []"]
        C892["CONST: metadata, VALUE: tagData.metadata || {}"]
        C893["CONST: headers, VALUE: [chalk.cyan.bold('Tag Name')]"]
        C894["CONST: row, VALUE: []"]
        C895["CONST: tagDisplay, VALUE: tag.isCurrent"]
        C896["CONST: createdDate, VALUE: tag.created !== 'Unknown'"]
        C897["CONST: previousTag, VALUE: getCurrentTag(projectRoot)"]
        C898["CONST: tagData, VALUE: readJSON(tasksPath, projectRoot, tagName)"]
        C899["CONST: tasks, VALUE: tagData ? tagData.tasks || [] : []"]
        C900["CONST: nextTask, VALUE: findNextTask(tasks)"]
        C901["CONST: isCurrentTag, VALUE: currentTag === oldName"]
        C902["CONST: tasks, VALUE: getTasksForTag(rawData, newName)"]
        C903["CONST: sourceTasks, VALUE: getTasksForTag(rawData, sourceName)"]
        C904["CONST: statePath, VALUE: path.join(projectRoot, '.taskmaster', 'state.json')"]
        C905["CONST: rawState, VALUE: fs.readFileSync(statePath, 'utf8')"]
        C906["CONST: state, VALUE: JSON.parse(rawState)"]
        C907["CONST: tagName, VALUE: sanitizeBranchNameForTag(branchName)"]
        C908["CONST: createResult, VALUE: await createTag("]
        C909["CONST: currentBranch, VALUE: await getCurrentBranch(projectRoot)"]
        C910["CONST: tagExists, VALUE: rawData[tagName]"]
        C911["CONST: createResult, VALUE: await createTagFromBranch("]
        C912["CONST: switchResult, VALUE: await useTag("]
        C913["CONST: configPath, VALUE: path.join(projectRoot, '.taskmaster', 'config.json')"]
        C914["CONST: rawConfig, VALUE: fs.readFileSync(configPath, 'utf8')"]
        C915["CONST: config, VALUE: JSON.parse(rawConfig)"]
        C916["CONST: subtaskId, VALUE: parseInt(subtaskIdStr, 10)"]
        C917["CONST: oldStatus, VALUE: subtask.status || 'pending'"]
        C918["CONST: allSubtasksDone, VALUE: parentTask.subtasks.every("]
        C919["CONST: taskId, VALUE: parseInt(taskIdInput, 10)"]
        C920["CONST: oldStatus, VALUE: task.status || 'pending'"]
        C921["CONST: pendingSubtasks, VALUE: task.subtasks.filter("]
        C922["CONST: logFn, VALUE: mcpLog || consoleLog"]
        C923["CONST: parentTask, VALUE: data.tasks.find((task) => task.id === parentId)"]
        C924["CONST: subtask, VALUE: parentTask.subtasks[subtaskIndex]"]
        C925["CONST: fuzzySearch, VALUE: new FuzzyTaskSearch(allTasksFlat, 'update-subtask')"]
        C926["CONST: searchQuery, VALUE: `${parentTask.title} ${subtask.title} ${prompt}`"]
        C927["CONST: parentContext, VALUE: {"]
        C928["CONST: prevSubtask, VALUE: subtaskIndex > 0"]
        C929["CONST: nextSubtask, VALUE: subtaskIndex < parentTask.subtasks.length - 1"]
        C930["CONST: variantKey, VALUE: useResearch ? 'research' : 'default'"]
        C931["CONST: formattedBlock, VALUE: `<info added on ${timestamp}>\\n${generatedContentString.trim()}\\n</info added on ${timestamp}>`"]
        C932["CONST: updatedSubtask, VALUE: parentTask.subtasks[subtaskIndex]"]
        C933["CONST: updatedTaskSchema, VALUE: z"]
        C934["CONST: originalResponseForDebug, VALUE: cleanedResponse"]
        C935["CONST: firstBraceIndex, VALUE: cleanedResponse.indexOf('{')"]
        C936["CONST: lastBraceIndex, VALUE: cleanedResponse.lastIndexOf('}')"]
        C937["CONST: testParse, VALUE: JSON.parse(potentialJsonFromBraces)"]
        C938["CONST: commonPrefixes, VALUE: ["]
        C939["CONST: preprocessedTask, VALUE: {"]
        C940["CONST: validationResult, VALUE: updatedTaskSchema.safeParse(preprocessedTask)"]
        C941["CONST: taskIndex, VALUE: data.tasks.findIndex((task) => task.id === taskId)"]
        C942["CONST: taskToUpdate, VALUE: data.tasks[taskIndex]"]
        C943["CONST: fuzzySearch, VALUE: new FuzzyTaskSearch(allTasksFlat, 'update-task')"]
        C944["CONST: searchQuery, VALUE: `${taskToUpdate.title} ${taskToUpdate.description} ${prompt}`"]
        C945["CONST: variantKey, VALUE: appendMode"]
        C946["CONST: promptResult, VALUE: await promptManager.loadPrompt("]
        C947["CONST: generatedContentString, VALUE: aiServiceResponse.mainResult"]
        C948["CONST: updatedTask, VALUE: parseUpdatedTaskFromText("]
        C949["CONST: completedOriginal, VALUE: taskToUpdate.subtasks.filter("]
        C950["CONST: updatedSub, VALUE: updatedTask.subtasks.find("]
        C951["CONST: subtaskIds, VALUE: new Set()"]
        C952["CONST: preprocessTaskSchema, VALUE: z.preprocess((task) => {"]
        C953["CONST: updatedTaskArraySchema, VALUE: z.array(updatedTaskSchema)"]
        C954["CONST: preprocessedTaskArraySchema, VALUE: z.array(preprocessTaskSchema)"]
        C955["CONST: firstBracketIndex, VALUE: cleanedResponse.indexOf('[')"]
        C956["CONST: lastBracketIndex, VALUE: cleanedResponse.lastIndexOf(']')"]
        C957["CONST: testParse, VALUE: JSON.parse(potentialJsonFromArray)"]
        C958["CONST: missingFields, VALUE: []"]
        C959["CONST: preprocessResult, VALUE: preprocessedTaskArraySchema.safeParse(parsedTasks)"]
        C960["CONST: tasksToUpdate, VALUE: data.tasks.filter("]
        C961["CONST: fuzzySearch, VALUE: new FuzzyTaskSearch(allTasksFlat, 'update')"]
        C962["CONST: searchResults, VALUE: fuzzySearch.findRelevantTasks(prompt, {"]
        C963["CONST: tasksToUpdateIds, VALUE: tasksToUpdate.map((t) => t.id.toString())"]
        C964["CONST: parsedUpdatedTasks, VALUE: parseUpdatedTasksFromText("]
        C965["CONST: updatedTasksMap, VALUE: new Map("]
        C966["CONST: updatedTask, VALUE: updatedTasksMap.get(task.id)"]
        C967["CONST: coolGradient, VALUE: gradient(['#00b4d8', '#0077b6', '#03045e'])"]
        C968["CONST: warmGradient, VALUE: gradient(['#fb8b24', '#e36414', '#9a031e'])"]
        C969["CONST: tagIcon, VALUE: '🏷️'"]
        C970["CONST: tagText, VALUE: dim"]
        C971["CONST: bannerText, VALUE: figlet.textSync('Task Master', {"]
        C972["CONST: version, VALUE: getTaskMasterVersion()"]
        C973["CONST: spinner, VALUE: ora({"]
        C974["CONST: effectivePercent, VALUE: statusBreakdown"]
        C975["CONST: trueCompletedFilled, VALUE: Math.round((percent * length) / 100)"]
        C976["CONST: effectiveCompletedFilled, VALUE: Math.round("]
        C977["CONST: deferredCancelledFilled, VALUE: effectiveCompletedFilled - trueCompletedFilled"]
        C978["CONST: empty, VALUE: length - effectiveCompletedFilled"]
        C979["CONST: completedSection, VALUE: completedColor('█'.repeat(trueCompletedFilled))"]
        C980["CONST: deferredCancelledSection, VALUE: chalk.gray("]
        C981["CONST: totalRemaining, VALUE: Object.entries(statusBreakdown)"]
        C982["CONST: statusChars, VALUE: Math.round((percentage / totalRemaining) * empty)"]
        C983["CONST: actualChars, VALUE: Math.min(statusChars, empty - addedChars)"]
        C984["CONST: colorFn, VALUE: statusColors[status] || chalk.gray"]
        C985["CONST: percentTextColor, VALUE: percent === 100"]
        C986["CONST: statusConfig, VALUE: {"]
        C987["CONST: config, VALUE: statusConfig[status.toLowerCase()] || {"]
        C988["CONST: simpleIcons, VALUE: {"]
        C989["CONST: simpleIcon, VALUE: simpleIcons[status.toLowerCase()] || 'x'"]
        C990["CONST: formattedDeps, VALUE: dependencies.map((depId) => {"]
        C991["CONST: depIdStr, VALUE: depId.toString()"]
        C992["CONST: parentTask, VALUE: allTasks.find((t) => t.id === parentId)"]
        C993["CONST: isDone, VALUE: status.toLowerCase() === 'done' || status.toLowerCase() === 'completed'"]
        C994["CONST: isInProgress, VALUE: status.toLowerCase() === 'in-progress'"]
        C995["CONST: numericDepId, VALUE: typeof depId === 'string' ? parseInt(depId, 10) : depId"]
        C996["CONST: depTaskResult, VALUE: findTaskById("]
        C997["CONST: depTask, VALUE: depTaskResult.task"]
        C998["CONST: status, VALUE: depTask.status || 'pending'"]
        C999["CONST: terminalWidth, VALUE: process.stdout.columns || 100"]
        C1000["CONST: commandCategories, VALUE: ["]
        C1001["CONST: nameWidth, VALUE: Math.max(25, Math.floor(terminalWidth * 0.2))"]
        C1002["CONST: argsWidth, VALUE: Math.max(40, Math.floor(terminalWidth * 0.35))"]
        C1003["CONST: descWidth, VALUE: Math.max(45, Math.floor(terminalWidth * 0.45) - 10)"]
        C1004["CONST: commandTable, VALUE: new Table({"]
        C1005["CONST: configTerminalWidth, VALUE: terminalWidth || process.stdout.columns || 100"]
        C1006["CONST: configKeyWidth, VALUE: Math.max(30, Math.floor(configTerminalWidth * 0.25))"]
        C1007["CONST: configDescWidth, VALUE: Math.max(50, Math.floor(configTerminalWidth * 0.45))"]
        C1008["CONST: configValueWidth, VALUE: Math.max("]
        C1009["CONST: configTable, VALUE: new Table({"]
        C1010["CONST: taskTable, VALUE: new Table({"]
        C1011["CONST: priorityColor, VALUE: priorityColors[nextTask.priority || 'medium'] || chalk.white"]
        C1012["CONST: isSubtask, VALUE: !!nextTask.parentId"]
        C1013["CONST: availableWidth, VALUE: process.stdout.columns - 10 || 100"]
        C1014["CONST: idWidthPct, VALUE: 8"]
        C1015["CONST: depsWidthPct, VALUE: 25"]
        C1016["CONST: titleWidthPct, VALUE: 100 - idWidthPct - statusWidthPct - depsWidthPct"]
        C1017["CONST: subtaskTable, VALUE: new Table({"]
        C1018["CONST: statusColor, VALUE: {"]
        C1019["CONST: formattedDeps, VALUE: st.dependencies.map((depId) => {"]
        C1020["CONST: foundSubtask, VALUE: nextTask.subtasks.find("]
        C1021["CONST: priorityColor, VALUE: priorityColors[task.priority || 'medium'] || chalk.white"]
        C1022["CONST: idWidthPct, VALUE: 10"]
        C1023["CONST: statusColorMap, VALUE: {"]
        C1024["CONST: statusColor, VALUE: statusColorMap[st.status || 'pending'] || chalk.white"]
        C1025["CONST: sourceListForDeps, VALUE: originalSubtasks || task.subtasks"]
        C1026["CONST: foundDepSubtask, VALUE: typeof depId === 'number' && depId < 100"]
        C1027["CONST: isDone, VALUE: foundDepSubtask.status === 'done' ||"]
        C1028["CONST: isInProgress, VALUE: foundDepSubtask.status === 'in-progress'"]
        C1029["CONST: color, VALUE: isDone"]
        C1030["CONST: actualSubtasks, VALUE: originalSubtasks || task.subtasks"]
        C1031["CONST: subtasksForProgress, VALUE: originalSubtasks || task.subtasks"]
        C1032["CONST: totalSubtasks, VALUE: subtasksForProgress.length"]
        C1033["CONST: completedSubtasks, VALUE: subtasksForProgress.filter("]
        C1034["CONST: inProgressSubtasks, VALUE: subtasksForProgress.filter("]
        C1035["CONST: pendingSubtasks, VALUE: subtasksForProgress.filter("]
        C1036["CONST: blockedSubtasks, VALUE: subtasksForProgress.filter("]
        C1037["CONST: deferredSubtasks, VALUE: subtasksForProgress.filter("]
        C1038["CONST: cancelledSubtasks, VALUE: subtasksForProgress.filter("]
        C1039["CONST: statusBreakdown, VALUE: {"]
        C1040["CONST: completionPercentage, VALUE: (completedSubtasks / totalSubtasks) * 100"]
        C1041["CONST: availableWidth, VALUE: process.stdout.columns || 80"]
        C1042["CONST: boxPadding, VALUE: 2"]
        C1043["CONST: boxBorders, VALUE: 2"]
        C1044["CONST: percentTextLength, VALUE: 5"]
        C1045["CONST: progressBarLength, VALUE: Math.max("]
        C1046["CONST: statusCounts, VALUE: `${chalk.green('✓ Done:')} ${completedSubtasks}  ${chalk.hex('#FFA500')('► In Progress:')} ${inProgressSubtasks}  ${c..."]
        C1047["CONST: actions, VALUE: []"]
        C1048["CONST: complexityScore, VALUE: task.complexityScore"]
        C1049["CONST: tasksPath, VALUE: TASKMASTER_TASKS_FILE"]
        C1050["CONST: metaTable, VALUE: new Table({"]
        C1051["CONST: sortedTasks, VALUE: [...report.complexityAnalysis].sort("]
        C1052["CONST: tasksNeedingExpansion, VALUE: sortedTasks.filter("]
        C1053["CONST: simpleTasks, VALUE: sortedTasks.filter("]
        C1054["CONST: complexityDistribution, VALUE: [0, 0, 0]"]
        C1055["CONST: percentLow, VALUE: Math.round("]
        C1056["CONST: percentMedium, VALUE: Math.round("]
        C1057["CONST: percentHigh, VALUE: Math.round("]
        C1058["CONST: idWidth, VALUE: 12"]
        C1059["CONST: titleWidth, VALUE: Math.floor(terminalWidth * 0.25)"]
        C1060["CONST: scoreWidth, VALUE: 8"]
        C1061["CONST: subtasksWidth, VALUE: 8"]
        C1062["CONST: commandWidth, VALUE: terminalWidth - idWidth - titleWidth - scoreWidth - subtasksWidth - 10"]
        C1063["CONST: complexTable, VALUE: new Table({"]
        C1064["CONST: expansionCommand, VALUE: `task-master expand --id=${task.taskId} --num=${task.recommendedSubtasks}${task.expansionPrompt ? ` --prompt=\${task...."]
        C1065["CONST: simpleTable, VALUE: new Table({"]
        C1066["CONST: defaultSubtasks, VALUE: getDefaultSubtasks(null)"]
        C1067["CONST: cliStatus, VALUE: cli ? chalk.green('✅ Found') : chalk.red('❌ Missing')"]
        C1068["CONST: mcpStatus, VALUE: mcp ? chalk.green('✅ Found') : chalk.red('❌ Missing')"]
        C1069["CONST: providerName, VALUE: provider.charAt(0).toUpperCase() + provider.slice(1)"]
        C1070["CONST: formatSweScoreWithTertileStars, VALUE: (score, allModels) => {"]
        C1071["CONST: formattedPercentage, VALUE: `${(score * 100).toFixed(1)}%`"]
        C1072["CONST: validScores, VALUE: allModels"]
        C1073["CONST: sortedScores, VALUE: [...validScores].sort((a, b) => b - a)"]
        C1074["CONST: n, VALUE: sortedScores.length"]
        C1075["CONST: topThirdIndex, VALUE: Math.max(0, Math.floor(n / 3) - 1)"]
        C1076["CONST: midThirdIndex, VALUE: Math.max(0, Math.floor((2 * n) / 3) - 1)"]
        C1077["CONST: formatCost, VALUE: (costObj) => {"]
        C1078["CONST: formatSingleCost, VALUE: (costValue) => {"]
        C1079["CONST: isInteger, VALUE: Number.isInteger(costValue)"]
        C1080["CONST: active, VALUE: configData.activeModels"]
        C1081["CONST: activeTable, VALUE: new Table({"]
        C1082["CONST: availableTable, VALUE: new Table({"]
        C1083["CONST: projectRoot, VALUE: context.projectRoot || null"]
        C1084["CONST: tag, VALUE: context.tag || null"]
        C1085["CONST: parentId, VALUE: task.parentTask ? task.parentTask.id : 'Unknown'"]
        C1086["CONST: total, VALUE: task.subtasks.length"]
        C1087["CONST: completed, VALUE: task.subtasks.filter("]
        C1088["CONST: inProgress, VALUE: task.subtasks.filter("]
        C1089["CONST: pending, VALUE: task.subtasks.filter("]
        C1090["CONST: completionPercentage, VALUE: (completed / total) * 100"]
        C1091["CONST: barLength, VALUE: 8"]
        C1092["CONST: choice, VALUE: await new Promise((resolve) => {"]
        C1093["CONST: rl2, VALUE: readline.createInterface({"]
        C1094["CONST: actionChoice, VALUE: await new Promise((resolve) => {"]
        C1095["CONST: taskIdList, VALUE: foundTasks.map((t) => t.id).join(',')"]
        C1096["CONST: task, VALUE: foundTasks[0]"]
        C1097["CONST: recentTasksNotInRelevance, VALUE: recentTasks.filter("]
        C1098["CONST: __dirname, VALUE: dirname(__filename)"]
        C1099["CONST: supportedModelsPath, VALUE: path.join(__dirname, 'supported-models.json')"]
        C1100["CONST: supportedModels, VALUE: JSON.parse("]
        C1101["CONST: config, VALUE: JSON.parse(fs.readFileSync(configPath, 'utf-8'))"]
        C1102["CONST: roles, VALUE: ['main', 'research', 'fallback']"]
        C1103["CONST: provider, VALUE: config.models[role].provider"]
        C1104["CONST: modelId, VALUE: config.models[role].modelId"]
        C1105["CONST: modelData, VALUE: supportedModels[provider].find("]
        C1106["CONST: envPath, VALUE: path.join(projectRoot, '.env')"]
        C1107["CONST: envFileContent, VALUE: fs.readFileSync(envPath, 'utf-8')"]
        C1108["CONST: parsedEnv, VALUE: dotenv.parse(envFileContent)"]
        C1109["CONST: parsedPath, VALUE: path.parse(basePath)"]
        C1110["CONST: slugifiedTag, VALUE: slugifyTagForFilePath(tag)"]
        C1111["CONST: relativePath, VALUE: path.format(parsedPath)"]
        C1112["CONST: rootPath, VALUE: path.parse(currentPath).root"]
        C1113["CONST: hasMarker, VALUE: markers.some((marker) => {"]
        C1114["CONST: markerPath, VALUE: path.join(currentPath, marker)"]
        C1115["CONST: hasMarkerInRoot, VALUE: markers.some((marker) => {"]
        C1116["CONST: markerPath, VALUE: path.join(rootPath, marker)"]
        C1117["CONST: LOG_LEVELS, VALUE: {"]
        C1118["CONST: prefixes, VALUE: {"]
        C1119["CONST: currentLevel, VALUE: LOG_LEVELS.hasOwnProperty(level) ? level : 'info'"]
        C1120["CONST: prefix, VALUE: prefixes[currentLevel] || ''"]
        C1121["CONST: message, VALUE: args"]
        C1122["CONST: parsedId, VALUE: parseInt(task.id, 10)"]
        C1123["CONST: parts, VALUE: subtask.id.split('.')"]
        C1124["CONST: parsedSubtaskId, VALUE: parseInt(subtask.id, 10)"]
        C1125["CONST: migratedData, VALUE: {"]
        C1126["CONST: originalTaggedData, VALUE: JSON.parse(JSON.stringify(data))"]
        C1127["CONST: derivedProjectRoot, VALUE: findProjectRoot(path.dirname(filepath))"]
        C1128["CONST: tagData, VALUE: data[resolvedTag]"]
        C1129["CONST: masterData, VALUE: data.master"]
        C1130["CONST: projectRoot, VALUE: findProjectRoot(path.dirname(tasksJsonPath)) ||"]
        C1131["CONST: initialState, VALUE: {"]
        C1132["CONST: projectRoot, VALUE: path.dirname(path.dirname(tasksJsonPath))"]
        C1133["CONST: stateData, VALUE: JSON.parse(rawState) || {}"]
        C1134["CONST: isDebug, VALUE: process.env.TASKMASTER_DEBUG === 'true'"]
        C1135["CONST: resolvedTag, VALUE: tag || getCurrentTag(projectRoot)"]
        C1136["CONST: rawFullData, VALUE: JSON.parse(fs.readFileSync(filepath, 'utf8'))"]
        C1137["CONST: originalTaggedData, VALUE: data._rawTaggedData"]
        C1138["CONST: finalCleanData, VALUE: {}"]
        C1139["CONST: newPath, VALUE: path.join(process.cwd(), COMPLEXITY_REPORT_FILE)"]
        C1140["CONST: legacyPath, VALUE: path.join("]
        C1141["CONST: reportData, VALUE: readJSON(reportPath)"]
        C1142["CONST: task, VALUE: tasks.find((t) => t.id === id) || null"]
        C1143["CONST: filteredTask, VALUE: { ...task }"]
        C1144["CONST: cyclesToBreak, VALUE: []"]
        C1145["CONST: dependencies, VALUE: dependencyMap.get(subtaskId) || []"]
        C1146["CONST: cycles, VALUE: findCycles(depId, dependencyMap, visited, recursionStack, ["]
        C1147["CONST: cycleStartIndex, VALUE: path.indexOf(depId)"]
        C1148["CONST: cycleEdges, VALUE: path.slice(cycleStartIndex)"]
        C1149["CONST: toKebabCase, VALUE: (str) => {"]
        C1150["CONST: withReplacedAcronyms, VALUE: str"]
        C1151["CONST: camelCaseFlags, VALUE: []"]
        C1152["CONST: flagName, VALUE: arg.split('=')[0].slice(2)"]
        C1153["CONST: kebabVersion, VALUE: toKebabCase(flagName)"]
        C1154["CONST: aggregated, VALUE: {"]
        C1155["CONST: uniqueModels, VALUE: new Set()"]
        C1156["CONST: uniqueProviders, VALUE: new Set()"]
        C1157["CONST: uniqueCurrencies, VALUE: new Set()"]
        C1158["CONST: stateData, VALUE: JSON.parse(rawState)"]
        C1159["CONST: configData, VALUE: JSON.parse(rawConfig)"]
        C1160["CONST: flattened, VALUE: []"]
        C1161["CONST: now, VALUE: new Date().toISOString()"]
    end
    subgraph file1["mcp-server/src/core/direct-functions/add-dependency.js"]
        subgraph file1Imports["add-dependency.js-Imports"]
            I1["IMPORT: ../../../../scripts/modules/dependency-manager.js, FROM: /claude-task-master/scripts/modules/dependency-manager.js"]
        end
        subgraph file1Functions["add-dependency.js-Functions Defined"]
            FU1["FUNCTION: addDependencyDirect"]
        end
        subgraph file1Exports["add-dependency.js-Exports"]
            E0["(none)"]
        end
        subgraph file1Constants["add-dependency.js-Const Declarations"]
            C1["CONST: tasksPath, VALUE: tasksJsonPath"]
            C2["CONST: taskId, VALUE: id && id.includes && id.includes('.') ? id : parseInt(id, 10)"]
            C3["CONST: dependencyId, VALUE: dependsOn && dependsOn.includes && dependsOn.includes('.')"]
            C4["CONST: context, VALUE: { projectRoot, tag }"]
        end
        subgraph file1Flow["add-dependency.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
        end
    end
    subgraph file2["mcp-server/src/core/direct-functions/add-subtask.js"]
        subgraph file2Imports["add-subtask.js-Imports"]
            I1["IMPORT: ../../../../scripts/modules/task-manager.js, FROM: /claude-task-master/scripts/modules/task-manager.js"]
        end
        subgraph file2Functions["add-subtask.js-Functions Defined"]
            FU1["FUNCTION: addSubtaskDirect"]
        end
        subgraph file2Exports["add-subtask.js-Exports"]
            E0["(none)"]
        end
        subgraph file2Constants["add-subtask.js-Const Declarations"]
            C1["CONST: tasksPath, VALUE: tasksJsonPath"]
            C2["CONST: existingTaskId, VALUE: taskId ? parseInt(taskId, 10) : null"]
            C3["CONST: parentId, VALUE: parseInt(id, 10)"]
            C4["CONST: generateFiles, VALUE: !skipGenerate"]
            C5["CONST: context, VALUE: { projectRoot, tag }"]
            C6["CONST: result, VALUE: await addSubtask("]
            C7["CONST: newSubtaskData, VALUE: {"]
            C8["CONST: result, VALUE: await addSubtask("]
        end
        subgraph file2Flow["add-subtask.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
        end
    end
    subgraph file3["mcp-server/src/core/direct-functions/add-tag.js"]
        subgraph file3Imports["add-tag.js-Imports"]
            I1["IMPORT: ../../tools/utils.js, FROM: /claude-task-master/mcp-server/src/tools/utils.js"]
        end
        subgraph file3Functions["add-tag.js-Functions Defined"]
            FU1["FUNCTION: addTagDirect"]
        end
        subgraph file3Exports["add-tag.js-Exports"]
            E0["(none)"]
        end
        subgraph file3Constants["add-tag.js-Const Declarations"]
            C1["CONST: mcpLog, VALUE: createLogWrapper(log)"]
            C2["CONST: gitUtils, VALUE: await import("]
            C3["CONST: currentBranch, VALUE: await gitUtils.getCurrentBranch(projectRoot)"]
            C4["CONST: branchOptions, VALUE: {"]
            C5["CONST: result, VALUE: await createTagFromBranch("]
            C6["CONST: options, VALUE: {"]
            C7["CONST: result, VALUE: await createTag("]
        end
        subgraph file3Flow["add-tag.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
        end
    end
    subgraph file4["mcp-server/src/core/direct-functions/add-task.js"]
        subgraph file4Imports["add-task.js-Imports"]
            I1["IMPORT: ../../../../scripts/modules/task-manager.js, FROM: /claude-task-master/scripts/modules/task-manager.js"]
            I2["IMPORT: ../../tools/utils.js, FROM: /claude-task-master/mcp-server/src/tools/utils.js"]
        end
        subgraph file4Functions["add-task.js-Functions Defined"]
            FU1["FUNCTION: addTaskDirect"]
        end
        subgraph file4Exports["add-task.js-Exports"]
            E0["(none)"]
        end
        subgraph file4Constants["add-task.js-Const Declarations"]
            C1["CONST: mcpLog, VALUE: createLogWrapper(log)"]
            C2["CONST: tasksPath, VALUE: tasksJsonPath"]
            C3["CONST: isManualCreation, VALUE: args.title && args.description"]
            C4["CONST: taskDependencies, VALUE: Array.isArray(dependencies)"]
            C5["CONST: taskPriority, VALUE: priority || 'medium'"]
            C6["CONST: result, VALUE: await addTask("]
            C7["CONST: result, VALUE: await addTask("]
        end
        subgraph file4Flow["add-task.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
        end
    end
    subgraph file5["mcp-server/src/core/direct-functions/analyze-task-complexity.js"]
        subgraph file5Imports["analyze-task-complexity.js-Imports"]
            I1["IMPORT: ../../../../scripts/modules/task-manager/analyze-task-complexity.js, FROM: /claude-task-master/scripts/modules/task-manager/analyze-task-complexity.js"]
            I2["IMPORT: fs, FROM: fs"]
            I3["IMPORT: ../../tools/utils.js, FROM: /claude-task-master/mcp-server/src/tools/utils.js"]
        end
        subgraph file5Functions["analyze-task-complexity.js-Functions Defined"]
            FU1["FUNCTION: analyzeTaskComplexityDirect"]
        end
        subgraph file5Exports["analyze-task-complexity.js-Exports"]
            E0["(none)"]
        end
        subgraph file5Constants["analyze-task-complexity.js-Const Declarations"]
            C1["CONST: logWrapper, VALUE: createLogWrapper(log)"]
            C2["CONST: tasksPath, VALUE: tasksJsonPath"]
            C3["CONST: resolvedOutputPath, VALUE: outputPath"]
            C4["CONST: fromStr, VALUE: from !== undefined ? from : 'first'"]
            C5["CONST: toStr, VALUE: to !== undefined ? to : 'last'"]
            C6["CONST: coreOptions, VALUE: {"]
            C7["CONST: wasSilent, VALUE: isSilentMode()"]
            C8["CONST: analysisArray, VALUE: Array.isArray(coreResult.report.complexityAnalysis)"]
            C9["CONST: highComplexityTasks, VALUE: analysisArray.filter("]
            C10["CONST: mediumComplexityTasks, VALUE: analysisArray.filter("]
            C11["CONST: lowComplexityTasks, VALUE: analysisArray.filter("]
        end
        subgraph file5Flow["analyze-task-complexity.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
        end
    end
    subgraph file6["mcp-server/src/core/direct-functions/cache-stats.js"]
        subgraph file6Imports["cache-stats.js-Imports"]
            I1["IMPORT: ../context-manager.js, FROM: /claude-task-master/mcp-server/src/core/context-manager.js"]
        end
        subgraph file6Functions["cache-stats.js-Functions Defined"]
            FU1["FUNCTION: getCacheStatsDirect"]
        end
        subgraph file6Exports["cache-stats.js-Exports"]
            E0["(none)"]
        end
        subgraph file6Constants["cache-stats.js-Const Declarations"]
            C1["CONST: stats, VALUE: contextManager.getStats()"]
        end
        subgraph file6Flow["cache-stats.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
        end
    end
    subgraph file7["mcp-server/src/core/direct-functions/clear-subtasks.js"]
        subgraph file7Imports["clear-subtasks.js-Imports"]
            I1["IMPORT: ../../../../scripts/modules/task-manager.js, FROM: /claude-task-master/scripts/modules/task-manager.js"]
            I2["IMPORT: fs, FROM: fs"]
            I3["IMPORT: path, FROM: path"]
        end
        subgraph file7Functions["clear-subtasks.js-Functions Defined"]
            FU1["FUNCTION: clearSubtasksDirect"]
            FU2["FUNCTION: clearSubtasks"]
        end
        subgraph file7Exports["clear-subtasks.js-Exports"]
            E0["(none)"]
        end
        subgraph file7Constants["clear-subtasks.js-Const Declarations"]
            C1["CONST: tasksPath, VALUE: tasksJsonPath"]
            C2["CONST: data, VALUE: readJSON(tasksPath, projectRoot, tag)"]
            C3["CONST: currentTag, VALUE: data.tag || tag"]
            C4["CONST: tasks, VALUE: data.tasks"]
            C5["CONST: updatedData, VALUE: readJSON(tasksPath, projectRoot, currentTag)"]
            C6["CONST: taskIdArray, VALUE: taskIds.split(',').map((id) => parseInt(id.trim(), 10))"]
            C7["CONST: clearedTasksCount, VALUE: taskIdArray.length"]
            C8["CONST: updatedTasks, VALUE: updatedData.tasks || []"]
            C9["CONST: taskSummary, VALUE: taskIdArray.map((id) => {"]
            C10["CONST: task, VALUE: updatedTasks.find((t) => t.id === id)"]
        end
        subgraph file7Flow["clear-subtasks.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
        end
    end
    subgraph file8["mcp-server/src/core/direct-functions/complexity-report.js"]
        subgraph file8Imports["complexity-report.js-Imports"]
            I0["(none)"]
        end
        subgraph file8Functions["complexity-report.js-Functions Defined"]
            FU1["FUNCTION: complexityReportDirect"]
            FU2["FUNCTION: coreActionFn"]
        end
        subgraph file8Exports["complexity-report.js-Exports"]
            E0["(none)"]
        end
        subgraph file8Constants["complexity-report.js-Const Declarations"]
            C1["CONST: cacheKey, VALUE: `complexityReport:${reportPath}`"]
            C2["CONST: coreActionFn, VALUE: async () => {"]
            C3["CONST: report, VALUE: readComplexityReport(reportPath)"]
            C4["CONST: result, VALUE: await coreActionFn()"]
        end
        subgraph file8Flow["complexity-report.js-Execution Flow"]
            FL1["Define functions and core logic for this module"]
        end
    end
    subgraph file9["mcp-server/src/core/direct-functions/copy-tag.js"]
        subgraph file9Imports["copy-tag.js-Imports"]
            I1["IMPORT: ../../../../scripts/modules/task-manager/tag-management.js, FROM: /claude-task-master/scripts/modules/task-manager/tag-management.js"]
            I2["IMPORT: ../../tools/utils.js, FROM: /claude-task-master/mcp-server/src/tools/utils.js"]
        end
        subgraph file9Functions["copy-tag.js-Functions Defined"]
            FU1["FUNCTION: copyTagDirect"]
        end
        subgraph file9Exports["copy-tag.js-Exports"]
            E0["(none)"]
        end
        subgraph file9Constants["copy-tag.js-Const Declarations"]
            C1["CONST: mcpLog, VALUE: createLogWrapper(log)"]
            C2["CONST: options, VALUE: {"]
            C3["CONST: result, VALUE: await copyTag("]
        end
        subgraph file9Flow["copy-tag.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
        end
    end
    subgraph file10["mcp-server/src/core/direct-functions/create-tag-from-branch.js"]
        subgraph file10Imports["create-tag-from-branch.js-Imports"]
            I1["IMPORT: ../../../../scripts/modules/task-manager/tag-management.js, FROM: /claude-task-master/scripts/modules/task-manager/tag-management.js"]
            I2["IMPORT: ../../tools/utils.js, FROM: /claude-task-master/mcp-server/src/tools/utils.js"]
        end
        subgraph file10Functions["create-tag-from-branch.js-Functions Defined"]
            FU1["FUNCTION: createTagFromBranchDirect"]
        end
        subgraph file10Exports["create-tag-from-branch.js-Exports"]
            E0["(none)"]
        end
        subgraph file10Constants["create-tag-from-branch.js-Const Declarations"]
            C1["CONST: mcpLog, VALUE: createLogWrapper(log)"]
            C2["CONST: options, VALUE: {"]
            C3["CONST: result, VALUE: await createTagFromBranch("]
        end
        subgraph file10Flow["create-tag-from-branch.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
        end
    end
    subgraph file11["mcp-server/src/core/direct-functions/delete-tag.js"]
        subgraph file11Imports["delete-tag.js-Imports"]
            I1["IMPORT: ../../../../scripts/modules/task-manager/tag-management.js, FROM: /claude-task-master/scripts/modules/task-manager/tag-management.js"]
            I2["IMPORT: ../../tools/utils.js, FROM: /claude-task-master/mcp-server/src/tools/utils.js"]
        end
        subgraph file11Functions["delete-tag.js-Functions Defined"]
            FU1["FUNCTION: deleteTagDirect"]
        end
        subgraph file11Exports["delete-tag.js-Exports"]
            E0["(none)"]
        end
        subgraph file11Constants["delete-tag.js-Const Declarations"]
            C1["CONST: mcpLog, VALUE: createLogWrapper(log)"]
            C2["CONST: options, VALUE: {"]
            C3["CONST: result, VALUE: await deleteTag("]
        end
        subgraph file11Flow["delete-tag.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
        end
    end
    subgraph file12["mcp-server/src/core/direct-functions/expand-all-tasks.js"]
        subgraph file12Imports["expand-all-tasks.js-Imports"]
            I1["IMPORT: ../../../../scripts/modules/task-manager.js, FROM: /claude-task-master/scripts/modules/task-manager.js"]
            I2["IMPORT: ../../tools/utils.js, FROM: /claude-task-master/mcp-server/src/tools/utils.js"]
        end
        subgraph file12Functions["expand-all-tasks.js-Functions Defined"]
            FU1["FUNCTION: expandAllTasksDirect"]
        end
        subgraph file12Exports["expand-all-tasks.js-Exports"]
            E0["(none)"]
        end
        subgraph file12Constants["expand-all-tasks.js-Const Declarations"]
            C1["CONST: mcpLog, VALUE: createLogWrapper(log)"]
            C2["CONST: numSubtasks, VALUE: num ? parseInt(num, 10) : undefined"]
            C3["CONST: useResearch, VALUE: research === true"]
            C4["CONST: additionalContext, VALUE: prompt || ''"]
            C5["CONST: forceFlag, VALUE: force === true"]
            C6["CONST: result, VALUE: await expandAllTasks("]
        end
        subgraph file12Flow["expand-all-tasks.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
        end
    end
    subgraph file13["mcp-server/src/core/direct-functions/expand-task.js"]
        subgraph file13Imports["expand-task.js-Imports"]
            I1["IMPORT: ../../../../scripts/modules/task-manager/expand-task.js, FROM: /claude-task-master/scripts/modules/task-manager/expand-task.js"]
            I2["IMPORT: path, FROM: path"]
            I3["IMPORT: fs, FROM: fs"]
            I4["IMPORT: ../../tools/utils.js, FROM: /claude-task-master/mcp-server/src/tools/utils.js"]
        end
        subgraph file13Functions["expand-task.js-Functions Defined"]
            FU1["FUNCTION: expandTaskDirect"]
            FU2["FUNCTION: if"]
        end
        subgraph file13Exports["expand-task.js-Exports"]
            E0["(none)"]
        end
        subgraph file13Constants["expand-task.js-Const Declarations"]
            C1["CONST: tasksPath, VALUE: tasksJsonPath"]
            C2["CONST: taskId, VALUE: id ? parseInt(id, 10) : null"]
            C3["CONST: numSubtasks, VALUE: num ? parseInt(num, 10) : undefined"]
            C4["CONST: useResearch, VALUE: research === true"]
            C5["CONST: additionalContext, VALUE: prompt || ''"]
            C6["CONST: forceFlag, VALUE: force === true"]
            C7["CONST: data, VALUE: readJSON(tasksPath, projectRoot)"]
            C8["CONST: task, VALUE: data.tasks.find((t) => t.id === taskId)"]
            C9["CONST: hasExistingSubtasks, VALUE: task.subtasks && task.subtasks.length > 0"]
            C10["CONST: originalTask, VALUE: JSON.parse(JSON.stringify(task))"]
            C11["CONST: subtasksCountBefore, VALUE: task.subtasks ? task.subtasks.length : 0"]
            C12["CONST: mcpLog, VALUE: createLogWrapper(log)"]
            C13["CONST: coreResult, VALUE: await expandTask("]
            C14["CONST: updatedData, VALUE: readJSON(tasksPath, projectRoot)"]
            C15["CONST: updatedTask, VALUE: updatedData.tasks.find((t) => t.id === taskId)"]
            C16["CONST: subtasksAdded, VALUE: updatedTask.subtasks"]
        end
        subgraph file13Flow["expand-task.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
        end
    end
    subgraph file14["mcp-server/src/core/direct-functions/fix-dependencies.js"]
        subgraph file14Imports["fix-dependencies.js-Imports"]
            I1["IMPORT: ../../../../scripts/modules/dependency-manager.js, FROM: /claude-task-master/scripts/modules/dependency-manager.js"]
            I2["IMPORT: fs, FROM: fs"]
        end
        subgraph file14Functions["fix-dependencies.js-Functions Defined"]
            FU1["FUNCTION: fixDependenciesDirect"]
        end
        subgraph file14Exports["fix-dependencies.js-Exports"]
            E0["(none)"]
        end
        subgraph file14Constants["fix-dependencies.js-Const Declarations"]
            C1["CONST: tasksPath, VALUE: tasksJsonPath"]
            C2["CONST: options, VALUE: { projectRoot, tag }"]
        end
        subgraph file14Flow["fix-dependencies.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
        end
    end
    subgraph file15["mcp-server/src/core/direct-functions/generate-task-files.js"]
        subgraph file15Imports["generate-task-files.js-Imports"]
            I1["IMPORT: ../../../../scripts/modules/task-manager.js, FROM: /claude-task-master/scripts/modules/task-manager.js"]
        end
        subgraph file15Functions["generate-task-files.js-Functions Defined"]
            FU1["FUNCTION: generateTaskFilesDirect"]
        end
        subgraph file15Exports["generate-task-files.js-Exports"]
            E0["(none)"]
        end
        subgraph file15Constants["generate-task-files.js-Const Declarations"]
            C1["CONST: errorMessage, VALUE: 'tasksJsonPath is required but was not provided.'"]
            C2["CONST: errorMessage, VALUE: 'outputDir is required but was not provided.'"]
            C3["CONST: tasksPath, VALUE: tasksJsonPath"]
            C4["CONST: resolvedOutputDir, VALUE: outputDir"]
        end
        subgraph file15Flow["generate-task-files.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
        end
    end
    subgraph file16["mcp-server/src/core/direct-functions/initialize-project.js"]
        subgraph file16Imports["initialize-project.js-Imports"]
            I1["IMPORT: ../../../../scripts/init.js, FROM: /claude-task-master/scripts/init.js"]
            I2["IMPORT: os, FROM: os"]
            I3["IMPORT: ../../../../src/constants/profiles.js, FROM: /claude-task-master/src/constants/profiles.js"]
            I4["IMPORT: ../../../../src/utils/rule-transformer.js, FROM: /claude-task-master/src/utils/rule-transformer.js"]
        end
        subgraph file16Functions["initialize-project.js-Functions Defined"]
            FU1["FUNCTION: initializeProjectDirect"]
        end
        subgraph file16Exports["initialize-project.js-Exports"]
            E0["(none)"]
        end
        subgraph file16Constants["initialize-project.js-Const Declarations"]
            C1["CONST: homeDir, VALUE: os.homedir()"]
            C2["CONST: targetDirectory, VALUE: args.projectRoot"]
            C3["CONST: originalCwd, VALUE: process.cwd()"]
            C4["CONST: options, VALUE: {"]
            C5["CONST: result, VALUE: await initializeProject(options)"]
        end
        subgraph file16Flow["initialize-project.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
        end
    end
    subgraph file17["mcp-server/src/core/direct-functions/list-tags.js"]
        subgraph file17Imports["list-tags.js-Imports"]
            I1["IMPORT: ../../../../scripts/modules/task-manager/tag-management.js, FROM: /claude-task-master/scripts/modules/task-manager/tag-management.js"]
            I2["IMPORT: ../../tools/utils.js, FROM: /claude-task-master/mcp-server/src/tools/utils.js"]
        end
        subgraph file17Functions["list-tags.js-Functions Defined"]
            FU1["FUNCTION: listTagsDirect"]
        end
        subgraph file17Exports["list-tags.js-Exports"]
            E0["(none)"]
        end
        subgraph file17Constants["list-tags.js-Const Declarations"]
            C1["CONST: mcpLog, VALUE: createLogWrapper(log)"]
            C2["CONST: options, VALUE: {"]
            C3["CONST: result, VALUE: await tags("]
            C4["CONST: tagsSummary, VALUE: result.tags.map((tag) => {"]
            C5["CONST: tasks, VALUE: tag.tasks || []"]
            C6["CONST: statusBreakdown, VALUE: tasks.reduce((acc, task) => {"]
            C7["CONST: status, VALUE: task.status || 'pending'"]
            C8["CONST: subtaskCounts, VALUE: tasks.reduce("]
            C9["CONST: subStatus, VALUE: subtask.status || 'pending'"]
        end
        subgraph file17Flow["list-tags.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
        end
    end
    subgraph file18["mcp-server/src/core/direct-functions/list-tasks.js"]
        subgraph file18Imports["list-tasks.js-Imports"]
            I1["IMPORT: ../../../../scripts/modules/task-manager.js, FROM: /claude-task-master/scripts/modules/task-manager.js"]
        end
        subgraph file18Functions["list-tasks.js-Functions Defined"]
            FU1["FUNCTION: listTasksDirect"]
            FU2["FUNCTION: coreListTasksAction"]
        end
        subgraph file18Exports["list-tasks.js-Exports"]
            E0["(none)"]
        end
        subgraph file18Constants["list-tasks.js-Const Declarations"]
            C1["CONST: statusFilter, VALUE: status || 'all'"]
            C2["CONST: withSubtasksFilter, VALUE: withSubtasks || false"]
            C3["CONST: coreListTasksAction, VALUE: async () => {"]
            C4["CONST: resultData, VALUE: listTasks("]
            C5["CONST: result, VALUE: await coreListTasksAction()"]
        end
        subgraph file18Flow["list-tasks.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
        end
    end
    subgraph file19["mcp-server/src/core/direct-functions/models.js"]
        subgraph file19Imports["models.js-Imports"]
            I1["IMPORT: ../../tools/utils.js, FROM: /claude-task-master/mcp-server/src/tools/utils.js"]
            I2["IMPORT: ../../../../src/constants/providers.js, FROM: /claude-task-master/src/constants/providers.js"]
        end
        subgraph file19Functions["models.js-Functions Defined"]
            FU1["FUNCTION: getProviderHint"]
            FU2["FUNCTION: handleModelSetting"]
            FU3["FUNCTION: modelsDirect"]
        end
        subgraph file19Exports["models.js-Exports"]
            E0["(none)"]
        end
        subgraph file19Constants["models.js-Const Declarations"]
            C1["CONST: MODEL_ROLES, VALUE: ['main', 'research', 'fallback']"]
            C2["CONST: roleKey, VALUE: `set${role.charAt(0).toUpperCase() + role.slice(1)}`"]
            C3["CONST: providerHint, VALUE: getProviderHint(args)"]
            C4["CONST: mcpLog, VALUE: createLogWrapper(log)"]
            C5["CONST: customProviderFlags, VALUE: CUSTOM_PROVIDERS_ARRAY.filter("]
            C6["CONST: modelContext, VALUE: { session, mcpLog, projectRoot }"]
            C7["CONST: modelSetResult, VALUE: await handleModelSetting(args, modelContext)"]
        end
        subgraph file19Flow["models.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
        end
    end
    subgraph file20["mcp-server/src/core/direct-functions/move-task.js"]
        subgraph file20Imports["move-task.js-Imports"]
            I1["IMPORT: ../../../../scripts/modules/task-manager.js, FROM: /claude-task-master/scripts/modules/task-manager.js"]
            I2["IMPORT: ../utils/path-utils.js, FROM: /claude-task-master/mcp-server/src/core/utils/path-utils.js"]
        end
        subgraph file20Functions["move-task.js-Functions Defined"]
            FU1["FUNCTION: moveTaskDirect"]
        end
        subgraph file20Exports["move-task.js-Exports"]
            E0["(none)"]
        end
        subgraph file20Constants["move-task.js-Const Declarations"]
            C1["CONST: generateFiles, VALUE: args.generateFiles !== false"]
            C2["CONST: result, VALUE: await moveTask("]
        end
        subgraph file20Flow["move-task.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
        end
    end
    subgraph file21["mcp-server/src/core/direct-functions/next-task.js"]
        subgraph file21Imports["next-task.js-Imports"]
            I1["IMPORT: ../../../../scripts/modules/task-manager.js, FROM: /claude-task-master/scripts/modules/task-manager.js"]
        end
        subgraph file21Functions["next-task.js-Functions Defined"]
            FU1["FUNCTION: nextTaskDirect"]
            FU2["FUNCTION: coreNextTaskAction"]
        end
        subgraph file21Exports["next-task.js-Exports"]
            E0["(none)"]
        end
        subgraph file21Constants["next-task.js-Const Declarations"]
            C1["CONST: coreNextTaskAction, VALUE: async () => {"]
            C2["CONST: data, VALUE: readJSON(tasksJsonPath, projectRoot, tag)"]
            C3["CONST: complexityReport, VALUE: readComplexityReport(reportPath)"]
            C4["CONST: nextTask, VALUE: findNextTask(data.tasks, complexityReport)"]
            C5["CONST: isSubtask, VALUE: typeof nextTask.id === 'string' && nextTask.id.includes('.')"]
            C6["CONST: taskOrSubtask, VALUE: isSubtask ? 'subtask' : 'task'"]
            C7["CONST: additionalAdvice, VALUE: isSubtask"]
            C8["CONST: result, VALUE: await coreNextTaskAction()"]
        end
        subgraph file21Flow["next-task.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
        end
    end
    subgraph file22["mcp-server/src/core/direct-functions/parse-prd.js"]
        subgraph file22Imports["parse-prd.js-Imports"]
            I1["IMPORT: path, FROM: path"]
            I2["IMPORT: fs, FROM: fs"]
            I3["IMPORT: ../../../../scripts/modules/task-manager.js, FROM: /claude-task-master/scripts/modules/task-manager.js"]
            I4["IMPORT: ../../tools/utils.js, FROM: /claude-task-master/mcp-server/src/tools/utils.js"]
            I5["IMPORT: ../../../../scripts/modules/config-manager.js, FROM: /claude-task-master/scripts/modules/config-manager.js"]
            I6["IMPORT: ../utils/path-utils.js, FROM: /claude-task-master/mcp-server/src/core/utils/path-utils.js"]
            I7["IMPORT: ../../../../src/constants/paths.js, FROM: /claude-task-master/src/constants/paths.js"]
        end
        subgraph file22Functions["parse-prd.js-Functions Defined"]
            FU1["FUNCTION: parsePRDDirect"]
        end
        subgraph file22Exports["parse-prd.js-Exports"]
            E0["(none)"]
        end
        subgraph file22Constants["parse-prd.js-Const Declarations"]
            C1["CONST: logWrapper, VALUE: createLogWrapper(log)"]
            C2["CONST: outputPath, VALUE: outputArg"]
            C3["CONST: errorMsg, VALUE: `Input PRD file not found at resolved path: ${inputPath}`"]
            C4["CONST: outputDir, VALUE: path.dirname(outputPath)"]
            C5["CONST: errorMsg, VALUE: `Failed to create output directory ${outputDir}: ${error.message}`"]
            C6["CONST: wasSilent, VALUE: isSilentMode()"]
            C7["CONST: result, VALUE: await parsePRD("]
            C8["CONST: successMsg, VALUE: `Successfully parsed PRD and generated tasks in ${result.tasksPath}`"]
        end
        subgraph file22Flow["parse-prd.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
        end
    end
    subgraph file23["mcp-server/src/core/direct-functions/remove-dependency.js"]
        subgraph file23Imports["remove-dependency.js-Imports"]
            I1["IMPORT: ../../../../scripts/modules/dependency-manager.js, FROM: /claude-task-master/scripts/modules/dependency-manager.js"]
        end
        subgraph file23Functions["remove-dependency.js-Functions Defined"]
            FU1["FUNCTION: removeDependencyDirect"]
        end
        subgraph file23Exports["remove-dependency.js-Exports"]
            E0["(none)"]
        end
        subgraph file23Constants["remove-dependency.js-Const Declarations"]
            C1["CONST: tasksPath, VALUE: tasksJsonPath"]
            C2["CONST: taskId, VALUE: id && id.includes && id.includes('.') ? id : parseInt(id, 10)"]
            C3["CONST: dependencyId, VALUE: dependsOn && dependsOn.includes && dependsOn.includes('.')"]
        end
        subgraph file23Flow["remove-dependency.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
        end
    end
    subgraph file24["mcp-server/src/core/direct-functions/remove-subtask.js"]
        subgraph file24Imports["remove-subtask.js-Imports"]
            I1["IMPORT: ../../../../scripts/modules/task-manager.js, FROM: /claude-task-master/scripts/modules/task-manager.js"]
        end
        subgraph file24Functions["remove-subtask.js-Functions Defined"]
            FU1["FUNCTION: removeSubtaskDirect"]
        end
        subgraph file24Exports["remove-subtask.js-Exports"]
            E0["(none)"]
        end
        subgraph file24Constants["remove-subtask.js-Const Declarations"]
            C1["CONST: tasksPath, VALUE: tasksJsonPath"]
            C2["CONST: convertToTask, VALUE: convert === true"]
            C3["CONST: generateFiles, VALUE: !skipGenerate"]
            C4["CONST: result, VALUE: await removeSubtask("]
        end
        subgraph file24Flow["remove-subtask.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
        end
    end
    subgraph file25["mcp-server/src/core/direct-functions/remove-task.js"]
        subgraph file25Imports["remove-task.js-Imports"]
            I0["(none)"]
        end
        subgraph file25Functions["remove-task.js-Functions Defined"]
            FU1["FUNCTION: removeTaskDirect"]
        end
        subgraph file25Exports["remove-task.js-Exports"]
            E0["(none)"]
        end
        subgraph file25Constants["remove-task.js-Const Declarations"]
            C1["CONST: taskIdArray, VALUE: id.split(',').map((taskId) => taskId.trim())"]
            C2["CONST: data, VALUE: readJSON(tasksJsonPath, projectRoot, tag)"]
            C3["CONST: invalidTasks, VALUE: taskIdArray.filter("]
            C4["CONST: result, VALUE: await removeTask(tasksJsonPath, id, {"]
        end
        subgraph file25Flow["remove-task.js-Execution Flow"]
            FL1["Define functions and core logic for this module"]
        end
    end
    subgraph file26["mcp-server/src/core/direct-functions/rename-tag.js"]
        subgraph file26Imports["rename-tag.js-Imports"]
            I1["IMPORT: ../../../../scripts/modules/task-manager/tag-management.js, FROM: /claude-task-master/scripts/modules/task-manager/tag-management.js"]
            I2["IMPORT: ../../tools/utils.js, FROM: /claude-task-master/mcp-server/src/tools/utils.js"]
        end
        subgraph file26Functions["rename-tag.js-Functions Defined"]
            FU1["FUNCTION: renameTagDirect"]
        end
        subgraph file26Exports["rename-tag.js-Exports"]
            E0["(none)"]
        end
        subgraph file26Constants["rename-tag.js-Const Declarations"]
            C1["CONST: mcpLog, VALUE: createLogWrapper(log)"]
            C2["CONST: result, VALUE: await renameTag("]
        end
        subgraph file26Flow["rename-tag.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
        end
    end
    subgraph file27["mcp-server/src/core/direct-functions/research.js"]
        subgraph file27Imports["research.js-Imports"]
            I1["IMPORT: path, FROM: path"]
            I2["IMPORT: ../../../../scripts/modules/task-manager.js, FROM: /claude-task-master/scripts/modules/task-manager.js"]
            I3["IMPORT: ../../tools/utils.js, FROM: /claude-task-master/mcp-server/src/tools/utils.js"]
        end
        subgraph file27Functions["research.js-Functions Defined"]
            FU1["FUNCTION: researchDirect"]
        end
        subgraph file27Exports["research.js-Exports"]
            E0["(none)"]
        end
        subgraph file27Constants["research.js-Const Declarations"]
            C1["CONST: mcpLog, VALUE: createLogWrapper(log)"]
            C2["CONST: parsedTaskIds, VALUE: taskIds"]
            C3["CONST: parsedFilePaths, VALUE: filePaths"]
            C4["CONST: validDetailLevels, VALUE: ['low', 'medium', 'high']"]
            C5["CONST: researchOptions, VALUE: {"]
            C6["CONST: researchContext, VALUE: {"]
            C7["CONST: result, VALUE: await performResearch("]
            C8["CONST: isSubtask, VALUE: saveTo.includes('.')"]
            C9["CONST: researchContent, VALUE: `## Research Query: ${query.trim()}"]
            C10["CONST: tasksPath, VALUE: path.join("]
            C11["CONST: updateTaskById, VALUE: ("]
            C12["CONST: taskIdNum, VALUE: parseInt(saveTo, 10)"]
            C13["CONST: tasksPath, VALUE: path.join("]
        end
        subgraph file27Flow["research.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
        end
    end
    subgraph file28["mcp-server/src/core/direct-functions/response-language.js"]
        subgraph file28Imports["response-language.js-Imports"]
            I1["IMPORT: ../../../../scripts/modules/task-manager.js, FROM: /claude-task-master/scripts/modules/task-manager.js"]
            I2["IMPORT: ../../tools/utils.js, FROM: /claude-task-master/mcp-server/src/tools/utils.js"]
        end
        subgraph file28Functions["response-language.js-Functions Defined"]
            FU1["FUNCTION: responseLanguageDirect"]
        end
        subgraph file28Exports["response-language.js-Exports"]
            E0["(none)"]
        end
        subgraph file28Constants["response-language.js-Const Declarations"]
            C1["CONST: mcpLog, VALUE: createLogWrapper(log)"]
        end
        subgraph file28Flow["response-language.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
        end
    end
    subgraph file29["mcp-server/src/core/direct-functions/rules.js"]
        subgraph file29Imports["rules.js-Imports"]
            I1["IMPORT: ../../../../src/constants/profiles.js, FROM: /claude-task-master/src/constants/profiles.js"]
            I2["IMPORT: ../../../../src/constants/rules-actions.js, FROM: /claude-task-master/src/constants/rules-actions.js"]
            I3["IMPORT: path, FROM: path"]
            I4["IMPORT: fs, FROM: fs"]
        end
        subgraph file29Functions["rules.js-Functions Defined"]
            FU1["FUNCTION: rulesDirect"]
        end
        subgraph file29Exports["rules.js-Exports"]
            E0["(none)"]
        end
        subgraph file29Constants["rules.js-Const Declarations"]
            C1["CONST: removalResults, VALUE: []"]
            C2["CONST: addResults, VALUE: []"]
            C3["CONST: installedProfiles, VALUE: getInstalledProfiles(projectRoot)"]
            C4["CONST: remainingProfiles, VALUE: installedProfiles.filter("]
            C5["CONST: profileConfig, VALUE: getRulesProfile(profile)"]
            C6["CONST: result, VALUE: removeProfileRules(projectRoot, profileConfig)"]
            C7["CONST: successes, VALUE: removalResults"]
            C8["CONST: skipped, VALUE: removalResults"]
            C9["CONST: errors, VALUE: removalResults.filter("]
            C10["CONST: withNotices, VALUE: removalResults.filter((r) => r.notice)"]
            C11["CONST: profileConfig, VALUE: getRulesProfile(profile)"]
            C12["CONST: rulesDir, VALUE: profileConfig.rulesDir"]
            C13["CONST: profileRulesDir, VALUE: path.join(projectRoot, rulesDir)"]
            C14["CONST: profileDir, VALUE: profileConfig.profileDir"]
            C15["CONST: mcpConfig, VALUE: profileConfig.mcpConfig !== false"]
            C16["CONST: mcpPath, VALUE: mcpConfig && profileConfig.mcpConfigPath"]
            C17["CONST: mcpConfigCreated, VALUE: mcpConfig && mcpPath ? fs.existsSync(mcpPath) : undefined"]
            C18["CONST: rulesDirCreated, VALUE: fs.existsSync(profileRulesDir)"]
            C19["CONST: profileFolderCreated, VALUE: fs.existsSync("]
            C20["CONST: error, VALUE: failed > 0 ? `${failed} rule files failed to convert.` : null"]
            C21["CONST: resultObj, VALUE: {"]
            C22["CONST: successes, VALUE: addResults"]
            C23["CONST: errors, VALUE: addResults.filter((r) => r.error && !r.success)"]
        end
        subgraph file29Flow["rules.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
        end
    end
    subgraph file30["mcp-server/src/core/direct-functions/scope-down.js"]
        subgraph file30Imports["scope-down.js-Imports"]
            I1["IMPORT: ../../../../scripts/modules/task-manager.js, FROM: /claude-task-master/scripts/modules/task-manager.js"]
            I2["IMPORT: ../../tools/utils.js, FROM: /claude-task-master/mcp-server/src/tools/utils.js"]
        end
        subgraph file30Functions["scope-down.js-Functions Defined"]
            FU1["FUNCTION: scopeDownDirect"]
        end
        subgraph file30Exports["scope-down.js-Exports"]
            E0["(none)"]
        end
        subgraph file30Constants["scope-down.js-Const Declarations"]
            C1["CONST: mcpLog, VALUE: createLogWrapper(log)"]
            C2["CONST: taskIds, VALUE: id.split(',').map((taskId) => parseInt(taskId.trim(), 10))"]
            C3["CONST: result, VALUE: await scopeDownTask("]
        end
        subgraph file30Flow["scope-down.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
        end
    end
    subgraph file31["mcp-server/src/core/direct-functions/scope-up.js"]
        subgraph file31Imports["scope-up.js-Imports"]
            I1["IMPORT: ../../../../scripts/modules/task-manager.js, FROM: /claude-task-master/scripts/modules/task-manager.js"]
            I2["IMPORT: ../../tools/utils.js, FROM: /claude-task-master/mcp-server/src/tools/utils.js"]
        end
        subgraph file31Functions["scope-up.js-Functions Defined"]
            FU1["FUNCTION: scopeUpDirect"]
        end
        subgraph file31Exports["scope-up.js-Exports"]
            E0["(none)"]
        end
        subgraph file31Constants["scope-up.js-Const Declarations"]
            C1["CONST: mcpLog, VALUE: createLogWrapper(log)"]
            C2["CONST: taskIds, VALUE: id.split(',').map((taskId) => parseInt(taskId.trim(), 10))"]
            C3["CONST: result, VALUE: await scopeUpTask("]
        end
        subgraph file31Flow["scope-up.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
        end
    end
    subgraph file32["mcp-server/src/core/direct-functions/set-task-status.js"]
        subgraph file32Imports["set-task-status.js-Imports"]
            I1["IMPORT: ../../../../scripts/modules/task-manager.js, FROM: /claude-task-master/scripts/modules/task-manager.js"]
            I2["IMPORT: ./next-task.js, FROM: /claude-task-master/mcp-server/src/core/direct-functions/next-task.js"]
        end
        subgraph file32Functions["set-task-status.js-Functions Defined"]
            FU1["FUNCTION: setTaskStatusDirect"]
        end
        subgraph file32Exports["set-task-status.js-Exports"]
            E0["(none)"]
        end
        subgraph file32Constants["set-task-status.js-Const Declarations"]
            C1["CONST: errorMessage, VALUE: 'tasksJsonPath is required but was not provided.'"]
            C2["CONST: errorMessage, VALUE: 'No task ID specified. Please provide a task ID to update.'"]
            C3["CONST: errorMessage, VALUE: 'No status specified. Please provide a new status value.'"]
            C4["CONST: tasksPath, VALUE: tasksJsonPath"]
            C5["CONST: taskId, VALUE: id"]
            C6["CONST: newStatus, VALUE: status"]
            C7["CONST: result, VALUE: {"]
            C8["CONST: nextResult, VALUE: await nextTaskDirect("]
        end
        subgraph file32Flow["set-task-status.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
        end
    end
    subgraph file33["mcp-server/src/core/direct-functions/show-task.js"]
        subgraph file33Imports["show-task.js-Imports"]
            I1["IMPORT: ../utils/path-utils.js, FROM: /claude-task-master/mcp-server/src/core/utils/path-utils.js"]
        end
        subgraph file33Functions["show-task.js-Functions Defined"]
            FU1["FUNCTION: showTaskDirect"]
        end
        subgraph file33Exports["show-task.js-Exports"]
            E0["(none)"]
        end
        subgraph file33Constants["show-task.js-Const Declarations"]
            C1["CONST: tasksData, VALUE: readJSON(tasksJsonPath, projectRoot, tag)"]
            C2["CONST: complexityReport, VALUE: readComplexityReport(reportPath)"]
            C3["CONST: taskIds, VALUE: id"]
            C4["CONST: returnData, VALUE: { ...task }"]
            C5["CONST: foundTasks, VALUE: []"]
            C6["CONST: notFoundIds, VALUE: []"]
            C7["CONST: taskData, VALUE: { ...task }"]
        end
        subgraph file33Flow["show-task.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
        end
    end
    subgraph file34["mcp-server/src/core/direct-functions/update-subtask-by-id.js"]
        subgraph file34Imports["update-subtask-by-id.js-Imports"]
            I1["IMPORT: ../../../../scripts/modules/task-manager.js, FROM: /claude-task-master/scripts/modules/task-manager.js"]
            I2["IMPORT: ../../tools/utils.js, FROM: /claude-task-master/mcp-server/src/tools/utils.js"]
        end
        subgraph file34Functions["update-subtask-by-id.js-Functions Defined"]
            FU1["FUNCTION: updateSubtaskByIdDirect"]
        end
        subgraph file34Exports["update-subtask-by-id.js-Exports"]
            E0["(none)"]
        end
        subgraph file34Constants["update-subtask-by-id.js-Const Declarations"]
            C1["CONST: logWrapper, VALUE: createLogWrapper(log)"]
            C2["CONST: errorMessage, VALUE: 'tasksJsonPath is required but was not provided.'"]
            C3["CONST: errorMessage, VALUE: 'Invalid subtask ID format. Must be in format \parentId.subtaskId\ (e.g., \5.2\).'"]
            C4["CONST: errorMessage, VALUE: 'No prompt specified. Please provide the information to append.'"]
            C5["CONST: subtaskId, VALUE: id"]
            C6["CONST: errorMessage, VALUE: `Invalid subtask ID type: ${typeof subtaskId}. Subtask ID must be a string or number.`"]
            C7["CONST: subtaskIdStr, VALUE: String(subtaskId)"]
            C8["CONST: errorMessage, VALUE: `Invalid subtask ID format: ${subtaskIdStr}. Subtask ID must be in format \parentId.subtaskId\ (e.g., \5.2\).`"]
            C9["CONST: tasksPath, VALUE: tasksJsonPath"]
            C10["CONST: useResearch, VALUE: research === true"]
            C11["CONST: wasSilent, VALUE: isSilentMode()"]
            C12["CONST: coreResult, VALUE: await updateSubtaskById("]
            C13["CONST: message, VALUE: `Subtask ${id} or its parent task not found.`"]
            C14["CONST: successMessage, VALUE: `Successfully updated subtask with ID ${subtaskIdStr}`"]
        end
        subgraph file34Flow["update-subtask-by-id.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
        end
    end
    subgraph file35["mcp-server/src/core/direct-functions/update-task-by-id.js"]
        subgraph file35Imports["update-task-by-id.js-Imports"]
            I1["IMPORT: ../../../../scripts/modules/task-manager.js, FROM: /claude-task-master/scripts/modules/task-manager.js"]
            I2["IMPORT: ../../tools/utils.js, FROM: /claude-task-master/mcp-server/src/tools/utils.js"]
        end
        subgraph file35Functions["update-task-by-id.js-Functions Defined"]
            FU1["FUNCTION: updateTaskByIdDirect"]
        end
        subgraph file35Exports["update-task-by-id.js-Exports"]
            E0["(none)"]
        end
        subgraph file35Constants["update-task-by-id.js-Const Declarations"]
            C1["CONST: logWrapper, VALUE: createLogWrapper(log)"]
            C2["CONST: errorMessage, VALUE: 'tasksJsonPath is required but was not provided.'"]
            C3["CONST: errorMessage, VALUE: 'No task ID specified. Please provide a task ID to update.'"]
            C4["CONST: errorMessage, VALUE: 'No prompt specified. Please provide a prompt with new information for the task update.'"]
            C5["CONST: errorMessage, VALUE: `Invalid task ID: ${id}. Task ID must be a positive integer or subtask ID (e.g., \5.2\).`"]
            C6["CONST: tasksPath, VALUE: tasksJsonPath"]
            C7["CONST: useResearch, VALUE: research === true"]
            C8["CONST: wasSilent, VALUE: isSilentMode()"]
            C9["CONST: coreResult, VALUE: await updateTaskById("]
            C10["CONST: message, VALUE: `Task ${taskId} was not updated (likely already completed).`"]
            C11["CONST: successMessage, VALUE: `Successfully updated task with ID ${taskId} based on the prompt`"]
        end
        subgraph file35Flow["update-task-by-id.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
        end
    end
    subgraph file36["mcp-server/src/core/direct-functions/update-tasks.js"]
        subgraph file36Imports["update-tasks.js-Imports"]
            I1["IMPORT: path, FROM: path"]
            I2["IMPORT: ../../../../scripts/modules/task-manager.js, FROM: /claude-task-master/scripts/modules/task-manager.js"]
            I3["IMPORT: ../../tools/utils.js, FROM: /claude-task-master/mcp-server/src/tools/utils.js"]
        end
        subgraph file36Functions["update-tasks.js-Functions Defined"]
            FU1["FUNCTION: updateTasksDirect"]
        end
        subgraph file36Exports["update-tasks.js-Exports"]
            E0["(none)"]
        end
        subgraph file36Constants["update-tasks.js-Const Declarations"]
            C1["CONST: logWrapper, VALUE: createLogWrapper(log)"]
            C2["CONST: result, VALUE: await updateTasks("]
        end
        subgraph file36Flow["update-tasks.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
        end
    end
    subgraph file37["mcp-server/src/core/direct-functions/use-tag.js"]
        subgraph file37Imports["use-tag.js-Imports"]
            I1["IMPORT: ../../../../scripts/modules/task-manager/tag-management.js, FROM: /claude-task-master/scripts/modules/task-manager/tag-management.js"]
            I2["IMPORT: ../../tools/utils.js, FROM: /claude-task-master/mcp-server/src/tools/utils.js"]
        end
        subgraph file37Functions["use-tag.js-Functions Defined"]
            FU1["FUNCTION: useTagDirect"]
        end
        subgraph file37Exports["use-tag.js-Exports"]
            E0["(none)"]
        end
        subgraph file37Constants["use-tag.js-Const Declarations"]
            C1["CONST: mcpLog, VALUE: createLogWrapper(log)"]
            C2["CONST: result, VALUE: await useTag("]
        end
        subgraph file37Flow["use-tag.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
        end
    end
    subgraph file38["mcp-server/src/core/direct-functions/validate-dependencies.js"]
        subgraph file38Imports["validate-dependencies.js-Imports"]
            I1["IMPORT: ../../../../scripts/modules/dependency-manager.js, FROM: /claude-task-master/scripts/modules/dependency-manager.js"]
            I2["IMPORT: fs, FROM: fs"]
        end
        subgraph file38Functions["validate-dependencies.js-Functions Defined"]
            FU1["FUNCTION: validateDependenciesDirect"]
        end
        subgraph file38Exports["validate-dependencies.js-Exports"]
            E0["(none)"]
        end
        subgraph file38Constants["validate-dependencies.js-Const Declarations"]
            C1["CONST: tasksPath, VALUE: tasksJsonPath"]
            C2["CONST: options, VALUE: { projectRoot, tag }"]
        end
        subgraph file38Flow["validate-dependencies.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
        end
    end
    subgraph file39["scripts/modules/ai-services-unified.js"]
        subgraph file39Imports["ai-services-unified.js-Imports"]
            I1["IMPORT: ai, FROM: ai"]
            I2["IMPORT: ../../src/provider-registry/index.js, FROM: /claude-task-master/src/provider-registry/index.js"]
            I3["IMPORT: path, FROM: path"]
            I4["IMPORT: fs, FROM: fs"]
        end
        subgraph file39Functions["ai-services-unified.js-Functions Defined"]
            FU1["FUNCTION: _getProvider"]
            FU2["FUNCTION: _getCostForModel"]
            FU3["FUNCTION: _getTagInfo"]
            FU4["FUNCTION: isRetryableError"]
            FU5["FUNCTION: _extractErrorMessage"]
            FU6["FUNCTION: _resolveApiKey"]
            FU7["FUNCTION: _attemptProviderCallWithRetries"]
            FU8["FUNCTION: _unifiedServiceRunner"]
            FU9["FUNCTION: generateTextService"]
            FU10["FUNCTION: streamTextService"]
            FU11["FUNCTION: generateObjectService"]
            FU12["FUNCTION: logAiUsage"]
        end
        subgraph file39Exports["ai-services-unified.js-Exports"]
            E1["EXP: generateTextService"]
            E2["EXP: streamTextService"]
            E3["EXP: generateObjectService"]
            E4["EXP: logAiUsage"]
        end
        subgraph file39Constants["ai-services-unified.js-Const Declarations"]
            C1["CONST: PROVIDERS, VALUE: {"]
            C2["CONST: providerRegistry, VALUE: ProviderRegistry.getInstance()"]
            C3["CONST: modelData, VALUE: MODEL_MAP[providerName].find((m) => m.id === modelId)"]
            C4["CONST: currency, VALUE: modelData.cost_per_1m_tokens.currency || 'USD'"]
            C5["CONST: currentTag, VALUE: getCurrentTag(projectRoot)"]
            C6["CONST: path, VALUE: require('path')"]
            C7["CONST: fs, VALUE: require('fs')"]
            C8["CONST: tasksPath, VALUE: path.join("]
            C9["CONST: tasksData, VALUE: JSON.parse(fs.readFileSync(tasksPath, 'utf8'))"]
            C10["CONST: potentialTags, VALUE: Object.keys(tasksData).filter("]
            C11["CONST: MAX_RETRIES, VALUE: 2"]
            C12["CONST: INITIAL_RETRY_DELAY_MS, VALUE: 1000"]
            C13["CONST: errorMessage, VALUE: error.message?.toLowerCase() || ''"]
            C14["CONST: body, VALUE: JSON.parse(error.responseBody)"]
            C15["CONST: provider, VALUE: _getProvider(providerName)"]
            C16["CONST: envVarName, VALUE: provider.getRequiredApiKeyName()"]
            C17["CONST: apiKey, VALUE: resolveEnvVariable(envVarName, session, projectRoot)"]
            C18["CONST: fnName, VALUE: serviceType"]
            C19["CONST: result, VALUE: await provider[serviceType](callParams)"]
            C20["CONST: delay, VALUE: INITIAL_RETRY_DELAY_MS * 2 ** (retries - 1)"]
            C21["CONST: effectiveProjectRoot, VALUE: projectRoot || findProjectRoot()"]
            C22["CONST: userId, VALUE: getUserId(effectiveProjectRoot)"]
            C23["CONST: projectId, VALUE: getVertexProjectId(effectiveProjectRoot) ||"]
            C24["CONST: location, VALUE: getVertexLocation(effectiveProjectRoot) ||"]
            C25["CONST: credentialsPath, VALUE: resolveEnvVariable("]
            C26["CONST: messages, VALUE: []"]
            C27["CONST: responseLanguage, VALUE: getResponseLanguage(effectiveProjectRoot)"]
            C28["CONST: systemPromptWithLanguage, VALUE: `${systemPrompt} \\n\\n Always respond in ${responseLanguage}.`"]
            C29["CONST: callParams, VALUE: {"]
            C30["CONST: tagInfo, VALUE: _getTagInfo(effectiveProjectRoot)"]
            C31["CONST: cleanMessage, VALUE: _extractErrorMessage(error)"]
            C32["CONST: lowerCaseMessage, VALUE: cleanMessage.toLowerCase()"]
            C33["CONST: specificErrorMsg, VALUE: `Model '${modelId || 'unknown'}' via provider '${providerName || 'unknown'}' does not support the 'tool use' required..."]
            C34["CONST: defaults, VALUE: { outputType: 'cli' }"]
            C35["CONST: combinedParams, VALUE: { ...defaults, ...params }"]
            C36["CONST: defaults, VALUE: { outputType: 'cli' }"]
            C37["CONST: combinedParams, VALUE: { ...defaults, ...params }"]
            C38["CONST: defaults, VALUE: {"]
            C39["CONST: combinedParams, VALUE: { ...defaults, ...params }"]
            C40["CONST: isMCP, VALUE: outputType === 'mcp'"]
            C41["CONST: timestamp, VALUE: new Date().toISOString()"]
            C42["CONST: totalTokens, VALUE: (inputTokens || 0) + (outputTokens || 0)"]
            C43["CONST: totalCost, VALUE: ((inputTokens || 0) / 1_000_000) * inputCost +"]
            C44["CONST: telemetryData, VALUE: {"]
        end
        subgraph file39Flow["ai-services-unified.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file40["scripts/modules/config-manager.js"]
        subgraph file40Imports["config-manager.js-Imports"]
            I1["IMPORT: fs, FROM: fs"]
            I2["IMPORT: path, FROM: path"]
            I3["IMPORT: url, FROM: url"]
            I4["IMPORT: chalk, FROM: chalk"]
            I5["IMPORT: zod, FROM: zod"]
            I6["IMPORT: ../../src/constants/commands.js, FROM: /claude-task-master/src/constants/commands.js"]
            I7["IMPORT: ../../src/utils/path-utils.js, FROM: /claude-task-master/src/utils/path-utils.js"]
            I8["IMPORT: ./utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        end
        subgraph file40Functions["config-manager.js-Functions Defined"]
            FU1["FUNCTION: _loadAndValidateConfig"]
            FU2["FUNCTION: getConfig"]
            FU3["FUNCTION: validateProvider"]
            FU4["FUNCTION: validateProviderModelCombination"]
            FU5["FUNCTION: validateClaudeCodeSettings"]
            FU6["FUNCTION: getClaudeCodeSettings"]
            FU7["FUNCTION: getClaudeCodeSettingsForCommand"]
            FU8["FUNCTION: getModelConfigForRole"]
            FU9["FUNCTION: getMainProvider"]
            FU10["FUNCTION: getMainModelId"]
            FU11["FUNCTION: getMainMaxTokens"]
            FU12["FUNCTION: getMainTemperature"]
            FU13["FUNCTION: getResearchProvider"]
            FU14["FUNCTION: getResearchModelId"]
            FU15["FUNCTION: getResearchMaxTokens"]
            FU16["FUNCTION: getResearchTemperature"]
            FU17["FUNCTION: getFallbackProvider"]
            FU18["FUNCTION: getFallbackModelId"]
            FU19["FUNCTION: getFallbackMaxTokens"]
            FU20["FUNCTION: getFallbackTemperature"]
            FU21["FUNCTION: getGlobalConfig"]
            FU22["FUNCTION: getLogLevel"]
            FU23["FUNCTION: getDebugFlag"]
            FU24["FUNCTION: getDefaultSubtasks"]
            FU25["FUNCTION: getDefaultNumTasks"]
            FU26["FUNCTION: getDefaultPriority"]
            FU27["FUNCTION: getProjectName"]
            FU28["FUNCTION: getOllamaBaseURL"]
            FU29["FUNCTION: getAzureBaseURL"]
            FU30["FUNCTION: getBedrockBaseURL"]
            FU31["FUNCTION: getVertexProjectId"]
            FU32["FUNCTION: getVertexLocation"]
            FU33["FUNCTION: getResponseLanguage"]
            FU34["FUNCTION: getParametersForRole"]
            FU35["FUNCTION: isApiKeySet"]
            FU36["FUNCTION: getMcpApiKeyStatus"]
            FU37["FUNCTION: getAvailableModels"]
            FU38["FUNCTION: writeConfig"]
            FU39["FUNCTION: isConfigFilePresent"]
            FU40["FUNCTION: getUserId"]
            FU41["FUNCTION: getAllProviders"]
            FU42["FUNCTION: getBaseUrlForRole"]
        end
        subgraph file40Exports["config-manager.js-Exports"]
            E1["EXP: providersWithoutApiKeys"]
            E2["EXP: // Core config access
	getConfig"]
            E3["EXP: writeConfig"]
            E4["EXP: ConfigurationError"]
            E5["EXP: isConfigFilePresent"]
            E6["EXP: // Claude Code settings
	getClaudeCodeSettings"]
            E7["EXP: getClaudeCodeSettingsForCommand"]
            E8["EXP: // Validation
	validateProvider"]
            E9["EXP: validateProviderModelCombination"]
            E10["EXP: validateClaudeCodeSettings"]
            E11["EXP: VALIDATED_PROVIDERS"]
            E12["EXP: CUSTOM_PROVIDERS"]
            E13["EXP: ALL_PROVIDERS"]
            E14["EXP: MODEL_MAP"]
            E15["EXP: getAvailableModels"]
            E16["EXP: // Role-specific getters (No env var overrides)
	getMainProvider"]
            E17["EXP: getMainModelId"]
            E18["EXP: getMainMaxTokens"]
            E19["EXP: getMainTemperature"]
            E20["EXP: getResearchProvider"]
            E21["EXP: getResearchModelId"]
            E22["EXP: getResearchMaxTokens"]
            E23["EXP: getResearchTemperature"]
            E24["EXP: getFallbackProvider"]
            E25["EXP: getFallbackModelId"]
            E26["EXP: getFallbackMaxTokens"]
            E27["EXP: getFallbackTemperature"]
            E28["EXP: getBaseUrlForRole"]
            E29["EXP: // Global setting getters (No env var overrides)
	getLogLevel"]
            E30["EXP: getDebugFlag"]
            E31["EXP: getDefaultNumTasks"]
            E32["EXP: getDefaultSubtasks"]
            E33["EXP: getDefaultPriority"]
            E34["EXP: getProjectName"]
            E35["EXP: getOllamaBaseURL"]
            E36["EXP: getAzureBaseURL"]
            E37["EXP: getBedrockBaseURL"]
            E38["EXP: getResponseLanguage"]
            E39["EXP: getParametersForRole"]
            E40["EXP: getUserId"]
            E41["EXP: // API Key Checkers (still relevant)
	isApiKeySet"]
            E42["EXP: getMcpApiKeyStatus"]
            E43["EXP: // ADD: Function to get all provider names
	getAllProviders"]
            E44["EXP: getVertexProjectId"]
            E45["EXP: getVertexLocation"]
        end
        subgraph file40Constants["config-manager.js-Const Declarations"]
            C1["CONST: __filename, VALUE: fileURLToPath(import.meta.url)"]
            C2["CONST: __dirname, VALUE: path.dirname(__filename)"]
            C3["CONST: supportedModelsRaw, VALUE: fs.readFileSync("]
            C4["CONST: DEFAULTS, VALUE: {"]
            C5["CONST: defaults, VALUE: DEFAULTS"]
            C6["CONST: hasProjectMarkers, VALUE: fs.existsSync(path.join(rootToUse, TASKMASTER_DIR)) ||"]
            C7["CONST: isLegacy, VALUE: configPath.endsWith(LEGACY_CONFIG_FILE)"]
            C8["CONST: rawData, VALUE: fs.readFileSync(configPath, 'utf-8')"]
            C9["CONST: parsedConfig, VALUE: JSON.parse(rawData)"]
            C10["CONST: hasTaskmasterDir, VALUE: fs.existsSync("]
            C11["CONST: hasLegacyMarker, VALUE: fs.existsSync("]
            C12["CONST: needsLoad, VALUE: !loadedConfig ||"]
            C13["CONST: newConfig, VALUE: _loadAndValidateConfig(explicitRoot)"]
            C14["CONST: BaseSettingsSchema, VALUE: z.object({"]
            C15["CONST: CommandSpecificSchema, VALUE: z.record("]
            C16["CONST: SettingsSchema, VALUE: BaseSettingsSchema.extend({"]
            C17["CONST: config, VALUE: getConfig(explicitRoot, forceReload)"]
            C18["CONST: settings, VALUE: getClaudeCodeSettings(explicitRoot, forceReload)"]
            C19["CONST: commandSpecific, VALUE: settings?.commandSpecific || {}"]
            C20["CONST: config, VALUE: getConfig(explicitRoot)"]
            C21["CONST: roleConfig, VALUE: config?.models?.[role]"]
            C22["CONST: config, VALUE: getConfig(explicitRoot)"]
            C23["CONST: val, VALUE: getGlobalConfig(explicitRoot).defaultSubtasks"]
            C24["CONST: parsedVal, VALUE: parseInt(val, 10)"]
            C25["CONST: val, VALUE: getGlobalConfig(explicitRoot).defaultNumTasks"]
            C26["CONST: parsedVal, VALUE: parseInt(val, 10)"]
            C27["CONST: roleConfig, VALUE: getModelConfigForRole(role, explicitRoot)"]
            C28["CONST: roleMaxTokens, VALUE: roleConfig.maxTokens"]
            C29["CONST: roleTemperature, VALUE: roleConfig.temperature"]
            C30["CONST: modelId, VALUE: roleConfig.modelId"]
            C31["CONST: providerName, VALUE: roleConfig.provider"]
            C32["CONST: providerModels, VALUE: MODEL_MAP[providerName]"]
            C33["CONST: modelDefinition, VALUE: providerModels.find((m) => m.id === modelId)"]
            C34["CONST: modelSpecificMaxTokens, VALUE: modelDefinition.max_tokens"]
            C35["CONST: openrouterDefault, VALUE: 32768"]
            C36["CONST: providersWithoutApiKeys, VALUE: ["]
            C37["CONST: keyMap, VALUE: {"]
            C38["CONST: providerKey, VALUE: providerName?.toLowerCase()"]
            C39["CONST: envVarName, VALUE: keyMap[providerKey]"]
            C40["CONST: apiKeyValue, VALUE: resolveEnvVariable(envVarName, session, projectRoot)"]
            C41["CONST: rootDir, VALUE: projectRoot || findProjectRoot()"]
            C42["CONST: mcpConfigPath, VALUE: path.join(rootDir, '.cursor', 'mcp.json')"]
            C43["CONST: mcpConfigRaw, VALUE: fs.readFileSync(mcpConfigPath, 'utf-8')"]
            C44["CONST: mcpConfig, VALUE: JSON.parse(mcpConfigRaw)"]
            C45["CONST: mcpEnv, VALUE: mcpConfig?.mcpServers?.['task-master-ai']?.env ||"]
            C46["CONST: available, VALUE: []"]
            C47["CONST: modelId, VALUE: modelObj.id"]
            C48["CONST: sweScore, VALUE: modelObj.swe_score"]
            C49["CONST: cost, VALUE: modelObj.cost_per_1m_tokens"]
            C50["CONST: allowedRoles, VALUE: modelObj.allowed_roles || ['main', 'fallback']"]
            C51["CONST: nameParts, VALUE: modelId"]
            C52["CONST: foundRoot, VALUE: findProjectRoot()"]
            C53["CONST: taskmasterDir, VALUE: path.join(rootPath, '.taskmaster')"]
            C54["CONST: configPath, VALUE: path.join(taskmasterDir, 'config.json')"]
            C55["CONST: config, VALUE: getConfig(explicitRoot)"]
            C56["CONST: success, VALUE: writeConfig(config, explicitRoot)"]
            C57["CONST: roleConfig, VALUE: getModelConfigForRole(role, explicitRoot)"]
            C58["CONST: provider, VALUE: roleConfig?.provider"]
            C59["CONST: envVarName, VALUE: `${provider.toUpperCase()}_BASE_URL`"]
            C60["CONST: providersWithoutApiKeys, VALUE: ["]
        end
        subgraph file40Flow["config-manager.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file41["scripts/modules/dependency-manager.js"]
        subgraph file41Imports["dependency-manager.js-Imports"]
            I1["IMPORT: path, FROM: path"]
            I2["IMPORT: chalk, FROM: chalk"]
            I3["IMPORT: boxen, FROM: boxen"]
            I4["IMPORT: ./ui.js, FROM: /claude-task-master/scripts/modules/ui.js"]
            I5["IMPORT: ./task-manager.js, FROM: /claude-task-master/scripts/modules/task-manager.js"]
        end
        subgraph file41Functions["dependency-manager.js-Functions Defined"]
            FU1["FUNCTION: addDependency"]
            FU2["FUNCTION: removeDependency"]
            FU3["FUNCTION: isCircularDependency"]
            FU4["FUNCTION: validateTaskDependencies"]
            FU5["FUNCTION: removeDuplicateDependencies"]
            FU6["FUNCTION: cleanupSubtaskDependencies"]
            FU7["FUNCTION: validateDependenciesCommand"]
            FU8["FUNCTION: countAllDependencies"]
            FU9["FUNCTION: fixDependenciesCommand"]
            FU10["FUNCTION: ensureAtLeastOneIndependentSubtask"]
            FU11["FUNCTION: validateAndFixDependencies"]
        end
        subgraph file41Exports["dependency-manager.js-Exports"]
            E1["EXP: addDependency"]
            E2["EXP: removeDependency"]
            E3["EXP: isCircularDependency"]
            E4["EXP: validateTaskDependencies"]
            E5["EXP: validateDependenciesCommand"]
            E6["EXP: fixDependenciesCommand"]
            E7["EXP: removeDuplicateDependencies"]
            E8["EXP: cleanupSubtaskDependencies"]
            E9["EXP: ensureAtLeastOneIndependentSubtask"]
            E10["EXP: validateAndFixDependencies"]
        end
        subgraph file41Constants["dependency-manager.js-Const Declarations"]
            C1["CONST: data, VALUE: readJSON(tasksPath, context.projectRoot, context.tag)"]
            C2["CONST: formattedTaskId, VALUE: typeof taskId === 'string' && taskId.includes('.')"]
            C3["CONST: formattedDependencyId, VALUE: formatTaskId(dependencyId)"]
            C4["CONST: parentTask, VALUE: data.tasks.find((t) => t.id === parentId)"]
            C5["CONST: dependencyChain, VALUE: [formattedTaskId]"]
            C6["CONST: data, VALUE: readJSON(tasksPath, context.projectRoot, context.tag)"]
            C7["CONST: formattedTaskId, VALUE: typeof taskId === 'string' && taskId.includes('.')"]
            C8["CONST: formattedDependencyId, VALUE: formatTaskId(dependencyId)"]
            C9["CONST: parentTask, VALUE: data.tasks.find((t) => t.id === parentId)"]
            C10["CONST: normalizedDependencyId, VALUE: String(formattedDependencyId)"]
            C11["CONST: dependencyIndex, VALUE: targetTask.dependencies.findIndex((dep) => {"]
            C12["CONST: taskIdStr, VALUE: String(taskId)"]
            C13["CONST: parentTask, VALUE: tasks.find((t) => t.id === parentId)"]
            C14["CONST: newChain, VALUE: [...chain, taskIdStr]"]
            C15["CONST: issues, VALUE: []"]
            C16["CONST: fullSubtaskId, VALUE: `${task.id}.${subtask.id}`"]
            C17["CONST: tasks, VALUE: tasksData.tasks.map((task) => {"]
            C18["CONST: uniqueDeps, VALUE: [...new Set(task.dependencies)]"]
            C19["CONST: tasks, VALUE: tasksData.tasks.map((task) => {"]
            C20["CONST: data, VALUE: readJSON(tasksPath, context.projectRoot, context.tag)"]
            C21["CONST: taskCount, VALUE: data.tasks.length"]
            C22["CONST: validationResult, VALUE: validateTaskDependencies(data.tasks)"]
            C23["CONST: data, VALUE: readJSON(tasksPath, context.projectRoot, context.tag)"]
            C24["CONST: originalData, VALUE: JSON.parse(JSON.stringify(data))"]
            C25["CONST: stats, VALUE: {"]
            C26["CONST: uniqueDeps, VALUE: new Set()"]
            C27["CONST: originalLength, VALUE: task.dependencies.length"]
            C28["CONST: depIdStr, VALUE: String(depId)"]
            C29["CONST: uniqueDeps, VALUE: new Set()"]
            C30["CONST: originalLength, VALUE: subtask.dependencies.length"]
            C31["CONST: validTaskIds, VALUE: new Set(data.tasks.map((t) => t.id))"]
            C32["CONST: validSubtaskIds, VALUE: new Set()"]
            C33["CONST: originalLength, VALUE: task.dependencies.length"]
            C34["CONST: isSubtask, VALUE: typeof depId === 'string' && depId.includes('.')"]
            C35["CONST: numericId, VALUE: typeof depId === 'string' ? parseInt(depId, 10) : depId"]
            C36["CONST: originalLength, VALUE: subtask.dependencies.length"]
            C37["CONST: subtaskId, VALUE: `${task.id}.${subtask.id}`"]
            C38["CONST: hasSelfDependency, VALUE: subtask.dependencies.some((depId) => {"]
            C39["CONST: normalizedDepId, VALUE: typeof depId === 'number' && depId < 100"]
            C40["CONST: numericId, VALUE: typeof depId === 'number' ? depId : parseInt(depId, 10)"]
            C41["CONST: fullSubtaskId, VALUE: `${task.id}.${numericId}`"]
            C42["CONST: subtaskDependencyMap, VALUE: new Map()"]
            C43["CONST: subtaskId, VALUE: `${task.id}.${subtask.id}`"]
            C44["CONST: normalizedDeps, VALUE: subtask.dependencies.map((depId) => {"]
            C45["CONST: visited, VALUE: new Set()"]
            C46["CONST: recursionStack, VALUE: new Set()"]
            C47["CONST: cycleEdges, VALUE: findCycles("]
            C48["CONST: task, VALUE: data.tasks.find((t) => t.id === taskId)"]
            C49["CONST: subtask, VALUE: task.subtasks.find((st) => st.id === subtaskNum)"]
            C50["CONST: originalLength, VALUE: subtask.dependencies.length"]
            C51["CONST: edgesToRemove, VALUE: cycleEdges.map((edge) => {"]
            C52["CONST: normalizedDepId, VALUE: typeof depId === 'number' && depId < 100"]
            C53["CONST: dataChanged, VALUE: JSON.stringify(data) !== JSON.stringify(originalData)"]
            C54["CONST: totalFixedAll, VALUE: stats.nonExistentDependenciesRemoved +"]
            C55["CONST: hasIndependentSubtask, VALUE: task.subtasks.some("]
            C56["CONST: firstSubtask, VALUE: task.subtasks[0]"]
            C57["CONST: originalData, VALUE: JSON.parse(JSON.stringify(tasksData))"]
            C58["CONST: uniqueDeps, VALUE: [...new Set(task.dependencies)]"]
            C59["CONST: uniqueDeps, VALUE: [...new Set(subtask.dependencies)]"]
            C60["CONST: fullSubtaskId, VALUE: `${task.id}.${depId}`"]
            C61["CONST: hasIndependentSubtask, VALUE: task.subtasks.some("]
            C62["CONST: changesDetected, VALUE: JSON.stringify(tasksData) !== JSON.stringify(originalData)"]
        end
        subgraph file41Flow["dependency-manager.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file42["scripts/modules/index.js"]
        subgraph file42Imports["index.js-Imports"]
            I0["(none)"]
        end
        subgraph file42Functions["index.js-Functions Defined"]
            FU0["(none)"]
        end
        subgraph file42Exports["index.js-Exports"]
            E0["(none)"]
        end
        subgraph file42Constants["index.js-Const Declarations"]
            C0["(none)"]
        end
        subgraph file42Flow["index.js-Execution Flow"]
            FL1["Process file-level statements"]
        end
    end
    subgraph file43["scripts/modules/prompt-manager.js"]
        subgraph file43Imports["prompt-manager.js-Imports"]
            I1["IMPORT: fs, FROM: fs"]
            I2["IMPORT: path, FROM: path"]
            I3["IMPORT: url, FROM: url"]
            I4["IMPORT: ./utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
            I5["IMPORT: ajv, FROM: ajv"]
            I6["IMPORT: ajv-formats, FROM: ajv-formats"]
        end
        subgraph file43Functions["prompt-manager.js-Functions Defined"]
            FU1["FUNCTION: like"]
            FU2["FUNCTION: getPromptManager"]
        end
        subgraph file43Exports["prompt-manager.js-Exports"]
            E1["EXP: PromptManager"]
            E2["EXP: getPromptManager"]
        end
        subgraph file43Constants["prompt-manager.js-Const Declarations"]
            C1["CONST: __filename, VALUE: fileURLToPath(import.meta.url)"]
            C2["CONST: __dirname, VALUE: path.dirname(__filename)"]
            C3["CONST: schemaPath, VALUE: path.join("]
            C4["CONST: schemaContent, VALUE: fs.readFileSync(schemaPath, 'utf-8')"]
            C5["CONST: schema, VALUE: JSON.parse(schemaContent)"]
            C6["CONST: cacheKey, VALUE: `${promptId}-${JSON.stringify(variables)}-${variantKey}`"]
            C7["CONST: template, VALUE: this.loadTemplate(promptId)"]
            C8["CONST: variant, VALUE: variantKey"]
            C9["CONST: rendered, VALUE: {"]
            C10["CONST: templatePath, VALUE: path.join(this.promptsDir, `${promptId}.json`)"]
            C11["CONST: content, VALUE: fs.readFileSync(templatePath, 'utf-8')"]
            C12["CONST: template, VALUE: JSON.parse(content)"]
            C13["CONST: valid, VALUE: this.validatePrompt(template)"]
            C14["CONST: errors, VALUE: this.validatePrompt.errors"]
            C15["CONST: errors, VALUE: []"]
            C16["CONST: value, VALUE: variables[paramName]"]
            C17["CONST: regex, VALUE: new RegExp(paramConfig.pattern)"]
            C18["CONST: context, VALUE: { ...variables }"]
            C19["CONST: func, VALUE: new Function(...Object.keys(context), `return ${condition}`)"]
            C20["CONST: value, VALUE: this.getNestedValue(variables, path)"]
            C21["CONST: value, VALUE: this.getNestedValue(variables, path)"]
            C22["CONST: value, VALUE: this.getNestedValue(variables, path)"]
            C23["CONST: numValue, VALUE: parseFloat(compareValue)"]
            C24["CONST: value, VALUE: this.getNestedValue(variables, path)"]
            C25["CONST: numValue, VALUE: parseFloat(compareValue)"]
            C26["CONST: array, VALUE: this.getNestedValue(variables, path)"]
            C27["CONST: itemContext, VALUE: {"]
            C28["CONST: value, VALUE: this.getNestedValue(variables, path)"]
            C29["CONST: value, VALUE: this.getNestedValue(variables, path)"]
            C30["CONST: results, VALUE: { total: 0, errors: [], valid: [] }"]
            C31["CONST: files, VALUE: fs.readdirSync(this.promptsDir)"]
            C32["CONST: promptFiles, VALUE: files.filter((file) => file.endsWith('.json'))"]
            C33["CONST: promptId, VALUE: file.replace('.json', '')"]
            C34["CONST: files, VALUE: fs.readdirSync(this.promptsDir)"]
            C35["CONST: prompts, VALUE: []"]
            C36["CONST: promptId, VALUE: file.replace('.json', '')"]
            C37["CONST: template, VALUE: this.loadTemplate(promptId)"]
            C38["CONST: content, VALUE: fs.readFileSync(templatePath, 'utf-8')"]
            C39["CONST: template, VALUE: JSON.parse(content)"]
            C40["CONST: required, VALUE: ['id', 'version', 'description', 'prompts']"]
            C41["CONST: valid, VALUE: this.validatePrompt(template)"]
            C42["CONST: errors, VALUE: this.validatePrompt.errors"]
        end
        subgraph file43Flow["prompt-manager.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file44["scripts/modules/sync-readme.js"]
        subgraph file44Imports["sync-readme.js-Imports"]
            I1["IMPORT: fs, FROM: fs"]
            I2["IMPORT: path, FROM: path"]
            I3["IMPORT: chalk, FROM: chalk"]
            I4["IMPORT: ./utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
            I5["IMPORT: ./config-manager.js, FROM: /claude-task-master/scripts/modules/config-manager.js"]
            I6["IMPORT: ./task-manager/list-tasks.js, FROM: /claude-task-master/scripts/modules/task-manager/list-tasks.js"]
        end
        subgraph file44Functions["sync-readme.js-Functions Defined"]
            FU1["FUNCTION: createBasicReadme"]
            FU2["FUNCTION: createTaskMasterUrl"]
            FU3["FUNCTION: createStartMarker"]
            FU4["FUNCTION: createEndMarker"]
            FU5["FUNCTION: syncTasksToReadme"]
        end
        subgraph file44Exports["sync-readme.js-Exports"]
            E1["EXP: syncTasksToReadme"]
        end
        subgraph file44Constants["sync-readme.js-Const Declarations"]
            C1["CONST: folderName, VALUE: path.basename(projectRoot)"]
            C2["CONST: cleanFolderName, VALUE: folderName"]
            C3["CONST: utmParams, VALUE: new URLSearchParams({"]
            C4["CONST: statusText, VALUE: status"]
            C5["CONST: subtasksText, VALUE: withSubtasks ? 'with subtasks' : 'without subtasks'"]
            C6["CONST: exportInfo, VALUE: `🎯 **Taskmaster Export** - ${timestamp}\\n` +"]
            C7["CONST: boxContent, VALUE: `<!-- TASKMASTER_EXPORT_START -->\\n` +"]
            C8["CONST: actualProjectRoot, VALUE: projectRoot || findProjectRoot() || '.'"]
            C9["CONST: tasksOutput, VALUE: await listTasks("]
            C10["CONST: timestamp, VALUE: new Date().toISOString().replace('T', ' ').substring(0, 19) + ' UTC'"]
            C11["CONST: projectName, VALUE: getProjectName(actualProjectRoot)"]
            C12["CONST: startMarker, VALUE: createStartMarker({"]
            C13["CONST: endMarker, VALUE: createEndMarker()"]
            C14["CONST: taskSection, VALUE: startMarker + tasksOutput + endMarker"]
            C15["CONST: readmePath, VALUE: path.join(actualProjectRoot, 'README.md')"]
            C16["CONST: startComment, VALUE: '<!-- TASKMASTER_EXPORT_START -->'"]
            C17["CONST: endComment, VALUE: '<!-- TASKMASTER_EXPORT_END -->'"]
            C18["CONST: startIndex, VALUE: readmeContent.indexOf(startComment)"]
            C19["CONST: endIndex, VALUE: readmeContent.indexOf(endComment)"]
            C20["CONST: beforeTasks, VALUE: readmeContent.substring(0, startIndex)"]
            C21["CONST: afterTasks, VALUE: readmeContent.substring(endIndex + endComment.length)"]
        end
        subgraph file44Flow["sync-readme.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file45["scripts/modules/task-manager/add-subtask.js"]
        subgraph file45Imports["add-subtask.js-Imports"]
            I1["IMPORT: path, FROM: path"]
            I2["IMPORT: ../utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
            I3["IMPORT: ../task-manager.js, FROM: /claude-task-master/scripts/modules/task-manager.js"]
            I4["IMPORT: ./generate-task-files.js, FROM: /claude-task-master/scripts/modules/task-manager/generate-task-files.js"]
        end
        subgraph file45Functions["add-subtask.js-Functions Defined"]
            FU1["FUNCTION: addSubtask"]
        end
        subgraph file45Exports["add-subtask.js-Exports"]
            E1["EXP: addSubtask"]
        end
        subgraph file45Constants["add-subtask.js-Const Declarations"]
            C1["CONST: data, VALUE: readJSON(tasksPath, projectRoot, tag)"]
            C2["CONST: parentIdNum, VALUE: parseInt(parentId, 10)"]
            C3["CONST: parentTask, VALUE: data.tasks.find((t) => t.id === parentIdNum)"]
            C4["CONST: existingTaskIdNum, VALUE: parseInt(existingTaskId, 10)"]
            C5["CONST: existingTaskIndex, VALUE: data.tasks.findIndex("]
            C6["CONST: existingTask, VALUE: data.tasks[existingTaskIndex]"]
            C7["CONST: highestSubtaskId, VALUE: parentTask.subtasks.length > 0"]
            C8["CONST: newSubtaskId, VALUE: highestSubtaskId + 1"]
            C9["CONST: highestSubtaskId, VALUE: parentTask.subtasks.length > 0"]
            C10["CONST: newSubtaskId, VALUE: highestSubtaskId + 1"]
        end
        subgraph file45Flow["add-subtask.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file46["scripts/modules/task-manager/add-task.js"]
        subgraph file46Imports["add-task.js-Imports"]
            I1["IMPORT: path, FROM: path"]
            I2["IMPORT: chalk, FROM: chalk"]
            I3["IMPORT: boxen, FROM: boxen"]
            I4["IMPORT: cli-table3, FROM: cli-table3"]
            I5["IMPORT: zod, FROM: zod"]
            I6["IMPORT: fuse.js, FROM: fuse.js"]
            I7["IMPORT: ../ai-services-unified.js, FROM: /claude-task-master/scripts/modules/ai-services-unified.js"]
            I8["IMPORT: ../config-manager.js, FROM: /claude-task-master/scripts/modules/config-manager.js"]
            I9["IMPORT: ../prompt-manager.js, FROM: /claude-task-master/scripts/modules/prompt-manager.js"]
            I10["IMPORT: ../utils/contextGatherer.js, FROM: /claude-task-master/scripts/modules/utils/contextGatherer.js"]
            I11["IMPORT: ./generate-task-files.js, FROM: /claude-task-master/scripts/modules/task-manager/generate-task-files.js"]
        end
        subgraph file46Functions["add-task.js-Functions Defined"]
            FU1["FUNCTION: getAllTasks"]
            FU2["FUNCTION: addTask"]
            FU3["FUNCTION: buildDependencyGraph"]
            FU4["FUNCTION: report"]
            FU5["FUNCTION: getPriorityColor"]
        end
        subgraph file46Exports["add-task.js-Exports"]
            E1["EXP: addTask"]
        end
        subgraph file46Constants["add-task.js-Const Declarations"]
            C1["CONST: AiTaskDataSchema, VALUE: z.object({"]
            C2["CONST: isMCP, VALUE: !!mcpLog"]
            C3["CONST: logFn, VALUE: isMCP"]
            C4["CONST: normalizedPriority, VALUE: normalizeTaskPriority(priority)"]
            C5["CONST: report, VALUE: (message, level = 'info') => {"]
            C6["CONST: task, VALUE: tasks.find((t) => t.id === taskId)"]
            C7["CONST: dependencyData, VALUE: []"]
            C8["CONST: depData, VALUE: buildDependencyGraph("]
            C9["CONST: targetTag, VALUE: tag"]
            C10["CONST: allTasks, VALUE: getAllTasks(rawData)"]
            C11["CONST: tasksInTargetTag, VALUE: rawData[targetTag].tasks"]
            C12["CONST: highestId, VALUE: tasksInTargetTag.length > 0"]
            C13["CONST: newTaskId, VALUE: highestId + 1"]
            C14["CONST: invalidDeps, VALUE: dependencies.filter((depId) => {"]
            C15["CONST: numDepId, VALUE: parseInt(depId, 10)"]
            C16["CONST: numericDependencies, VALUE: dependencies.map((dep) => parseInt(dep, 10))"]
            C17["CONST: dependencyGraphs, VALUE: []"]
            C18["CONST: allRelatedTaskIds, VALUE: new Set()"]
            C19["CONST: depthMap, VALUE: new Map()"]
            C20["CONST: graph, VALUE: buildDependencyGraph(allTasks, depId, new Set(), depthMap)"]
            C21["CONST: contextGatherer, VALUE: new ContextGatherer(projectRoot, tag)"]
            C22["CONST: gatherResult, VALUE: await contextGatherer.gather({"]
            C23["CONST: gatheredContext, VALUE: gatherResult.context"]
            C24["CONST: analysisData, VALUE: gatherResult.analysisData"]
            C25["CONST: promptManager, VALUE: getPromptManager()"]
            C26["CONST: serviceRole, VALUE: useResearch ? 'research' : 'main'"]
            C27["CONST: newTask, VALUE: {"]
            C28["CONST: allValidDeps, VALUE: taskData.dependencies.every((depId) => {"]
            C29["CONST: numDepId, VALUE: parseInt(depId, 10)"]
            C30["CONST: numDepId, VALUE: parseInt(depId, 10)"]
            C31["CONST: table, VALUE: new Table({"]
            C32["CONST: getPriorityColor, VALUE: (p) => {"]
            C33["CONST: aiAddedDeps, VALUE: newTask.dependencies.filter("]
            C34["CONST: aiRemovedDeps, VALUE: numericDependencies.filter("]
            C35["CONST: depTitles, VALUE: {}"]
            C36["CONST: depTask, VALUE: allTasks.find((t) => t.id === dep)"]
            C37["CONST: isAiAdded, VALUE: aiAddedDeps.includes(dep)"]
            C38["CONST: depType, VALUE: isAiAdded ? chalk.yellow(' (AI suggested)') : ''"]
            C39["CONST: depTask, VALUE: allTasks.find((t) => t.id === dep)"]
            C40["CONST: title, VALUE: depTask ? truncate(depTask.title, 30) : 'Unknown task'"]
        end
        subgraph file46Flow["add-task.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file47["scripts/modules/task-manager/analyze-task-complexity.js"]
        subgraph file47Imports["analyze-task-complexity.js-Imports"]
            I1["IMPORT: chalk, FROM: chalk"]
            I2["IMPORT: boxen, FROM: boxen"]
            I3["IMPORT: readline, FROM: readline"]
            I4["IMPORT: fs, FROM: fs"]
            I5["IMPORT: ../utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
            I6["IMPORT: ../ai-services-unified.js, FROM: /claude-task-master/scripts/modules/ai-services-unified.js"]
            I7["IMPORT: ../prompt-manager.js, FROM: /claude-task-master/scripts/modules/prompt-manager.js"]
            I8["IMPORT: ../../../src/constants/providers.js, FROM: /claude-task-master/src/constants/providers.js"]
            I9["IMPORT: ../../../src/utils/path-utils.js, FROM: /claude-task-master/src/utils/path-utils.js"]
            I10["IMPORT: ../utils/contextGatherer.js, FROM: /claude-task-master/scripts/modules/utils/contextGatherer.js"]
            I11["IMPORT: ../utils/fuzzyTaskSearch.js, FROM: /claude-task-master/scripts/modules/utils/fuzzyTaskSearch.js"]
            I12["IMPORT: ../utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        end
        subgraph file47Functions["analyze-task-complexity.js-Functions Defined"]
            FU1["FUNCTION: generateInternalComplexityAnalysisPrompt"]
            FU2["FUNCTION: analyzeTaskComplexity"]
            FU3["FUNCTION: reportLog"]
        end
        subgraph file47Exports["analyze-task-complexity.js-Exports"]
            E1["EXP: analyzeTaskComplexity"]
        end
        subgraph file47Constants["analyze-task-complexity.js-Const Declarations"]
            C1["CONST: tasksString, VALUE: JSON.stringify(tasksData.tasks, null, 2)"]
            C2["CONST: tasksPath, VALUE: options.file || LEGACY_TASKS_FILE"]
            C3["CONST: thresholdScore, VALUE: parseFloat(options.threshold || '5')"]
            C4["CONST: useResearch, VALUE: options.research || false"]
            C5["CONST: projectRoot, VALUE: options.projectRoot"]
            C6["CONST: tag, VALUE: options.tag"]
            C7["CONST: specificIds, VALUE: options.id"]
            C8["CONST: fromId, VALUE: options.from !== undefined ? parseInt(options.from, 10) : null"]
            C9["CONST: toId, VALUE: options.to !== undefined ? parseInt(options.to, 10) : null"]
            C10["CONST: outputFormat, VALUE: mcpLog ? 'json' : 'text'"]
            C11["CONST: reportLog, VALUE: (message, level = 'info') => {"]
            C12["CONST: outputPath, VALUE: resolveComplexityReportOutputPath("]
            C13["CONST: activeStatuses, VALUE: ['pending', 'blocked', 'in-progress']"]
            C14["CONST: foundIds, VALUE: filteredTasks.map((t) => t.id)"]
            C15["CONST: missingIds, VALUE: specificIds.filter("]
            C16["CONST: effectiveFromId, VALUE: fromId !== null ? fromId : 1"]
            C17["CONST: effectiveToId, VALUE: toId !== null"]
            C18["CONST: contextGatherer, VALUE: new ContextGatherer(projectRoot, tag)"]
            C19["CONST: allTasksFlat, VALUE: flattenTasksWithSubtasks(originalData.tasks)"]
            C20["CONST: fuzzySearch, VALUE: new FuzzyTaskSearch("]
            C21["CONST: searchQuery, VALUE: tasksData.tasks"]
            C22["CONST: searchResults, VALUE: fuzzySearch.findRelevantTasks(searchQuery, {"]
            C23["CONST: relevantTaskIds, VALUE: fuzzySearch.getTaskIds(searchResults)"]
            C24["CONST: contextResult, VALUE: await contextGatherer.gather({"]
            C25["CONST: skippedCount, VALUE: originalTaskCount - tasksData.tasks.length"]
            C26["CONST: filterMsg, VALUE: specificIds"]
            C27["CONST: skipMessage, VALUE: `Skipping ${skippedCount} tasks marked as done/cancelled/deferred. Analyzing ${tasksData.tasks.length} active tasks.`"]
            C28["CONST: existingAnalysisMap, VALUE: new Map()"]
            C29["CONST: emptyReport, VALUE: {"]
            C30["CONST: highComplexity, VALUE: 0"]
            C31["CONST: mediumComplexity, VALUE: 0"]
            C32["CONST: lowComplexity, VALUE: 0"]
            C33["CONST: totalAnalyzed, VALUE: 0"]
            C34["CONST: promptManager, VALUE: getPromptManager()"]
            C35["CONST: currentProvider, VALUE: useResearch"]
            C36["CONST: isClaudeCode, VALUE: currentProvider === CUSTOM_PROVIDERS.CLAUDE_CODE"]
            C37["CONST: promptParams, VALUE: {"]
            C38["CONST: role, VALUE: useResearch ? 'research' : 'main'"]
            C39["CONST: codeBlockMatch, VALUE: cleanedResponse.match("]
            C40["CONST: firstBracket, VALUE: cleanedResponse.indexOf('[')"]
            C41["CONST: lastBracket, VALUE: cleanedResponse.lastIndexOf(']')"]
            C42["CONST: taskIds, VALUE: tasksData.tasks.map((t) => t.id)"]
            C43["CONST: analysisTaskIds, VALUE: complexityAnalysis.map((a) => a.taskId)"]
            C44["CONST: missingTaskIds, VALUE: taskIds.filter("]
            C45["CONST: missingTask, VALUE: tasksData.tasks.find((t) => t.id === missingId)"]
            C46["CONST: analyzedTaskIds, VALUE: new Set("]
            C47["CONST: currentTagTaskIds, VALUE: new Set(tasksData.tasks.map((t) => t.id))"]
            C48["CONST: existingEntriesNotAnalyzed, VALUE: existingReport.complexityAnalysis.filter("]
            C49["CONST: report, VALUE: {"]
            C50["CONST: highComplexity, VALUE: complexityAnalysis.filter("]
            C51["CONST: mediumComplexity, VALUE: complexityAnalysis.filter("]
            C52["CONST: lowComplexity, VALUE: complexityAnalysis.filter("]
            C53["CONST: totalAnalyzed, VALUE: complexityAnalysis.length"]
        end
        subgraph file47Flow["analyze-task-complexity.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file48["scripts/modules/task-manager/clear-subtasks.js"]
        subgraph file48Imports["clear-subtasks.js-Imports"]
            I1["IMPORT: path, FROM: path"]
            I2["IMPORT: chalk, FROM: chalk"]
            I3["IMPORT: boxen, FROM: boxen"]
            I4["IMPORT: cli-table3, FROM: cli-table3"]
            I5["IMPORT: ../utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
            I6["IMPORT: ../ui.js, FROM: /claude-task-master/scripts/modules/ui.js"]
        end
        subgraph file48Functions["clear-subtasks.js-Functions Defined"]
            FU1["FUNCTION: clearSubtasks"]
        end
        subgraph file48Exports["clear-subtasks.js-Exports"]
            E1["EXP: clearSubtasks"]
        end
        subgraph file48Constants["clear-subtasks.js-Const Declarations"]
            C1["CONST: data, VALUE: readJSON(tasksPath, projectRoot, tag)"]
            C2["CONST: taskIdArray, VALUE: taskIds.split(',').map((id) => id.trim())"]
            C3["CONST: summaryTable, VALUE: new Table({"]
            C4["CONST: id, VALUE: parseInt(taskId, 10)"]
            C5["CONST: task, VALUE: data.tasks.find((t) => t.id === id)"]
            C6["CONST: subtaskCount, VALUE: task.subtasks.length"]
        end
        subgraph file48Flow["clear-subtasks.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file49["scripts/modules/task-manager/expand-all-tasks.js"]
        subgraph file49Imports["expand-all-tasks.js-Imports"]
            I1["IMPORT: ../utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
            I2["IMPORT: ./expand-task.js, FROM: /claude-task-master/scripts/modules/task-manager/expand-task.js"]
            I3["IMPORT: ../config-manager.js, FROM: /claude-task-master/scripts/modules/config-manager.js"]
            I4["IMPORT: ../utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
            I5["IMPORT: chalk, FROM: chalk"]
            I6["IMPORT: boxen, FROM: boxen"]
        end
        subgraph file49Functions["expand-all-tasks.js-Functions Defined"]
            FU1["FUNCTION: expandAllTasks"]
        end
        subgraph file49Exports["expand-all-tasks.js-Exports"]
            E1["EXP: expandAllTasks"]
        end
        subgraph file49Constants["expand-all-tasks.js-Const Declarations"]
            C1["CONST: isMCPCall, VALUE: !!mcpLog"]
            C2["CONST: projectRoot, VALUE: providedProjectRoot || findProjectRoot()"]
            C3["CONST: logger, VALUE: mcpLog ||"]
            C4["CONST: allTelemetryData, VALUE: []"]
            C5["CONST: data, VALUE: readJSON(tasksPath, projectRoot, tag)"]
            C6["CONST: tasksToExpand, VALUE: data.tasks.filter("]
            C7["CONST: result, VALUE: await expandTask("]
            C8["CONST: aggregatedTelemetryData, VALUE: aggregateTelemetry("]
            C9["CONST: summaryContent, VALUE: `${chalk.white.bold('Expansion Summary:')}\\n\\n` +"]
        end
        subgraph file49Flow["expand-all-tasks.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file50["scripts/modules/task-manager/expand-task.js"]
        subgraph file50Imports["expand-task.js-Imports"]
            I1["IMPORT: fs, FROM: fs"]
            I2["IMPORT: path, FROM: path"]
            I3["IMPORT: zod, FROM: zod"]
            I4["IMPORT: ../ai-services-unified.js, FROM: /claude-task-master/scripts/modules/ai-services-unified.js"]
            I5["IMPORT: ../prompt-manager.js, FROM: /claude-task-master/scripts/modules/prompt-manager.js"]
            I6["IMPORT: ./generate-task-files.js, FROM: /claude-task-master/scripts/modules/task-manager/generate-task-files.js"]
            I7["IMPORT: ../../../src/constants/paths.js, FROM: /claude-task-master/src/constants/paths.js"]
            I8["IMPORT: ../../../src/constants/providers.js, FROM: /claude-task-master/src/constants/providers.js"]
            I9["IMPORT: ../utils/contextGatherer.js, FROM: /claude-task-master/scripts/modules/utils/contextGatherer.js"]
            I10["IMPORT: ../utils/fuzzyTaskSearch.js, FROM: /claude-task-master/scripts/modules/utils/fuzzyTaskSearch.js"]
            I11["IMPORT: ../utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        end
        subgraph file50Functions["expand-task.js-Functions Defined"]
            FU1["FUNCTION: parseSubtasksFromText"]
            FU2["FUNCTION: expandTask"]
        end
        subgraph file50Exports["expand-task.js-Exports"]
            E1["EXP: expandTask"]
        end
        subgraph file50Constants["expand-task.js-Const Declarations"]
            C1["CONST: subtaskSchema, VALUE: z"]
            C2["CONST: subtaskArraySchema, VALUE: z.array(subtaskSchema)"]
            C3["CONST: subtaskWrapperSchema, VALUE: z.object({"]
            C4["CONST: originalTrimmedResponse, VALUE: text.trim()"]
            C5["CONST: malformedPattern, VALUE: /\dependencies\:\\s*,/g"]
            C6["CONST: codeBlockMatch, VALUE: jsonToParse.match(/```(?:json)?\\s*([\\s\\S]*?)\\s*```/)"]
            C7["CONST: targetPattern, VALUE: '{\subtasks\:'"]
            C8["CONST: patternStartIndex, VALUE: jsonToParse.indexOf(targetPattern)"]
            C9["CONST: openBraces, VALUE: 0"]
            C10["CONST: firstBraceFound, VALUE: false"]
            C11["CONST: extractedJsonBlock, VALUE: ''"]
            C12["CONST: parsedSubtasks, VALUE: parsedObject.subtasks"]
            C13["CONST: validatedSubtasks, VALUE: []"]
            C14["CONST: validationErrors, VALUE: []"]
            C15["CONST: correctedSubtask, VALUE: {"]
            C16["CONST: result, VALUE: subtaskSchema.safeParse(correctedSubtask)"]
            C17["CONST: errorMessage, VALUE: `  - Field '${err.path.join('.')}': ${err.message}`"]
            C18["CONST: outputFormat, VALUE: mcpLog ? 'json' : 'text'"]
            C19["CONST: projectRoot, VALUE: contextProjectRoot || findProjectRoot(tasksPath)"]
            C20["CONST: logger, VALUE: mcpLog || {"]
            C21["CONST: data, VALUE: readJSON(tasksPath, projectRoot, tag)"]
            C22["CONST: taskIndex, VALUE: data.tasks.findIndex("]
            C23["CONST: task, VALUE: data.tasks[taskIndex]"]
            C24["CONST: contextGatherer, VALUE: new ContextGatherer(projectRoot, tag)"]
            C25["CONST: allTasksFlat, VALUE: flattenTasksWithSubtasks(data.tasks)"]
            C26["CONST: fuzzySearch, VALUE: new FuzzyTaskSearch(allTasksFlat, 'expand-task')"]
            C27["CONST: searchQuery, VALUE: `${task.title} ${task.description}`"]
            C28["CONST: searchResults, VALUE: fuzzySearch.findRelevantTasks(searchQuery, {"]
            C29["CONST: relevantTaskIds, VALUE: fuzzySearch.getTaskIds(searchResults)"]
            C30["CONST: finalTaskIds, VALUE: ["]
            C31["CONST: contextResult, VALUE: await contextGatherer.gather({"]
            C32["CONST: complexityReport, VALUE: readJSON(complexityReportPath)"]
            C33["CONST: explicitNumSubtasks, VALUE: parseInt(numSubtasks, 10)"]
            C34["CONST: nextSubtaskId, VALUE: (task.subtasks?.length || 0) + 1"]
            C35["CONST: promptManager, VALUE: getPromptManager()"]
            C36["CONST: currentProvider, VALUE: useResearch"]
            C37["CONST: isClaudeCode, VALUE: currentProvider === CUSTOM_PROVIDERS.CLAUDE_CODE"]
            C38["CONST: promptParams, VALUE: {"]
            C39["CONST: role, VALUE: useResearch ? 'research' : 'main'"]
        end
        subgraph file50Flow["expand-task.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file51["scripts/modules/task-manager/find-next-task.js"]
        subgraph file51Imports["find-next-task.js-Imports"]
            I1["IMPORT: ../utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
            I2["IMPORT: ../utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        end
        subgraph file51Functions["find-next-task.js-Functions Defined"]
            FU1["FUNCTION: findNextTask"]
            FU2["FUNCTION: toFullSubId"]
        end
        subgraph file51Exports["find-next-task.js-Exports"]
            E1["EXP: findNextTask"]
        end
        subgraph file51Constants["find-next-task.js-Const Declarations"]
            C1["CONST: priorityValues, VALUE: { high: 3, medium: 2, low: 1 }"]
            C2["CONST: toFullSubId, VALUE: (parentId, maybeDotId) => {"]
            C3["CONST: completedIds, VALUE: new Set()"]
            C4["CONST: candidateSubtasks, VALUE: []"]
            C5["CONST: stStatus, VALUE: (st.status || 'pending').toLowerCase()"]
            C6["CONST: fullDeps, VALUE: st.dependencies?.map((d) => toFullSubId(parent.id, d)) ?? []"]
            C7["CONST: depsSatisfied, VALUE: fullDeps.length === 0 ||"]
            C8["CONST: pa, VALUE: priorityValues[a.priority] ?? 2"]
            C9["CONST: pb, VALUE: priorityValues[b.priority] ?? 2"]
            C10["CONST: nextTask, VALUE: candidateSubtasks[0]"]
            C11["CONST: eligibleTasks, VALUE: tasks.filter((task) => {"]
            C12["CONST: status, VALUE: (task.status || 'pending').toLowerCase()"]
            C13["CONST: deps, VALUE: task.dependencies ?? []"]
            C14["CONST: nextTask, VALUE: eligibleTasks.sort((a, b) => {"]
            C15["CONST: pa, VALUE: priorityValues[a.priority || 'medium'] ?? 2"]
            C16["CONST: pb, VALUE: priorityValues[b.priority || 'medium'] ?? 2"]
            C17["CONST: da, VALUE: (a.dependencies ?? []).length"]
            C18["CONST: db, VALUE: (b.dependencies ?? []).length"]
        end
        subgraph file51Flow["find-next-task.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file52["scripts/modules/task-manager/generate-task-files.js"]
        subgraph file52Imports["generate-task-files.js-Imports"]
            I1["IMPORT: path, FROM: path"]
            I2["IMPORT: fs, FROM: fs"]
            I3["IMPORT: chalk, FROM: chalk"]
            I4["IMPORT: ../utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
            I5["IMPORT: ../ui.js, FROM: /claude-task-master/scripts/modules/ui.js"]
            I6["IMPORT: ../dependency-manager.js, FROM: /claude-task-master/scripts/modules/dependency-manager.js"]
            I7["IMPORT: ../config-manager.js, FROM: /claude-task-master/scripts/modules/config-manager.js"]
        end
        subgraph file52Functions["generate-task-files.js-Functions Defined"]
            FU1["FUNCTION: generateTaskFiles"]
        end
        subgraph file52Exports["generate-task-files.js-Exports"]
            E1["EXP: generateTaskFiles"]
        end
        subgraph file52Constants["generate-task-files.js-Const Declarations"]
            C1["CONST: isMcpMode, VALUE: !!options?.mcpLog"]
            C2["CONST: resolvedData, VALUE: readJSON(tasksPath, projectRoot, tag)"]
            C3["CONST: rawData, VALUE: resolvedData._rawTaggedData || resolvedData"]
            C4["CONST: tagData, VALUE: rawData[tag]"]
            C5["CONST: tasksForGeneration, VALUE: tagData.tasks"]
            C6["CONST: allTasksInTag, VALUE: tagData.tasks"]
            C7["CONST: validTaskIds, VALUE: allTasksInTag.map((task) => task.id)"]
            C8["CONST: files, VALUE: fs.readdirSync(outputDir)"]
            C9["CONST: masterFilePattern, VALUE: /^task_(\\d+)\\.txt$/"]
            C10["CONST: taggedFilePattern, VALUE: new RegExp(`^task_(\\\\d+)_${tag}\\\\.txt$`)"]
            C11["CONST: orphanedFiles, VALUE: files.filter((file) => {"]
            C12["CONST: filePath, VALUE: path.join(outputDir, file)"]
            C13["CONST: taskFileName, VALUE: tag === 'master'"]
            C14["CONST: taskPath, VALUE: path.join(outputDir, taskFileName)"]
            C15["CONST: subtaskDeps, VALUE: subtask.dependencies"]
        end
        subgraph file52Flow["generate-task-files.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file53["scripts/modules/task-manager/is-task-dependent.js"]
        subgraph file53Imports["is-task-dependent.js-Imports"]
            I0["(none)"]
        end
        subgraph file53Functions["is-task-dependent.js-Functions Defined"]
            FU1["FUNCTION: isTaskDependentOn"]
        end
        subgraph file53Exports["is-task-dependent.js-Exports"]
            E1["EXP: isTaskDependentOn"]
        end
        subgraph file53Constants["is-task-dependent.js-Const Declarations"]
            C1["CONST: depTask, VALUE: allTasks.find((t) => t.id === depId)"]
        end
        subgraph file53Flow["is-task-dependent.js-Execution Flow"]
            FL1["Define functions and core logic for this module"]
            FL2["Expose public API via exports"]
        end
    end
    subgraph file54["scripts/modules/task-manager/list-tasks.js"]
        subgraph file54Imports["list-tasks.js-Imports"]
            I1["IMPORT: chalk, FROM: chalk"]
            I2["IMPORT: boxen, FROM: boxen"]
            I3["IMPORT: cli-table3, FROM: cli-table3"]
            I4["IMPORT: ./find-next-task.js, FROM: /claude-task-master/scripts/modules/task-manager/find-next-task.js"]
        end
        subgraph file54Functions["list-tasks.js-Functions Defined"]
            FU1["FUNCTION: listTasks"]
            FU2["FUNCTION: getWorkItemDescription"]
            FU3["FUNCTION: generateMarkdownOutput"]
            FU4["FUNCTION: createMarkdownProgressBar"]
            FU5["FUNCTION: getStatusSymbol"]
            FU6["FUNCTION: formatDependenciesForMarkdown"]
        end
        subgraph file54Exports["list-tasks.js-Exports"]
            E1["EXP: listTasks"]
        end
        subgraph file54Constants["list-tasks.js-Const Declarations"]
            C1["CONST: data, VALUE: readJSON(tasksPath, projectRoot, tag)"]
            C2["CONST: complexityReport, VALUE: readComplexityReport(reportPath)"]
            C3["CONST: allowedStatuses, VALUE: statusFilter"]
            C4["CONST: totalTasks, VALUE: data.tasks.length"]
            C5["CONST: completedTasks, VALUE: data.tasks.filter("]
            C6["CONST: completionPercentage, VALUE: totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 0"]
            C7["CONST: doneCount, VALUE: completedTasks"]
            C8["CONST: inProgressCount, VALUE: data.tasks.filter("]
            C9["CONST: pendingCount, VALUE: data.tasks.filter("]
            C10["CONST: blockedCount, VALUE: data.tasks.filter("]
            C11["CONST: deferredCount, VALUE: data.tasks.filter("]
            C12["CONST: cancelledCount, VALUE: data.tasks.filter("]
            C13["CONST: reviewCount, VALUE: data.tasks.filter("]
            C14["CONST: subtaskCompletionPercentage, VALUE: totalSubtasks > 0 ? (completedSubtasks / totalSubtasks) * 100 : 0"]
            C15["CONST: completedTaskIds, VALUE: new Set("]
            C16["CONST: tasksWithNoDeps, VALUE: data.tasks.filter("]
            C17["CONST: tasksWithAllDepsSatisfied, VALUE: data.tasks.filter("]
            C18["CONST: tasksWithUnsatisfiedDeps, VALUE: data.tasks.filter("]
            C19["CONST: tasksReadyToWork, VALUE: tasksWithNoDeps + tasksWithAllDepsSatisfied"]
            C20["CONST: dependencyCount, VALUE: {}"]
            C21["CONST: mostDependedOnTask, VALUE: mostDependedOnTaskId !== null"]
            C22["CONST: totalDependencies, VALUE: data.tasks.reduce("]
            C23["CONST: avgDependenciesPerTask, VALUE: totalDependencies / data.tasks.length"]
            C24["CONST: nextItem, VALUE: findNextTask(data.tasks, complexityReport)"]
            C25["CONST: tasksWithoutDetails, VALUE: filteredTasks.map((task) => {"]
            C26["CONST: taskStatusBreakdown, VALUE: {"]
            C27["CONST: subtaskStatusBreakdown, VALUE: {"]
            C28["CONST: taskProgressBar, VALUE: createProgressBar("]
            C29["CONST: subtaskProgressBar, VALUE: createProgressBar("]
            C30["CONST: projectDashboardContent, VALUE: chalk.white.bold('Project Dashboard') +"]
            C31["CONST: dependencyDashboardContent, VALUE: chalk.white.bold('Dependency Status & Next Task') +"]
            C32["CONST: minDashboardWidth, VALUE: 50"]
            C33["CONST: minDependencyWidth, VALUE: 50"]
            C34["CONST: totalMinWidth, VALUE: minDashboardWidth + minDependencyWidth + 4"]
            C35["CONST: availableWidth, VALUE: terminalWidth"]
            C36["CONST: halfWidth, VALUE: Math.floor(availableWidth / 2)"]
            C37["CONST: boxContentWidth, VALUE: halfWidth - 4"]
            C38["CONST: dashboardBox, VALUE: boxen(projectDashboardContent, {"]
            C39["CONST: dependencyBox, VALUE: boxen(dependencyDashboardContent, {"]
            C40["CONST: dashboardLines, VALUE: dashboardBox.split('\\n')"]
            C41["CONST: dependencyLines, VALUE: dependencyBox.split('\\n')"]
            C42["CONST: maxHeight, VALUE: Math.max(dashboardLines.length, dependencyLines.length)"]
            C43["CONST: combinedLines, VALUE: []"]
            C44["CONST: dashLine, VALUE: i < dashboardLines.length ? dashboardLines[i] : ''"]
            C45["CONST: depLine, VALUE: i < dependencyLines.length ? dependencyLines[i] : ''"]
            C46["CONST: trimmedDashLine, VALUE: dashLine.trimEnd()"]
            C47["CONST: paddedDashLine, VALUE: trimmedDashLine.padEnd(halfWidth, ' ')"]
            C48["CONST: dashboardBox, VALUE: boxen(projectDashboardContent, {"]
            C49["CONST: dependencyBox, VALUE: boxen(dependencyDashboardContent, {"]
            C50["CONST: idWidthPct, VALUE: withSubtasks ? 10 : 7"]
            C51["CONST: statusWidthPct, VALUE: 15"]
            C52["CONST: priorityWidthPct, VALUE: 12"]
            C53["CONST: depsWidthPct, VALUE: 20"]
            C54["CONST: complexityWidthPct, VALUE: 10"]
            C55["CONST: titleWidthPct, VALUE: 100 -"]
            C56["CONST: availableWidth, VALUE: terminalWidth - 10"]
            C57["CONST: idWidth, VALUE: Math.floor(availableWidth * (idWidthPct / 100))"]
            C58["CONST: statusWidth, VALUE: Math.floor(availableWidth * (statusWidthPct / 100))"]
            C59["CONST: priorityWidth, VALUE: Math.floor(availableWidth * (priorityWidthPct / 100))"]
            C60["CONST: depsWidth, VALUE: Math.floor(availableWidth * (depsWidthPct / 100))"]
            C61["CONST: complexityWidth, VALUE: Math.floor("]
            C62["CONST: titleWidth, VALUE: Math.floor(availableWidth * (titleWidthPct / 100))"]
            C63["CONST: table, VALUE: new Table({"]
            C64["CONST: cleanTitle, VALUE: task.title.replace(/\\n/g, ' ')"]
            C65["CONST: priorityColor, VALUE: {"]
            C66["CONST: status, VALUE: getStatusWithColor(task.status, true)"]
            C67["CONST: formattedDeps, VALUE: subtask.dependencies"]
            C68["CONST: foundSubtask, VALUE: task.subtasks.find("]
            C69["CONST: isDone, VALUE: foundSubtask.status === 'done' ||"]
            C70["CONST: isInProgress, VALUE: foundSubtask.status === 'in-progress'"]
            C71["CONST: depTask, VALUE: data.tasks.find((t) => t.id === depId)"]
            C72["CONST: isDone, VALUE: depTask.status === 'done' || depTask.status === 'completed'"]
            C73["CONST: isInProgress, VALUE: depTask.status === 'in-progress'"]
            C74["CONST: priorityColors, VALUE: {"]
            C75["CONST: parentTaskForSubtasks, VALUE: data.tasks.find("]
            C76["CONST: status, VALUE: subtask.status || 'pending'"]
            C77["CONST: statusColors, VALUE: {"]
            C78["CONST: statusColor, VALUE: statusColors[status.toLowerCase()] || chalk.white"]
            C79["CONST: parent, VALUE: allTasks.find((t) => t.id === item.parentId)"]
            C80["CONST: subtask, VALUE: parent?.subtasks?.find("]
            C81["CONST: task, VALUE: allTasks.find((t) => String(t.id) === String(item.id))"]
            C82["CONST: createMarkdownProgressBar, VALUE: (percentage, width = 20) => {"]
            C83["CONST: filled, VALUE: Math.round((percentage / 100) * width)"]
            C84["CONST: empty, VALUE: width - filled"]
            C85["CONST: taskProgressBar, VALUE: createMarkdownProgressBar(completionPercentage, 20)"]
            C86["CONST: subtaskProgressBar, VALUE: createMarkdownProgressBar("]
            C87["CONST: getStatusSymbol, VALUE: (status) => {"]
            C88["CONST: formatDependenciesForMarkdown, VALUE: (deps, allTasks) => {"]
            C89["CONST: depTask, VALUE: allTasks.find((t) => t.id === depId)"]
            C90["CONST: taskTitle, VALUE: task.title"]
            C91["CONST: statusSymbol, VALUE: getStatusSymbol(task.status)"]
            C92["CONST: priority, VALUE: task.priority || 'medium'"]
            C93["CONST: deps, VALUE: formatDependenciesForMarkdown(task.dependencies, data.tasks)"]
            C94["CONST: complexity, VALUE: task.complexityScore"]
            C95["CONST: subtaskTitle, VALUE: `${subtask.title}`"]
            C96["CONST: subtaskStatus, VALUE: getStatusSymbol(subtask.status)"]
            C97["CONST: subtaskDeps, VALUE: formatDependenciesForMarkdown("]
            C98["CONST: subtaskComplexity, VALUE: subtask.complexityScore"]
        end
        subgraph file54Flow["list-tasks.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file55["scripts/modules/task-manager/migrate.js"]
        subgraph file55Imports["migrate.js-Imports"]
            I1["IMPORT: fs, FROM: fs"]
            I2["IMPORT: path, FROM: path"]
            I3["IMPORT: chalk, FROM: chalk"]
            I4["IMPORT: url, FROM: url"]
            I5["IMPORT: ../../../mcp-server/src/tools/utils.js, FROM: /claude-task-master/mcp-server/src/tools/utils.js"]
            I6["IMPORT: ../utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        end
        subgraph file55Functions["migrate.js-Functions Defined"]
            FU1["FUNCTION: migrateProject"]
            FU2["FUNCTION: analyzeMigrationNeeds"]
            FU3["FUNCTION: performMigration"]
        end
        subgraph file55Exports["migrate.js-Exports"]
            E0["(none)"]
        end
        subgraph file55Constants["migrate.js-Const Declarations"]
            C1["CONST: __filename, VALUE: fileURLToPath(import.meta.url)"]
            C2["CONST: __dirname, VALUE: path.dirname(__filename)"]
            C3["CONST: log, VALUE: createLogWrapper({"]
            C4["CONST: projectRoot, VALUE: findProjectRoot() || process.cwd()"]
            C5["CONST: taskmasterDir, VALUE: path.join(projectRoot, '.taskmaster')"]
            C6["CONST: migrationPlan, VALUE: analyzeMigrationNeeds(projectRoot)"]
            C7["CONST: action, VALUE: options.dryRun ? 'Would move' : 'Will move'"]
            C8["CONST: readline, VALUE: await import('readline')"]
            C9["CONST: rl, VALUE: readline.createInterface({"]
            C10["CONST: answer, VALUE: await new Promise((resolve) => {"]
            C11["CONST: migrationPlan, VALUE: []"]
            C12["CONST: tasksDir, VALUE: path.join(projectRoot, 'tasks')"]
            C13["CONST: tasksFiles, VALUE: fs.readdirSync(tasksDir)"]
            C14["CONST: scriptsDir, VALUE: path.join(projectRoot, 'scripts')"]
            C15["CONST: scriptsFiles, VALUE: fs.readdirSync(scriptsDir)"]
            C16["CONST: filePath, VALUE: path.join(scriptsDir, file)"]
            C17["CONST: lowerFile, VALUE: file.toLowerCase()"]
            C18["CONST: oldConfig, VALUE: path.join(projectRoot, LEGACY_CONFIG_FILE)"]
            C19["CONST: taskmasterDir, VALUE: path.join(projectRoot, '.taskmaster')"]
            C20["CONST: neededDirs, VALUE: new Set()"]
            C21["CONST: destDir, VALUE: path.dirname(item.to)"]
            C22["CONST: fullDirPath, VALUE: path.join(projectRoot, dir)"]
            C23["CONST: backupDir, VALUE: path.join(projectRoot, '.taskmaster-migration-backup')"]
            C24["CONST: fromPath, VALUE: path.join(projectRoot, item.from)"]
            C25["CONST: toPath, VALUE: path.join(projectRoot, item.to)"]
            C26["CONST: backupPath, VALUE: path.join("]
            C27["CONST: backupDir, VALUE: path.dirname(backupPath)"]
            C28["CONST: toDir, VALUE: path.dirname(toPath)"]
            C29["CONST: dirsToCheck, VALUE: ['tasks', 'scripts']"]
            C30["CONST: dirPath, VALUE: path.join(projectRoot, dir)"]
            C31["CONST: files, VALUE: fs.readdirSync(dirPath)"]
        end
        subgraph file55Flow["migrate.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
        end
    end
    subgraph file56["scripts/modules/task-manager/models.js"]
        subgraph file56Imports["models.js-Imports"]
            I1["IMPORT: https, FROM: https"]
            I2["IMPORT: http, FROM: http"]
            I3["IMPORT: ../../../src/utils/path-utils.js, FROM: /claude-task-master/src/utils/path-utils.js"]
            I4["IMPORT: ../utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
            I5["IMPORT: ../../../src/constants/providers.js, FROM: /claude-task-master/src/constants/providers.js"]
        end
        subgraph file56Functions["models.js-Functions Defined"]
            FU1["FUNCTION: fetchOpenRouterModels"]
            FU2["FUNCTION: fetchOllamaModels"]
            FU3["FUNCTION: getModelConfiguration"]
            FU4["FUNCTION: getAvailableModelsList"]
            FU5["FUNCTION: setModel"]
            FU6["FUNCTION: getApiKeyStatusReport"]
            FU7["FUNCTION: report"]
        end
        subgraph file56Exports["models.js-Exports"]
            E1["EXP: getModelConfiguration"]
            E2["EXP: getAvailableModelsList"]
            E3["EXP: setModel"]
            E4["EXP: getApiKeyStatusReport"]
        end
        subgraph file56Constants["models.js-Const Declarations"]
            C1["CONST: CONFIG_MISSING_ERROR, VALUE: 'The configuration file is missing. Run \task-master init\ to create it.'"]
            C2["CONST: options, VALUE: {"]
            C3["CONST: req, VALUE: https.request(options, (res) => {"]
            C4["CONST: parsedData, VALUE: JSON.parse(data)"]
            C5["CONST: url, VALUE: new URL(baseURL)"]
            C6["CONST: isHttps, VALUE: url.protocol === 'https:'"]
            C7["CONST: port, VALUE: url.port || (isHttps ? 443 : 80)"]
            C8["CONST: basePath, VALUE: url.pathname.endsWith('/')"]
            C9["CONST: options, VALUE: {"]
            C10["CONST: requestLib, VALUE: isHttps ? https : http"]
            C11["CONST: req, VALUE: requestLib.request(options, (res) => {"]
            C12["CONST: parsedData, VALUE: JSON.parse(data)"]
            C13["CONST: report, VALUE: (level, ...args) => {"]
            C14["CONST: configPath, VALUE: findConfigPath(null, { projectRoot })"]
            C15["CONST: configExists, VALUE: isConfigFilePresent(projectRoot)"]
            C16["CONST: mainProvider, VALUE: getMainProvider(projectRoot)"]
            C17["CONST: mainModelId, VALUE: getMainModelId(projectRoot)"]
            C18["CONST: researchProvider, VALUE: getResearchProvider(projectRoot)"]
            C19["CONST: researchModelId, VALUE: getResearchModelId(projectRoot)"]
            C20["CONST: fallbackProvider, VALUE: getFallbackProvider(projectRoot)"]
            C21["CONST: fallbackModelId, VALUE: getFallbackModelId(projectRoot)"]
            C22["CONST: mainCliKeyOk, VALUE: isApiKeySet(mainProvider, session, projectRoot)"]
            C23["CONST: mainMcpKeyOk, VALUE: getMcpApiKeyStatus(mainProvider, projectRoot)"]
            C24["CONST: researchCliKeyOk, VALUE: isApiKeySet("]
            C25["CONST: researchMcpKeyOk, VALUE: getMcpApiKeyStatus(researchProvider, projectRoot)"]
            C26["CONST: fallbackCliKeyOk, VALUE: fallbackProvider"]
            C27["CONST: fallbackMcpKeyOk, VALUE: fallbackProvider"]
            C28["CONST: availableModels, VALUE: getAvailableModels(projectRoot)"]
            C29["CONST: mainModelData, VALUE: availableModels.find((m) => m.id === mainModelId)"]
            C30["CONST: researchModelData, VALUE: availableModels.find("]
            C31["CONST: fallbackModelData, VALUE: fallbackModelId"]
            C32["CONST: report, VALUE: (level, ...args) => {"]
            C33["CONST: configPath, VALUE: findConfigPath(null, { projectRoot })"]
            C34["CONST: configExists, VALUE: isConfigFilePresent(projectRoot)"]
            C35["CONST: allAvailableModels, VALUE: getAvailableModels(projectRoot)"]
            C36["CONST: mainModelId, VALUE: getMainModelId(projectRoot)"]
            C37["CONST: researchModelId, VALUE: getResearchModelId(projectRoot)"]
            C38["CONST: fallbackModelId, VALUE: getFallbackModelId(projectRoot)"]
            C39["CONST: activeIds, VALUE: [mainModelId, researchModelId, fallbackModelId].filter("]
            C40["CONST: otherAvailableModels, VALUE: allAvailableModels.map((model) => ({"]
            C41["CONST: report, VALUE: (level, ...args) => {"]
            C42["CONST: configPath, VALUE: findConfigPath(null, { projectRoot })"]
            C43["CONST: configExists, VALUE: isConfigFilePresent(projectRoot)"]
            C44["CONST: availableModels, VALUE: getAvailableModels(projectRoot)"]
            C45["CONST: currentConfig, VALUE: getConfig(projectRoot)"]
            C46["CONST: openRouterModels, VALUE: await fetchOpenRouterModels()"]
            C47["CONST: ollamaBaseURL, VALUE: getBaseUrlForRole(role, projectRoot)"]
            C48["CONST: ollamaModels, VALUE: await fetchOllamaModels(ollamaBaseURL)"]
            C49["CONST: tagsUrl, VALUE: `${ollamaBaseURL}/tags`"]
            C50["CONST: claudeCodeModels, VALUE: availableModels.filter("]
            C51["CONST: claudeCodeModelData, VALUE: claudeCodeModels.find("]
            C52["CONST: geminiCliModels, VALUE: availableModels.filter("]
            C53["CONST: geminiCliModelData, VALUE: geminiCliModels.find("]
            C54["CONST: writeResult, VALUE: writeConfig(currentConfig, projectRoot)"]
            C55["CONST: successMessage, VALUE: `Successfully set ${role} model to ${modelId} (Provider: ${determinedProvider})`"]
            C56["CONST: report, VALUE: (level, ...args) => {"]
            C57["CONST: providers, VALUE: getAllProviders()"]
            C58["CONST: providersToCheck, VALUE: providers.filter("]
            C59["CONST: statusReport, VALUE: providersToCheck.map((provider) => {"]
            C60["CONST: cliOk, VALUE: isApiKeySet(provider, session, projectRoot)"]
            C61["CONST: mcpOk, VALUE: getMcpApiKeyStatus(provider, projectRoot)"]
        end
        subgraph file56Flow["models.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file57["scripts/modules/task-manager/move-task.js"]
        subgraph file57Imports["move-task.js-Imports"]
            I1["IMPORT: path, FROM: path"]
            I2["IMPORT: ../utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
            I3["IMPORT: ../task-manager.js, FROM: /claude-task-master/scripts/modules/task-manager.js"]
            I4["IMPORT: ./generate-task-files.js, FROM: /claude-task-master/scripts/modules/task-manager/generate-task-files.js"]
        end
        subgraph file57Functions["move-task.js-Functions Defined"]
            FU1["FUNCTION: moveTask"]
            FU2["FUNCTION: moveSubtaskToSubtask"]
            FU3["FUNCTION: moveSubtaskToTask"]
            FU4["FUNCTION: moveTaskToSubtask"]
            FU5["FUNCTION: moveTaskToTask"]
            FU6["FUNCTION: moveSubtaskToAnotherParent"]
            FU7["FUNCTION: moveTaskToNewId"]
        end
        subgraph file57Exports["move-task.js-Exports"]
            E1["EXP: moveTask"]
        end
        subgraph file57Constants["move-task.js-Const Declarations"]
            C1["CONST: sourceIds, VALUE: sourceId.split(',').map((id) => id.trim())"]
            C2["CONST: destinationIds, VALUE: destinationId.split(',').map((id) => id.trim())"]
            C3["CONST: results, VALUE: []"]
            C4["CONST: result, VALUE: await moveTask("]
            C5["CONST: tasks, VALUE: rawData[tag].tasks"]
            C6["CONST: isSourceSubtask, VALUE: sourceId.includes('.')"]
            C7["CONST: isDestSubtask, VALUE: destinationId.includes('.')"]
            C8["CONST: sourceParentTask, VALUE: tasks.find((t) => t.id === sourceParentId)"]
            C9["CONST: destParentTask, VALUE: tasks.find((t) => t.id === destParentId)"]
            C10["CONST: sourceSubtaskIndex, VALUE: sourceParentTask.subtasks.findIndex("]
            C11["CONST: sourceSubtask, VALUE: sourceParentTask.subtasks[sourceSubtaskIndex]"]
            C12["CONST: destSubtaskIndex, VALUE: destParentTask.subtasks.findIndex("]
            C13["CONST: adjustedIndex, VALUE: sourceSubtaskIndex < destSubtaskIndex"]
            C14["CONST: destTaskId, VALUE: parseInt(destinationId, 10)"]
            C15["CONST: sourceParentTask, VALUE: tasks.find((t) => t.id === sourceParentId)"]
            C16["CONST: sourceSubtaskIndex, VALUE: sourceParentTask.subtasks.findIndex("]
            C17["CONST: sourceSubtask, VALUE: sourceParentTask.subtasks[sourceSubtaskIndex]"]
            C18["CONST: existingDestTask, VALUE: tasks.find((t) => t.id === destTaskId)"]
            C19["CONST: newTask, VALUE: {"]
            C20["CONST: insertIndex, VALUE: tasks.findIndex((t) => t.id > destTaskId)"]
            C21["CONST: sourceTaskId, VALUE: parseInt(sourceId, 10)"]
            C22["CONST: sourceTaskIndex, VALUE: tasks.findIndex((t) => t.id === sourceTaskId)"]
            C23["CONST: destParentTask, VALUE: tasks.find((t) => t.id === destParentId)"]
            C24["CONST: sourceTask, VALUE: tasks[sourceTaskIndex]"]
            C25["CONST: newSubtask, VALUE: {"]
            C26["CONST: insertPosition, VALUE: destSubtaskIndex === -1 ? 0 : destSubtaskIndex + 1"]
            C27["CONST: sourceTaskId, VALUE: parseInt(sourceId, 10)"]
            C28["CONST: destTaskId, VALUE: parseInt(destinationId, 10)"]
            C29["CONST: sourceTaskIndex, VALUE: tasks.findIndex((t) => t.id === sourceTaskId)"]
            C30["CONST: sourceTask, VALUE: tasks[sourceTaskIndex]"]
            C31["CONST: destTaskIndex, VALUE: tasks.findIndex((t) => t.id === destTaskId)"]
            C32["CONST: destTask, VALUE: tasks[destTaskIndex]"]
            C33["CONST: destSubtaskId_num, VALUE: parseInt(destSubtaskId, 10)"]
            C34["CONST: newSubtask, VALUE: {"]
            C35["CONST: insertPosition, VALUE: destSubtaskIndex === -1 ? 0 : destSubtaskIndex + 1"]
            C36["CONST: destTaskIndex, VALUE: tasks.findIndex((t) => t.id === destTaskId)"]
            C37["CONST: movedTask, VALUE: {"]
            C38["CONST: depIndex, VALUE: task.dependencies.indexOf(sourceTask.id)"]
            C39["CONST: depIndex, VALUE: subtask.dependencies.indexOf(sourceTask.id)"]
            C40["CONST: adjustedDestIndex, VALUE: sourceTaskIndex < destTaskIndex ? destTaskIndex - 1 : destTaskIndex"]
        end
        subgraph file57Flow["move-task.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file58["scripts/modules/task-manager/parse-prd.js"]
        subgraph file58Imports["parse-prd.js-Imports"]
            I1["IMPORT: fs, FROM: fs"]
            I2["IMPORT: path, FROM: path"]
            I3["IMPORT: chalk, FROM: chalk"]
            I4["IMPORT: boxen, FROM: boxen"]
            I5["IMPORT: zod, FROM: zod"]
            I6["IMPORT: ../ai-services-unified.js, FROM: /claude-task-master/scripts/modules/ai-services-unified.js"]
            I7["IMPORT: ../prompt-manager.js, FROM: /claude-task-master/scripts/modules/prompt-manager.js"]
            I8["IMPORT: ../ui.js, FROM: /claude-task-master/scripts/modules/ui.js"]
            I9["IMPORT: ../../../src/constants/providers.js, FROM: /claude-task-master/src/constants/providers.js"]
        end
        subgraph file58Functions["parse-prd.js-Functions Defined"]
            FU1["FUNCTION: parsePRD"]
            FU2["FUNCTION: report"]
        end
        subgraph file58Exports["parse-prd.js-Exports"]
            E1["EXP: parsePRD"]
        end
        subgraph file58Constants["parse-prd.js-Const Declarations"]
            C1["CONST: prdSingleTaskSchema, VALUE: z.object({"]
            C2["CONST: prdResponseSchema, VALUE: z.object({"]
            C3["CONST: isMCP, VALUE: !!mcpLog"]
            C4["CONST: outputFormat, VALUE: isMCP ? 'json' : 'text'"]
            C5["CONST: targetTag, VALUE: tag"]
            C6["CONST: logFn, VALUE: mcpLog"]
            C7["CONST: report, VALUE: (message, level = 'info') => {"]
            C8["CONST: existingFileContent, VALUE: fs.readFileSync(tasksPath, 'utf8')"]
            C9["CONST: allData, VALUE: JSON.parse(existingFileContent)"]
            C10["CONST: overwriteError, VALUE: new Error("]
            C11["CONST: prdContent, VALUE: fs.readFileSync(prdPath, 'utf8')"]
            C12["CONST: promptManager, VALUE: getPromptManager()"]
            C13["CONST: defaultTaskPriority, VALUE: getDefaultPriority(projectRoot) || 'medium'"]
            C14["CONST: currentProvider, VALUE: research"]
            C15["CONST: isClaudeCode, VALUE: currentProvider === CUSTOM_PROVIDERS.CLAUDE_CODE"]
            C16["CONST: tasksDir, VALUE: path.dirname(tasksPath)"]
            C17["CONST: generatedData, VALUE: aiServiceResponse?.mainResult?.object"]
            C18["CONST: taskMap, VALUE: new Map()"]
            C19["CONST: processedNewTasks, VALUE: generatedData.tasks.map((task) => {"]
            C20["CONST: newId, VALUE: currentId++"]
            C21["CONST: finalTasks, VALUE: append"]
            C22["CONST: existingFileContent, VALUE: fs.readFileSync(tasksPath, 'utf8')"]
        end
        subgraph file58Flow["parse-prd.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file59["scripts/modules/task-manager/remove-subtask.js"]
        subgraph file59Imports["remove-subtask.js-Imports"]
            I1["IMPORT: path, FROM: path"]
            I2["IMPORT: ../utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
            I3["IMPORT: ./generate-task-files.js, FROM: /claude-task-master/scripts/modules/task-manager/generate-task-files.js"]
        end
        subgraph file59Functions["remove-subtask.js-Functions Defined"]
            FU1["FUNCTION: removeSubtask"]
        end
        subgraph file59Exports["remove-subtask.js-Exports"]
            E1["EXP: removeSubtask"]
        end
        subgraph file59Constants["remove-subtask.js-Const Declarations"]
            C1["CONST: data, VALUE: readJSON(tasksPath, projectRoot, tag)"]
            C2["CONST: parentId, VALUE: parseInt(parentIdStr, 10)"]
            C3["CONST: subtaskIdNum, VALUE: parseInt(subtaskIdStr, 10)"]
            C4["CONST: parentTask, VALUE: data.tasks.find((t) => t.id === parentId)"]
            C5["CONST: subtaskIndex, VALUE: parentTask.subtasks.findIndex("]
            C6["CONST: removedSubtask, VALUE: { ...parentTask.subtasks[subtaskIndex] }"]
            C7["CONST: highestId, VALUE: Math.max(...data.tasks.map((t) => t.id))"]
            C8["CONST: newTaskId, VALUE: highestId + 1"]
        end
        subgraph file59Flow["remove-subtask.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file60["scripts/modules/task-manager/remove-task.js"]
        subgraph file60Imports["remove-task.js-Imports"]
            I1["IMPORT: path, FROM: path"]
            I2["IMPORT: fs, FROM: fs"]
            I3["IMPORT: ../utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
            I4["IMPORT: ./generate-task-files.js, FROM: /claude-task-master/scripts/modules/task-manager/generate-task-files.js"]
            I5["IMPORT: ./task-exists.js, FROM: /claude-task-master/scripts/modules/task-manager/task-exists.js"]
        end
        subgraph file60Functions["remove-task.js-Functions Defined"]
            FU1["FUNCTION: removeTask"]
        end
        subgraph file60Exports["remove-task.js-Exports"]
            E1["EXP: removeTask"]
        end
        subgraph file60Constants["remove-task.js-Const Declarations"]
            C1["CONST: results, VALUE: {"]
            C2["CONST: taskIdsToRemove, VALUE: taskIds"]
            C3["CONST: rawData, VALUE: readJSON(tasksPath, projectRoot, tag)"]
            C4["CONST: fullTaggedData, VALUE: rawData._rawTaggedData || rawData"]
            C5["CONST: tasks, VALUE: fullTaggedData[tag].tasks"]
            C6["CONST: tasksToDeleteFiles, VALUE: []"]
            C7["CONST: errorMsg, VALUE: `Task with ID ${taskId} in tag '${tag}' not found or already removed.`"]
            C8["CONST: parentTask, VALUE: tasks.find((t) => t.id === parentTaskId)"]
            C9["CONST: subtaskIndex, VALUE: parentTask.subtasks.findIndex("]
            C10["CONST: removedSubtask, VALUE: {"]
            C11["CONST: taskIdNum, VALUE: parseInt(taskId, 10)"]
            C12["CONST: taskIndex, VALUE: tasks.findIndex((t) => t.id === taskIdNum)"]
            C13["CONST: removedTask, VALUE: tasks[taskIndex]"]
            C14["CONST: errorMsg, VALUE: `Error processing ID ${taskId}: ${innerError.message}`"]
            C15["CONST: allRemovedIds, VALUE: new Set("]
            C16["CONST: currentTagTasks, VALUE: fullTaggedData[tagName].tasks"]
            C17["CONST: taskFileName, VALUE: path.join("]
            C18["CONST: unlinkMsg, VALUE: `Failed to delete task file ${taskFileName}: ${unlinkError.message}`"]
            C19["CONST: genErrMsg, VALUE: `Failed to regenerate task files: ${genError.message}`"]
            C20["CONST: finalMessage, VALUE: results.messages.join('\\n')"]
            C21["CONST: finalError, VALUE: results.errors.join('\\n')"]
        end
        subgraph file60Flow["remove-task.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file61["scripts/modules/task-manager/research.js"]
        subgraph file61Imports["research.js-Imports"]
            I1["IMPORT: fs, FROM: fs"]
            I2["IMPORT: path, FROM: path"]
            I3["IMPORT: chalk, FROM: chalk"]
            I4["IMPORT: boxen, FROM: boxen"]
            I5["IMPORT: inquirer, FROM: inquirer"]
            I6["IMPORT: cli-highlight, FROM: cli-highlight"]
            I7["IMPORT: ../utils/contextGatherer.js, FROM: /claude-task-master/scripts/modules/utils/contextGatherer.js"]
            I8["IMPORT: ../utils/fuzzyTaskSearch.js, FROM: /claude-task-master/scripts/modules/utils/fuzzyTaskSearch.js"]
            I9["IMPORT: ../ai-services-unified.js, FROM: /claude-task-master/scripts/modules/ai-services-unified.js"]
            I10["IMPORT: ../prompt-manager.js, FROM: /claude-task-master/scripts/modules/prompt-manager.js"]
        end
        subgraph file61Functions["research.js-Functions Defined"]
            FU1["FUNCTION: performResearch"]
            FU2["FUNCTION: displayDetailedTokenBreakdown"]
            FU3["FUNCTION: processCodeBlocks"]
            FU4["FUNCTION: displayResearchResults"]
            FU5["FUNCTION: handleFollowUpQuestions"]
            FU6["FUNCTION: handleSaveToTask"]
            FU7["FUNCTION: handleSaveToFile"]
            FU8["FUNCTION: formatConversationForFile"]
            FU9["FUNCTION: formatConversationForSaving"]
            FU10["FUNCTION: buildConversationContext"]
        end
        subgraph file61Exports["research.js-Exports"]
            E1["EXP: performResearch"]
        end
        subgraph file61Constants["research.js-Const Declarations"]
            C1["CONST: isMCP, VALUE: !!mcpLog"]
            C2["CONST: projectRoot, VALUE: providedProjectRoot || findProjectRoot()"]
            C3["CONST: logFn, VALUE: isMCP"]
            C4["CONST: contextGatherer, VALUE: new ContextGatherer(projectRoot, tag)"]
            C5["CONST: tasksPath, VALUE: path.join("]
            C6["CONST: tasksData, VALUE: await readJSON(tasksPath, projectRoot, tag)"]
            C7["CONST: flattenedTasks, VALUE: flattenTasksWithSubtasks(tasksData.tasks)"]
            C8["CONST: fuzzySearch, VALUE: new FuzzyTaskSearch(flattenedTasks, 'research')"]
            C9["CONST: searchResults, VALUE: fuzzySearch.findRelevantTasks(query, {"]
            C10["CONST: uniqueAutoDiscovered, VALUE: autoDiscoveredIds.filter("]
            C11["CONST: sortedTaskIds, VALUE: finalTaskIds"]
            C12["CONST: sortedProvidedIds, VALUE: taskIds"]
            C13["CONST: sortedAutoIds, VALUE: uniqueAutoDiscovered"]
            C14["CONST: contextResult, VALUE: await contextGatherer.gather({"]
            C15["CONST: gatheredContext, VALUE: contextResult.context"]
            C16["CONST: tokenBreakdown, VALUE: contextResult.tokenBreakdown"]
            C17["CONST: promptManager, VALUE: getPromptManager()"]
            C18["CONST: promptParams, VALUE: {"]
            C19["CONST: systemPromptTokens, VALUE: contextGatherer.countTokens(systemPrompt)"]
            C20["CONST: userPromptTokens, VALUE: contextGatherer.countTokens(userPrompt)"]
            C21["CONST: totalInputTokens, VALUE: systemPromptTokens + userPromptTokens"]
            C22["CONST: researchResult, VALUE: aiResult.mainResult"]
            C23["CONST: telemetryData, VALUE: aiResult.telemetryData"]
            C24["CONST: tagInfo, VALUE: aiResult.tagInfo"]
            C25["CONST: conversationHistory, VALUE: ["]
            C26["CONST: savedFilePath, VALUE: await handleSaveToFile("]
            C27["CONST: parts, VALUE: []"]
            C28["CONST: totalTaskTokens, VALUE: tokenBreakdown.tasks.reduce("]
            C29["CONST: taskDetails, VALUE: tokenBreakdown.tasks"]
            C30["CONST: titleDisplay, VALUE: task.title.length > 30"]
            C31["CONST: totalFileTokens, VALUE: tokenBreakdown.files.reduce("]
            C32["CONST: fileDetails, VALUE: tokenBreakdown.files"]
            C33["CONST: pathDisplay, VALUE: file.path.length > 40"]
            C34["CONST: totalPromptTokens, VALUE: systemPromptTokens + userPromptTokens"]
            C35["CONST: promptDetails, VALUE: ["]
            C36["CONST: content, VALUE: parts.join('\\n\\n')"]
            C37["CONST: tokenBox, VALUE: boxen(content, {"]
            C38["CONST: codeBlockRegex, VALUE: /```(\\w+)?\\n([\\s\\S]*?)```/g"]
            C39["CONST: lang, VALUE: language || 'javascript'"]
            C40["CONST: highlightedCode, VALUE: highlight(code.trim(), {"]
            C41["CONST: codeBox, VALUE: boxen(highlightedCode, {"]
            C42["CONST: header, VALUE: boxen("]
            C43["CONST: processedResult, VALUE: processCodeBlocks(result)"]
            C44["CONST: contentBox, VALUE: boxen(processedResult, {"]
            C45["CONST: updateTaskById, VALUE: (await import('./update-task-by-id.js')).default"]
            C46["CONST: conversationHistory, VALUE: ["]
            C47["CONST: saveResult, VALUE: await handleSaveToTask("]
            C48["CONST: conversationContext, VALUE: buildConversationContext(conversationHistory)"]
            C49["CONST: followUpOptions, VALUE: {"]
            C50["CONST: followUpResult, VALUE: await performResearch("]
            C51["CONST: updateTaskById, VALUE: (await import('./update-task-by-id.js')).default"]
            C52["CONST: trimmedInput, VALUE: input.trim()"]
            C53["CONST: trimmedTaskId, VALUE: taskId.trim()"]
            C54["CONST: conversationThread, VALUE: formatConversationForSaving(conversationHistory)"]
            C55["CONST: isSubtask, VALUE: trimmedTaskId.includes('.')"]
            C56["CONST: tasksPath, VALUE: path.join("]
            C57["CONST: data, VALUE: readJSON(tasksPath, projectRoot, context.tag)"]
            C58["CONST: parentTask, VALUE: data.tasks.find((t) => t.id === parentId)"]
            C59["CONST: taskIdNum, VALUE: parseInt(trimmedTaskId, 10)"]
            C60["CONST: task, VALUE: data.tasks.find((t) => t.id === taskIdNum)"]
            C61["CONST: researchDir, VALUE: path.join("]
            C62["CONST: firstQuery, VALUE: conversationHistory[0]?.question || 'research-query'"]
            C63["CONST: timestamp, VALUE: new Date().toISOString().split('T')[0]"]
            C64["CONST: querySlug, VALUE: firstQuery"]
            C65["CONST: filename, VALUE: `${timestamp}_${querySlug}.md`"]
            C66["CONST: filePath, VALUE: path.join(researchDir, filename)"]
            C67["CONST: fileContent, VALUE: formatConversationForFile("]
            C68["CONST: relativePath, VALUE: path.relative(projectRoot, filePath)"]
            C69["CONST: timestamp, VALUE: new Date().toISOString()"]
            C70["CONST: date, VALUE: new Date().toLocaleDateString()"]
            C71["CONST: time, VALUE: new Date().toLocaleTimeString()"]
            C72["CONST: timestamp, VALUE: new Date().toISOString()"]
            C73["CONST: contextParts, VALUE: ['--- Conversation History ---']"]
            C74["CONST: questionLabel, VALUE: exchange.type === 'initial' ? 'Initial Question' : `Follow-up ${index}`"]
            C75["CONST: answerLabel, VALUE: exchange.type === 'initial' ? 'Initial Answer' : `Answer ${index}`"]
        end
        subgraph file61Flow["research.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file62["scripts/modules/task-manager/response-language.js"]
        subgraph file62Imports["response-language.js-Imports"]
            I1["IMPORT: ../../../src/utils/path-utils.js, FROM: /claude-task-master/src/utils/path-utils.js"]
            I2["IMPORT: ../utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        end
        subgraph file62Functions["response-language.js-Functions Defined"]
            FU1["FUNCTION: setResponseLanguage"]
            FU2["FUNCTION: report"]
        end
        subgraph file62Exports["response-language.js-Exports"]
            E1["EXP: setResponseLanguage"]
        end
        subgraph file62Constants["response-language.js-Const Declarations"]
            C1["CONST: report, VALUE: (level, ...args) => {"]
            C2["CONST: configPath, VALUE: findConfigPath(null, { projectRoot })"]
            C3["CONST: configExists, VALUE: isConfigFilePresent(projectRoot)"]
            C4["CONST: currentConfig, VALUE: getConfig(projectRoot)"]
            C5["CONST: writeResult, VALUE: writeConfig(currentConfig, projectRoot)"]
            C6["CONST: successMessage, VALUE: `Successfully set response language to: ${lang}`"]
        end
        subgraph file62Flow["response-language.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file63["scripts/modules/task-manager/scope-adjustment.js"]
        subgraph file63Imports["scope-adjustment.js-Imports"]
            I1["IMPORT: zod, FROM: zod"]
            I2["IMPORT: ../task-manager.js, FROM: /claude-task-master/scripts/modules/task-manager.js"]
            I3["IMPORT: ./analyze-task-complexity.js, FROM: /claude-task-master/scripts/modules/task-manager/analyze-task-complexity.js"]
            I4["IMPORT: ../../../src/utils/path-utils.js, FROM: /claude-task-master/src/utils/path-utils.js"]
        end
        subgraph file63Functions["scope-adjustment.js-Functions Defined"]
            FU1["FUNCTION: validateStrength"]
            FU2["FUNCTION: reanalyzeTaskComplexity"]
            FU3["FUNCTION: getCurrentComplexityScore"]
            FU4["FUNCTION: regenerateSubtasksForComplexity"]
            FU5["FUNCTION: generateScopePrompt"]
            FU6["FUNCTION: adjustTaskComplexity"]
            FU7["FUNCTION: scopeUpTask"]
            FU8["FUNCTION: scopeDownTask"]
        end
        subgraph file63Exports["scope-adjustment.js-Exports"]
            E1["EXP: validateStrength"]
        end
        subgraph file63Constants["scope-adjustment.js-Const Declarations"]
            C1["CONST: VALID_STRENGTHS, VALUE: ['light', 'regular', 'heavy']"]
            C2["CONST: PRESERVE_STATUSES, VALUE: ["]
            C3["CONST: REGENERATE_STATUSES, VALUE: ['pending']"]
            C4["CONST: tasksForAnalysis, VALUE: {"]
            C5["CONST: complexityReportPath, VALUE: findComplexityReportPath("]
            C6["CONST: analysisOptions, VALUE: {"]
            C7["CONST: updatedReport, VALUE: readComplexityReport(complexityReportPath)"]
            C8["CONST: taskAnalysis, VALUE: findTaskInComplexityReport(updatedReport, task.id)"]
            C9["CONST: complexityReportPath, VALUE: findComplexityReportPath("]
            C10["CONST: complexityReport, VALUE: readComplexityReport(complexityReportPath)"]
            C11["CONST: taskAnalysis, VALUE: findTaskInComplexityReport(complexityReport, taskId)"]
            C12["CONST: preservedSubtasks, VALUE: task.subtasks.filter((subtask) =>"]
            C13["CONST: pendingSubtasks, VALUE: task.subtasks.filter((subtask) =>"]
            C14["CONST: preservedCount, VALUE: preservedSubtasks.length"]
            C15["CONST: currentPendingCount, VALUE: pendingSubtasks.length"]
            C16["CONST: complexityFactor, VALUE: originalComplexity"]
            C17["CONST: complexityInfo, VALUE: originalComplexity"]
            C18["CONST: base, VALUE: Math.max("]
            C19["CONST: base, VALUE: Math.max("]
            C20["CONST: base, VALUE: Math.max("]
            C21["CONST: aggressiveFactor, VALUE: originalComplexity >= 8 ? 0.7 : originalComplexity >= 6 ? 0.85 : 1.0"]
            C22["CONST: base, VALUE: Math.max("]
            C23["CONST: base, VALUE: Math.max("]
            C24["CONST: ultraAggressiveFactor, VALUE: originalComplexity >= 9 ? 0.3 : originalComplexity >= 7 ? 0.5 : 0.7"]
            C25["CONST: base, VALUE: Math.max("]
            C26["CONST: newSubtasksNeeded, VALUE: Math.max(1, targetSubtaskCount - preservedCount)"]
            C27["CONST: systemPrompt, VALUE: `You are an expert project manager who creates task breakdowns that match complexity levels.`"]
            C28["CONST: prompt, VALUE: `Based on this updated task, generate ${newSubtasksNeeded} NEW subtasks that reflect the ${direction === 'up' ? 'incr..."]
            C29["CONST: subtaskSchema, VALUE: z.object({"]
            C30["CONST: aiResult, VALUE: await generateObjectService({"]
            C31["CONST: generatedSubtasks, VALUE: aiResult.mainResult.subtasks || []"]
            C32["CONST: processedGeneratedSubtasks, VALUE: generatedSubtasks.map((subtask) => ({"]
            C33["CONST: isUp, VALUE: direction === 'up'"]
            C34["CONST: strengthDescriptions, VALUE: {"]
            C35["CONST: systemPrompt, VALUE: `You are an expert software project manager who helps adjust task complexity while maintaining clarity and actionabil..."]
            C36["CONST: prompt, VALUE: generateScopePrompt(task, direction, strength, customPrompt)"]
            C37["CONST: taskSchema, VALUE: z.object({"]
            C38["CONST: aiResult, VALUE: await generateObjectService({"]
            C39["CONST: updatedTaskData, VALUE: aiResult.mainResult"]
            C40["CONST: processedTaskData, VALUE: {"]
            C41["CONST: data, VALUE: readJSON(tasksPath, projectRoot, tag)"]
            C42["CONST: tasks, VALUE: data?.tasks || []"]
            C43["CONST: updatedTasks, VALUE: []"]
            C44["CONST: taskResult, VALUE: findTaskById(tasks, taskId)"]
            C45["CONST: task, VALUE: taskResult.task"]
            C46["CONST: originalComplexity, VALUE: getCurrentComplexityScore(taskId, context)"]
            C47["CONST: adjustResult, VALUE: await adjustTaskComplexity("]
            C48["CONST: subtaskResult, VALUE: await regenerateSubtasksForComplexity("]
            C49["CONST: taskIndex, VALUE: data.tasks.findIndex((t) => t.id === taskId)"]
            C50["CONST: newComplexity, VALUE: await reanalyzeTaskComplexity("]
            C51["CONST: complexityChange, VALUE: newComplexity - originalComplexity"]
            C52["CONST: arrow, VALUE: complexityChange > 0 ? '↗️' : complexityChange < 0 ? '↘️' : '➡️'"]
            C53["CONST: data, VALUE: readJSON(tasksPath, projectRoot, tag)"]
            C54["CONST: tasks, VALUE: data?.tasks || []"]
            C55["CONST: updatedTasks, VALUE: []"]
            C56["CONST: taskResult, VALUE: findTaskById(tasks, taskId)"]
            C57["CONST: task, VALUE: taskResult.task"]
            C58["CONST: originalComplexity, VALUE: getCurrentComplexityScore(taskId, context)"]
            C59["CONST: adjustResult, VALUE: await adjustTaskComplexity("]
            C60["CONST: subtaskResult, VALUE: await regenerateSubtasksForComplexity("]
            C61["CONST: taskIndex, VALUE: data.tasks.findIndex((t) => t.id === taskId)"]
            C62["CONST: newComplexity, VALUE: await reanalyzeTaskComplexity("]
            C63["CONST: complexityChange, VALUE: newComplexity - originalComplexity"]
            C64["CONST: arrow, VALUE: complexityChange > 0 ? '↗️' : complexityChange < 0 ? '↘️' : '➡️'"]
        end
        subgraph file63Flow["scope-adjustment.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file64["scripts/modules/task-manager/set-task-status.js"]
        subgraph file64Imports["set-task-status.js-Imports"]
            I1["IMPORT: path, FROM: path"]
            I2["IMPORT: chalk, FROM: chalk"]
            I3["IMPORT: boxen, FROM: boxen"]
            I4["IMPORT: ../ui.js, FROM: /claude-task-master/scripts/modules/ui.js"]
            I5["IMPORT: ../dependency-manager.js, FROM: /claude-task-master/scripts/modules/dependency-manager.js"]
            I6["IMPORT: ../config-manager.js, FROM: /claude-task-master/scripts/modules/config-manager.js"]
            I7["IMPORT: ./update-single-task-status.js, FROM: /claude-task-master/scripts/modules/task-manager/update-single-task-status.js"]
            I8["IMPORT: ./generate-task-files.js, FROM: /claude-task-master/scripts/modules/task-manager/generate-task-files.js"]
        end
        subgraph file64Functions["set-task-status.js-Functions Defined"]
            FU1["FUNCTION: setTaskStatus"]
        end
        subgraph file64Exports["set-task-status.js-Exports"]
            E1["EXP: setTaskStatus"]
        end
        subgraph file64Constants["set-task-status.js-Const Declarations"]
            C1["CONST: isMcpMode, VALUE: !!options?.mcpLog"]
            C2["CONST: data, VALUE: {"]
            C3["CONST: taskIds, VALUE: taskIdInput.split(',').map((id) => id.trim())"]
            C4["CONST: updatedTasks, VALUE: []"]
            C5["CONST: parentTask, VALUE: data.tasks.find((t) => t.id === parentId)"]
            C6["CONST: subtask, VALUE: parentTask.subtasks.find((st) => st.id === subtaskId)"]
            C7["CONST: taskId, VALUE: parseInt(id, 10)"]
            C8["CONST: task, VALUE: data.tasks.find((t) => t.id === taskId)"]
        end
        subgraph file64Flow["set-task-status.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file65["scripts/modules/task-manager/tag-management.js"]
        subgraph file65Imports["tag-management.js-Imports"]
            I1["IMPORT: path, FROM: path"]
            I2["IMPORT: fs, FROM: fs"]
            I3["IMPORT: inquirer, FROM: inquirer"]
            I4["IMPORT: chalk, FROM: chalk"]
            I5["IMPORT: boxen, FROM: boxen"]
            I6["IMPORT: cli-table3, FROM: cli-table3"]
            I7["IMPORT: ../ui.js, FROM: /claude-task-master/scripts/modules/ui.js"]
            I8["IMPORT: ./find-next-task.js, FROM: /claude-task-master/scripts/modules/task-manager/find-next-task.js"]
        end
        subgraph file65Functions["tag-management.js-Functions Defined"]
            FU1["FUNCTION: createTag"]
            FU2["FUNCTION: deleteTag"]
            FU3["FUNCTION: enhanceTagsWithMetadata"]
            FU4["FUNCTION: tags"]
            FU5["FUNCTION: useTag"]
            FU6["FUNCTION: renameTag"]
            FU7["FUNCTION: copyTag"]
            FU8["FUNCTION: switchCurrentTag"]
            FU9["FUNCTION: updateBranchTagMapping"]
            FU10["FUNCTION: getTagForBranch"]
            FU11["FUNCTION: createTagFromBranch"]
            FU12["FUNCTION: autoSwitchTagForBranch"]
            FU13["FUNCTION: checkAndAutoSwitchTag"]
        end
        subgraph file65Exports["tag-management.js-Exports"]
            E1["EXP: createTag"]
            E2["EXP: deleteTag"]
            E3["EXP: tags"]
            E4["EXP: useTag"]
            E5["EXP: renameTag"]
            E6["EXP: copyTag"]
            E7["EXP: switchCurrentTag"]
            E8["EXP: updateBranchTagMapping"]
            E9["EXP: getTagForBranch"]
            E10["EXP: createTagFromBranch"]
            E11["EXP: autoSwitchTagForBranch"]
            E12["EXP: checkAndAutoSwitchTag"]
        end
        subgraph file65Constants["tag-management.js-Const Declarations"]
            C1["CONST: logFn, VALUE: mcpLog || {"]
            C2["CONST: reservedNames, VALUE: ['master', 'main', 'default']"]
            C3["CONST: data, VALUE: readJSON(tasksPath, projectRoot)"]
            C4["CONST: sourceTag, VALUE: copyFromTag || getCurrentTag(projectRoot)"]
            C5["CONST: cleanData, VALUE: {}"]
            C6["CONST: logFn, VALUE: mcpLog || {"]
            C7["CONST: data, VALUE: readJSON(tasksPath, projectRoot)"]
            C8["CONST: currentTag, VALUE: getCurrentTag(projectRoot)"]
            C9["CONST: isCurrentTag, VALUE: currentTag === tagName"]
            C10["CONST: tasks, VALUE: getTasksForTag(rawData, tagName)"]
            C11["CONST: taskCount, VALUE: tasks.length"]
            C12["CONST: firstConfirm, VALUE: await inquirer.prompt(["]
            C13["CONST: secondConfirm, VALUE: await inquirer.prompt(["]
            C14["CONST: cleanData, VALUE: {}"]
            C15["CONST: stats, VALUE: fs.statSync(tasksPath)"]
            C16["CONST: cleanData, VALUE: {}"]
            C17["CONST: logFn, VALUE: context.mcpLog || {"]
            C18["CONST: logFn, VALUE: mcpLog || {"]
            C19["CONST: data, VALUE: readJSON(tasksPath, projectRoot)"]
            C20["CONST: currentTag, VALUE: getCurrentTag(projectRoot)"]
            C21["CONST: rawData, VALUE: data._rawTaggedData || data"]
            C22["CONST: tagList, VALUE: []"]
            C23["CONST: tasks, VALUE: tagData.tasks || []"]
            C24["CONST: metadata, VALUE: tagData.metadata || {}"]
            C25["CONST: headers, VALUE: [chalk.cyan.bold('Tag Name')]"]
            C26["CONST: table, VALUE: new Table({"]
            C27["CONST: row, VALUE: []"]
            C28["CONST: tagDisplay, VALUE: tag.isCurrent"]
            C29["CONST: createdDate, VALUE: tag.created !== 'Unknown'"]
            C30["CONST: logFn, VALUE: mcpLog || {"]
            C31["CONST: data, VALUE: readJSON(tasksPath, projectRoot)"]
            C32["CONST: rawData, VALUE: data._rawTaggedData || data"]
            C33["CONST: previousTag, VALUE: getCurrentTag(projectRoot)"]
            C34["CONST: tagData, VALUE: readJSON(tasksPath, projectRoot, tagName)"]
            C35["CONST: tasks, VALUE: tagData ? tagData.tasks || [] : []"]
            C36["CONST: taskCount, VALUE: tasks.length"]
            C37["CONST: nextTask, VALUE: findNextTask(tasks)"]
            C38["CONST: logFn, VALUE: mcpLog || {"]
            C39["CONST: reservedNames, VALUE: ['master', 'main', 'default']"]
            C40["CONST: data, VALUE: readJSON(tasksPath, projectRoot)"]
            C41["CONST: rawData, VALUE: data._rawTaggedData || data"]
            C42["CONST: currentTag, VALUE: getCurrentTag(projectRoot)"]
            C43["CONST: isCurrentTag, VALUE: currentTag === oldName"]
            C44["CONST: cleanData, VALUE: {}"]
            C45["CONST: tasks, VALUE: getTasksForTag(rawData, newName)"]
            C46["CONST: taskCount, VALUE: tasks.length"]
            C47["CONST: logFn, VALUE: mcpLog || {"]
            C48["CONST: reservedNames, VALUE: ['master', 'main', 'default']"]
            C49["CONST: data, VALUE: readJSON(tasksPath, projectRoot)"]
            C50["CONST: rawData, VALUE: data._rawTaggedData || data"]
            C51["CONST: sourceTasks, VALUE: getTasksForTag(rawData, sourceName)"]
            C52["CONST: cleanData, VALUE: {}"]
            C53["CONST: statePath, VALUE: path.join(projectRoot, '.taskmaster', 'state.json')"]
            C54["CONST: rawState, VALUE: fs.readFileSync(statePath, 'utf8')"]
            C55["CONST: statePath, VALUE: path.join(projectRoot, '.taskmaster', 'state.json')"]
            C56["CONST: rawState, VALUE: fs.readFileSync(statePath, 'utf8')"]
            C57["CONST: statePath, VALUE: path.join(projectRoot, '.taskmaster', 'state.json')"]
            C58["CONST: rawState, VALUE: fs.readFileSync(statePath, 'utf8')"]
            C59["CONST: state, VALUE: JSON.parse(rawState)"]
            C60["CONST: logFn, VALUE: mcpLog || {"]
            C61["CONST: tagName, VALUE: sanitizeBranchNameForTag(branchName)"]
            C62["CONST: createResult, VALUE: await createTag("]
            C63["CONST: logFn, VALUE: mcpLog || {"]
            C64["CONST: currentBranch, VALUE: await getCurrentBranch(projectRoot)"]
            C65["CONST: data, VALUE: readJSON(tasksPath, projectRoot)"]
            C66["CONST: rawData, VALUE: data._rawTaggedData || data"]
            C67["CONST: tagExists, VALUE: rawData[tagName]"]
            C68["CONST: createResult, VALUE: await createTagFromBranch("]
            C69["CONST: switchResult, VALUE: await useTag("]
            C70["CONST: configPath, VALUE: path.join(projectRoot, '.taskmaster', 'config.json')"]
            C71["CONST: rawConfig, VALUE: fs.readFileSync(configPath, 'utf8')"]
            C72["CONST: config, VALUE: JSON.parse(rawConfig)"]
        end
        subgraph file65Flow["tag-management.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file66["scripts/modules/task-manager/task-exists.js"]
        subgraph file66Imports["task-exists.js-Imports"]
            I0["(none)"]
        end
        subgraph file66Functions["task-exists.js-Functions Defined"]
            FU1["FUNCTION: taskExists"]
        end
        subgraph file66Exports["task-exists.js-Exports"]
            E1["EXP: taskExists"]
        end
        subgraph file66Constants["task-exists.js-Const Declarations"]
            C1["CONST: parentId, VALUE: parseInt(parentIdStr, 10)"]
            C2["CONST: subtaskId, VALUE: parseInt(subtaskIdStr, 10)"]
            C3["CONST: parentTask, VALUE: tasks.find((t) => t.id === parentId)"]
            C4["CONST: id, VALUE: parseInt(taskId, 10)"]
        end
        subgraph file66Flow["task-exists.js-Execution Flow"]
            FL1["Define functions and core logic for this module"]
            FL2["Expose public API via exports"]
        end
    end
    subgraph file67["scripts/modules/task-manager/update-single-task-status.js"]
        subgraph file67Imports["update-single-task-status.js-Imports"]
            I1["IMPORT: chalk, FROM: chalk"]
            I2["IMPORT: ../utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
            I3["IMPORT: ../../../src/constants/task-status.js, FROM: /claude-task-master/src/constants/task-status.js"]
        end
        subgraph file67Functions["update-single-task-status.js-Functions Defined"]
            FU1["FUNCTION: updateSingleTaskStatus"]
        end
        subgraph file67Exports["update-single-task-status.js-Exports"]
            E1["EXP: updateSingleTaskStatus"]
        end
        subgraph file67Constants["update-single-task-status.js-Const Declarations"]
            C1["CONST: parentTask, VALUE: data.tasks.find((t) => t.id === parentId)"]
            C2["CONST: subtask, VALUE: parentTask.subtasks.find((st) => st.id === subtaskId)"]
            C3["CONST: oldStatus, VALUE: subtask.status || 'pending'"]
            C4["CONST: allSubtasksDone, VALUE: parentTask.subtasks.every("]
            C5["CONST: taskId, VALUE: parseInt(taskIdInput, 10)"]
            C6["CONST: task, VALUE: data.tasks.find((t) => t.id === taskId)"]
            C7["CONST: oldStatus, VALUE: task.status || 'pending'"]
            C8["CONST: pendingSubtasks, VALUE: task.subtasks.filter("]
        end
        subgraph file67Flow["update-single-task-status.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file68["scripts/modules/task-manager/update-subtask-by-id.js"]
        subgraph file68Imports["update-subtask-by-id.js-Imports"]
            I1["IMPORT: fs, FROM: fs"]
            I2["IMPORT: path, FROM: path"]
            I3["IMPORT: chalk, FROM: chalk"]
            I4["IMPORT: boxen, FROM: boxen"]
            I5["IMPORT: cli-table3, FROM: cli-table3"]
            I6["IMPORT: ../ai-services-unified.js, FROM: /claude-task-master/scripts/modules/ai-services-unified.js"]
            I7["IMPORT: ../config-manager.js, FROM: /claude-task-master/scripts/modules/config-manager.js"]
            I8["IMPORT: ../prompt-manager.js, FROM: /claude-task-master/scripts/modules/prompt-manager.js"]
            I9["IMPORT: ./generate-task-files.js, FROM: /claude-task-master/scripts/modules/task-manager/generate-task-files.js"]
            I10["IMPORT: ../utils/contextGatherer.js, FROM: /claude-task-master/scripts/modules/utils/contextGatherer.js"]
            I11["IMPORT: ../utils/fuzzyTaskSearch.js, FROM: /claude-task-master/scripts/modules/utils/fuzzyTaskSearch.js"]
        end
        subgraph file68Functions["update-subtask-by-id.js-Functions Defined"]
            FU1["FUNCTION: updateSubtaskById"]
            FU2["FUNCTION: report"]
        end
        subgraph file68Exports["update-subtask-by-id.js-Exports"]
            E1["EXP: updateSubtaskById"]
        end
        subgraph file68Constants["update-subtask-by-id.js-Const Declarations"]
            C1["CONST: logFn, VALUE: mcpLog || consoleLog"]
            C2["CONST: isMCP, VALUE: !!mcpLog"]
            C3["CONST: report, VALUE: (level, ...args) => {"]
            C4["CONST: projectRoot, VALUE: providedProjectRoot || findProjectRoot()"]
            C5["CONST: data, VALUE: readJSON(tasksPath, projectRoot, tag)"]
            C6["CONST: parentId, VALUE: parseInt(parentIdStr, 10)"]
            C7["CONST: subtaskIdNum, VALUE: parseInt(subtaskIdStr, 10)"]
            C8["CONST: parentTask, VALUE: data.tasks.find((task) => task.id === parentId)"]
            C9["CONST: subtaskIndex, VALUE: parentTask.subtasks.findIndex("]
            C10["CONST: subtask, VALUE: parentTask.subtasks[subtaskIndex]"]
            C11["CONST: contextGatherer, VALUE: new ContextGatherer(projectRoot, tag)"]
            C12["CONST: allTasksFlat, VALUE: flattenTasksWithSubtasks(data.tasks)"]
            C13["CONST: fuzzySearch, VALUE: new FuzzyTaskSearch(allTasksFlat, 'update-subtask')"]
            C14["CONST: searchQuery, VALUE: `${parentTask.title} ${subtask.title} ${prompt}`"]
            C15["CONST: searchResults, VALUE: fuzzySearch.findRelevantTasks(searchQuery, {"]
            C16["CONST: relevantTaskIds, VALUE: fuzzySearch.getTaskIds(searchResults)"]
            C17["CONST: finalTaskIds, VALUE: ["]
            C18["CONST: contextResult, VALUE: await contextGatherer.gather({"]
            C19["CONST: table, VALUE: new Table({"]
            C20["CONST: parentContext, VALUE: {"]
            C21["CONST: prevSubtask, VALUE: subtaskIndex > 0"]
            C22["CONST: nextSubtask, VALUE: subtaskIndex < parentTask.subtasks.length - 1"]
            C23["CONST: promptManager, VALUE: getPromptManager()"]
            C24["CONST: promptParams, VALUE: {"]
            C25["CONST: variantKey, VALUE: useResearch ? 'research' : 'default'"]
            C26["CONST: role, VALUE: useResearch ? 'research' : 'main'"]
            C27["CONST: timestamp, VALUE: new Date().toISOString()"]
            C28["CONST: formattedBlock, VALUE: `<info added on ${timestamp}>\\n${generatedContentString.trim()}\\n</info added on ${timestamp}>`"]
            C29["CONST: updatedSubtask, VALUE: parentTask.subtasks[subtaskIndex]"]
        end
        subgraph file68Flow["update-subtask-by-id.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file69["scripts/modules/task-manager/update-task-by-id.js"]
        subgraph file69Imports["update-task-by-id.js-Imports"]
            I1["IMPORT: fs, FROM: fs"]
            I2["IMPORT: path, FROM: path"]
            I3["IMPORT: chalk, FROM: chalk"]
            I4["IMPORT: boxen, FROM: boxen"]
            I5["IMPORT: cli-table3, FROM: cli-table3"]
            I6["IMPORT: zod, FROM: zod"]
            I7["IMPORT: ../ai-services-unified.js, FROM: /claude-task-master/scripts/modules/ai-services-unified.js"]
            I8["IMPORT: ../config-manager.js, FROM: /claude-task-master/scripts/modules/config-manager.js"]
            I9["IMPORT: ../prompt-manager.js, FROM: /claude-task-master/scripts/modules/prompt-manager.js"]
            I10["IMPORT: ../utils/contextGatherer.js, FROM: /claude-task-master/scripts/modules/utils/contextGatherer.js"]
            I11["IMPORT: ../utils/fuzzyTaskSearch.js, FROM: /claude-task-master/scripts/modules/utils/fuzzyTaskSearch.js"]
        end
        subgraph file69Functions["update-task-by-id.js-Functions Defined"]
            FU1["FUNCTION: parseUpdatedTaskFromText"]
            FU2["FUNCTION: updateTaskById"]
            FU3["FUNCTION: report"]
        end
        subgraph file69Exports["update-task-by-id.js-Exports"]
            E1["EXP: updateTaskById"]
        end
        subgraph file69Constants["update-task-by-id.js-Const Declarations"]
            C1["CONST: updatedTaskSchema, VALUE: z"]
            C2["CONST: report, VALUE: (level, ...args) => {"]
            C3["CONST: originalResponseForDebug, VALUE: cleanedResponse"]
            C4["CONST: firstBraceIndex, VALUE: cleanedResponse.indexOf('{')"]
            C5["CONST: lastBraceIndex, VALUE: cleanedResponse.lastIndexOf('}')"]
            C6["CONST: testParse, VALUE: JSON.parse(potentialJsonFromBraces)"]
            C7["CONST: codeBlockMatch, VALUE: cleanedResponse.match("]
            C8["CONST: commonPrefixes, VALUE: ["]
            C9["CONST: preprocessedTask, VALUE: {"]
            C10["CONST: validationResult, VALUE: updatedTaskSchema.safeParse(preprocessedTask)"]
            C11["CONST: logFn, VALUE: mcpLog || consoleLog"]
            C12["CONST: isMCP, VALUE: !!mcpLog"]
            C13["CONST: report, VALUE: (level, ...args) => {"]
            C14["CONST: projectRoot, VALUE: providedProjectRoot || findProjectRoot()"]
            C15["CONST: data, VALUE: readJSON(tasksPath, projectRoot, tag)"]
            C16["CONST: taskIndex, VALUE: data.tasks.findIndex((task) => task.id === taskId)"]
            C17["CONST: taskToUpdate, VALUE: data.tasks[taskIndex]"]
            C18["CONST: contextGatherer, VALUE: new ContextGatherer(projectRoot, tag)"]
            C19["CONST: allTasksFlat, VALUE: flattenTasksWithSubtasks(data.tasks)"]
            C20["CONST: fuzzySearch, VALUE: new FuzzyTaskSearch(allTasksFlat, 'update-task')"]
            C21["CONST: searchQuery, VALUE: `${taskToUpdate.title} ${taskToUpdate.description} ${prompt}`"]
            C22["CONST: searchResults, VALUE: fuzzySearch.findRelevantTasks(searchQuery, {"]
            C23["CONST: relevantTaskIds, VALUE: fuzzySearch.getTaskIds(searchResults)"]
            C24["CONST: finalTaskIds, VALUE: ["]
            C25["CONST: contextResult, VALUE: await contextGatherer.gather({"]
            C26["CONST: table, VALUE: new Table({"]
            C27["CONST: promptManager, VALUE: getPromptManager()"]
            C28["CONST: promptParams, VALUE: {"]
            C29["CONST: variantKey, VALUE: appendMode"]
            C30["CONST: promptResult, VALUE: await promptManager.loadPrompt("]
            C31["CONST: serviceRole, VALUE: useResearch ? 'research' : 'main'"]
            C32["CONST: generatedContentString, VALUE: aiServiceResponse.mainResult"]
            C33["CONST: timestamp, VALUE: new Date().toISOString()"]
            C34["CONST: formattedBlock, VALUE: `<info added on ${timestamp}>\\n${generatedContentString.trim()}\\n</info added on ${timestamp}>`"]
            C35["CONST: updatedTask, VALUE: parseUpdatedTaskFromText("]
            C36["CONST: correctedSubtask, VALUE: {"]
            C37["CONST: completedOriginal, VALUE: taskToUpdate.subtasks.filter("]
            C38["CONST: updatedSub, VALUE: updatedTask.subtasks.find("]
            C39["CONST: subtaskIds, VALUE: new Set()"]
        end
        subgraph file69Flow["update-task-by-id.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file70["scripts/modules/task-manager/update-tasks.js"]
        subgraph file70Imports["update-tasks.js-Imports"]
            I1["IMPORT: path, FROM: path"]
            I2["IMPORT: chalk, FROM: chalk"]
            I3["IMPORT: boxen, FROM: boxen"]
            I4["IMPORT: cli-table3, FROM: cli-table3"]
            I5["IMPORT: zod, FROM: zod"]
            I6["IMPORT: ../config-manager.js, FROM: /claude-task-master/scripts/modules/config-manager.js"]
            I7["IMPORT: ../prompt-manager.js, FROM: /claude-task-master/scripts/modules/prompt-manager.js"]
            I8["IMPORT: ./generate-task-files.js, FROM: /claude-task-master/scripts/modules/task-manager/generate-task-files.js"]
            I9["IMPORT: ../ai-services-unified.js, FROM: /claude-task-master/scripts/modules/ai-services-unified.js"]
            I10["IMPORT: ./models.js, FROM: /claude-task-master/scripts/modules/task-manager/models.js"]
            I11["IMPORT: ../utils/contextGatherer.js, FROM: /claude-task-master/scripts/modules/utils/contextGatherer.js"]
            I12["IMPORT: ../utils/fuzzyTaskSearch.js, FROM: /claude-task-master/scripts/modules/utils/fuzzyTaskSearch.js"]
            I13["IMPORT: ../utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        end
        subgraph file70Functions["update-tasks.js-Functions Defined"]
            FU1["FUNCTION: parseUpdatedTasksFromText"]
            FU2["FUNCTION: updateTasks"]
            FU3["FUNCTION: report"]
        end
        subgraph file70Exports["update-tasks.js-Exports"]
            E1["EXP: updateTasks"]
        end
        subgraph file70Constants["update-tasks.js-Const Declarations"]
            C1["CONST: updatedTaskSchema, VALUE: z"]
            C2["CONST: preprocessTaskSchema, VALUE: z.preprocess((task) => {"]
            C3["CONST: updatedTaskArraySchema, VALUE: z.array(updatedTaskSchema)"]
            C4["CONST: preprocessedTaskArraySchema, VALUE: z.array(preprocessTaskSchema)"]
            C5["CONST: report, VALUE: (level, ...args) => {"]
            C6["CONST: originalResponseForDebug, VALUE: cleanedResponse"]
            C7["CONST: firstBracketIndex, VALUE: cleanedResponse.indexOf('[')"]
            C8["CONST: lastBracketIndex, VALUE: cleanedResponse.lastIndexOf(']')"]
            C9["CONST: testParse, VALUE: JSON.parse(potentialJsonFromArray)"]
            C10["CONST: codeBlockMatch, VALUE: cleanedResponse.match("]
            C11["CONST: commonPrefixes, VALUE: ["]
            C12["CONST: missingFields, VALUE: []"]
            C13["CONST: preprocessResult, VALUE: preprocessedTaskArraySchema.safeParse(parsedTasks)"]
            C14["CONST: logFn, VALUE: mcpLog || consoleLog"]
            C15["CONST: isMCP, VALUE: !!mcpLog"]
            C16["CONST: projectRoot, VALUE: providedProjectRoot || findProjectRoot()"]
            C17["CONST: data, VALUE: readJSON(tasksPath, projectRoot, tag)"]
            C18["CONST: tasksToUpdate, VALUE: data.tasks.filter("]
            C19["CONST: contextGatherer, VALUE: new ContextGatherer(projectRoot, tag)"]
            C20["CONST: allTasksFlat, VALUE: flattenTasksWithSubtasks(data.tasks)"]
            C21["CONST: fuzzySearch, VALUE: new FuzzyTaskSearch(allTasksFlat, 'update')"]
            C22["CONST: searchResults, VALUE: fuzzySearch.findRelevantTasks(prompt, {"]
            C23["CONST: relevantTaskIds, VALUE: fuzzySearch.getTaskIds(searchResults)"]
            C24["CONST: tasksToUpdateIds, VALUE: tasksToUpdate.map((t) => t.id.toString())"]
            C25["CONST: finalTaskIds, VALUE: ["]
            C26["CONST: contextResult, VALUE: await contextGatherer.gather({"]
            C27["CONST: table, VALUE: new Table({"]
            C28["CONST: promptManager, VALUE: getPromptManager()"]
            C29["CONST: serviceRole, VALUE: useResearch ? 'research' : 'main'"]
            C30["CONST: parsedUpdatedTasks, VALUE: parseUpdatedTasksFromText("]
            C31["CONST: updatedTasksMap, VALUE: new Map("]
            C32["CONST: updatedTask, VALUE: updatedTasksMap.get(task.id)"]
        end
        subgraph file70Flow["update-tasks.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file71["scripts/modules/task-manager.js"]
        subgraph file71Imports["task-manager.js-Imports"]
            I1["IMPORT: ./utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
            I2["IMPORT: ./task-manager/parse-prd.js, FROM: /claude-task-master/scripts/modules/task-manager/parse-prd.js"]
            I3["IMPORT: ./task-manager/update-tasks.js, FROM: /claude-task-master/scripts/modules/task-manager/update-tasks.js"]
            I4["IMPORT: ./task-manager/update-task-by-id.js, FROM: /claude-task-master/scripts/modules/task-manager/update-task-by-id.js"]
            I5["IMPORT: ./task-manager/generate-task-files.js, FROM: /claude-task-master/scripts/modules/task-manager/generate-task-files.js"]
            I6["IMPORT: ./task-manager/set-task-status.js, FROM: /claude-task-master/scripts/modules/task-manager/set-task-status.js"]
            I7["IMPORT: ./task-manager/update-single-task-status.js, FROM: /claude-task-master/scripts/modules/task-manager/update-single-task-status.js"]
            I8["IMPORT: ./task-manager/list-tasks.js, FROM: /claude-task-master/scripts/modules/task-manager/list-tasks.js"]
            I9["IMPORT: ./task-manager/expand-task.js, FROM: /claude-task-master/scripts/modules/task-manager/expand-task.js"]
            I10["IMPORT: ./task-manager/expand-all-tasks.js, FROM: /claude-task-master/scripts/modules/task-manager/expand-all-tasks.js"]
            I11["IMPORT: ./task-manager/clear-subtasks.js, FROM: /claude-task-master/scripts/modules/task-manager/clear-subtasks.js"]
            I12["IMPORT: ./task-manager/add-task.js, FROM: /claude-task-master/scripts/modules/task-manager/add-task.js"]
            I13["IMPORT: ./task-manager/analyze-task-complexity.js, FROM: /claude-task-master/scripts/modules/task-manager/analyze-task-complexity.js"]
            I14["IMPORT: ./task-manager/find-next-task.js, FROM: /claude-task-master/scripts/modules/task-manager/find-next-task.js"]
            I15["IMPORT: ./task-manager/add-subtask.js, FROM: /claude-task-master/scripts/modules/task-manager/add-subtask.js"]
            I16["IMPORT: ./task-manager/remove-subtask.js, FROM: /claude-task-master/scripts/modules/task-manager/remove-subtask.js"]
            I17["IMPORT: ./task-manager/update-subtask-by-id.js, FROM: /claude-task-master/scripts/modules/task-manager/update-subtask-by-id.js"]
            I18["IMPORT: ./task-manager/remove-task.js, FROM: /claude-task-master/scripts/modules/task-manager/remove-task.js"]
            I19["IMPORT: ./task-manager/task-exists.js, FROM: /claude-task-master/scripts/modules/task-manager/task-exists.js"]
            I20["IMPORT: ./task-manager/is-task-dependent.js, FROM: /claude-task-master/scripts/modules/task-manager/is-task-dependent.js"]
            I21["IMPORT: ./task-manager/response-language.js, FROM: /claude-task-master/scripts/modules/task-manager/response-language.js"]
            I22["IMPORT: ./task-manager/move-task.js, FROM: /claude-task-master/scripts/modules/task-manager/move-task.js"]
            I23["IMPORT: ./task-manager/migrate.js, FROM: /claude-task-master/scripts/modules/task-manager/migrate.js"]
            I24["IMPORT: ./task-manager/research.js, FROM: /claude-task-master/scripts/modules/task-manager/research.js"]
            I25["IMPORT: ./utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        end
        subgraph file71Functions["task-manager.js-Functions Defined"]
            FU0["(none)"]
        end
        subgraph file71Exports["task-manager.js-Exports"]
            E1["EXP: parsePRD"]
            E2["EXP: updateTasks"]
            E3["EXP: updateTaskById"]
            E4["EXP: updateSubtaskById"]
            E5["EXP: generateTaskFiles"]
            E6["EXP: setTaskStatus"]
            E7["EXP: updateSingleTaskStatus"]
            E8["EXP: listTasks"]
            E9["EXP: expandTask"]
            E10["EXP: expandAllTasks"]
            E11["EXP: clearSubtasks"]
            E12["EXP: addTask"]
            E13["EXP: addSubtask"]
            E14["EXP: removeSubtask"]
            E15["EXP: findNextTask"]
            E16["EXP: analyzeTaskComplexity"]
            E17["EXP: removeTask"]
            E18["EXP: findTaskById"]
            E19["EXP: taskExists"]
            E20["EXP: isTaskDependentOn"]
            E21["EXP: setResponseLanguage"]
            E22["EXP: moveTask"]
            E23["EXP: readComplexityReport"]
            E24["EXP: migrateProject"]
            E25["EXP: performResearch"]
            E26["EXP: scopeUpTask"]
            E27["EXP: scopeDownTask"]
            E28["EXP: validateStrength"]
        end
        subgraph file71Constants["task-manager.js-Const Declarations"]
            C0["(none)"]
        end
        subgraph file71Flow["task-manager.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Expose public API via exports"]
        end
    end
    subgraph file72["scripts/modules/ui.js"]
        subgraph file72Imports["ui.js-Imports"]
            I1["IMPORT: chalk, FROM: chalk"]
            I2["IMPORT: figlet, FROM: figlet"]
            I3["IMPORT: boxen, FROM: boxen"]
            I4["IMPORT: ora, FROM: ora"]
            I5["IMPORT: cli-table3, FROM: cli-table3"]
            I6["IMPORT: gradient-string, FROM: gradient-string"]
            I7["IMPORT: readline, FROM: readline"]
            I8["IMPORT: fs, FROM: fs"]
            I9["IMPORT: ./config-manager.js, FROM: /claude-task-master/scripts/modules/config-manager.js"]
            I10["IMPORT: ../../src/constants/task-status.js, FROM: /claude-task-master/src/constants/task-status.js"]
            I11["IMPORT: ../../src/utils/getVersion.js, FROM: /claude-task-master/src/utils/getVersion.js"]
        end
        subgraph file72Functions["ui.js-Functions Defined"]
            FU1["FUNCTION: displayTaggedTasksFYI"]
            FU2["FUNCTION: displayCurrentTagIndicator"]
            FU3["FUNCTION: displayBanner"]
            FU4["FUNCTION: startLoadingIndicator"]
            FU5["FUNCTION: stopLoadingIndicator"]
            FU6["FUNCTION: succeedLoadingIndicator"]
            FU7["FUNCTION: failLoadingIndicator"]
            FU8["FUNCTION: warnLoadingIndicator"]
            FU9["FUNCTION: infoLoadingIndicator"]
            FU10["FUNCTION: createProgressBar"]
            FU11["FUNCTION: getStatusWithColor"]
            FU12["FUNCTION: formatDependenciesWithStatus"]
            FU13["FUNCTION: displayHelp"]
            FU14["FUNCTION: getComplexityWithColor"]
            FU15["FUNCTION: truncateString"]
            FU16["FUNCTION: displayNextTask"]
            FU17["FUNCTION: displayTaskById"]
            FU18["FUNCTION: displayComplexityReport"]
            FU19["FUNCTION: generateComplexityAnalysisPrompt"]
            FU20["FUNCTION: confirmTaskOverwrite"]
            FU21["FUNCTION: displayApiKeyStatus"]
            FU22["FUNCTION: displayModelConfiguration"]
            FU23["FUNCTION: displayAvailableModels"]
            FU24["FUNCTION: displayAiUsageSummary"]
            FU25["FUNCTION: displayMultipleTasksSummary"]
            FU26["FUNCTION: displayContextAnalysis"]
            FU27["FUNCTION: formatSweScoreWithTertileStars"]
            FU28["FUNCTION: formatCost"]
            FU29["FUNCTION: formatSingleCost"]
        end
        subgraph file72Exports["ui.js-Exports"]
            E1["EXP: displayBanner"]
            E2["EXP: displayTaggedTasksFYI"]
            E3["EXP: startLoadingIndicator"]
            E4["EXP: stopLoadingIndicator"]
            E5["EXP: createProgressBar"]
            E6["EXP: getStatusWithColor"]
            E7["EXP: formatDependenciesWithStatus"]
            E8["EXP: displayHelp"]
            E9["EXP: getComplexityWithColor"]
            E10["EXP: displayNextTask"]
            E11["EXP: displayTaskById"]
            E12["EXP: displayComplexityReport"]
            E13["EXP: generateComplexityAnalysisPrompt"]
            E14["EXP: confirmTaskOverwrite"]
            E15["EXP: displayApiKeyStatus"]
            E16["EXP: displayModelConfiguration"]
            E17["EXP: displayAvailableModels"]
            E18["EXP: displayAiUsageSummary"]
            E19["EXP: displayMultipleTasksSummary"]
            E20["EXP: succeedLoadingIndicator"]
            E21["EXP: failLoadingIndicator"]
            E22["EXP: warnLoadingIndicator"]
            E23["EXP: infoLoadingIndicator"]
            E24["EXP: displayContextAnalysis"]
            E25["EXP: displayCurrentTagIndicator"]
        end
        subgraph file72Constants["ui.js-Const Declarations"]
            C1["CONST: coolGradient, VALUE: gradient(['#00b4d8', '#0077b6', '#03045e'])"]
            C2["CONST: warmGradient, VALUE: gradient(['#fb8b24', '#e36414', '#9a031e'])"]
            C3["CONST: tagIcon, VALUE: '🏷️'"]
            C4["CONST: tagText, VALUE: dim"]
            C5["CONST: bannerText, VALUE: figlet.textSync('Task Master', {"]
            C6["CONST: version, VALUE: getTaskMasterVersion()"]
            C7["CONST: spinner, VALUE: ora({"]
            C8["CONST: effectivePercent, VALUE: statusBreakdown"]
            C9["CONST: trueCompletedFilled, VALUE: Math.round((percent * length) / 100)"]
            C10["CONST: effectiveCompletedFilled, VALUE: Math.round("]
            C11["CONST: deferredCancelledFilled, VALUE: effectiveCompletedFilled - trueCompletedFilled"]
            C12["CONST: empty, VALUE: length - effectiveCompletedFilled"]
            C13["CONST: completedSection, VALUE: completedColor('█'.repeat(trueCompletedFilled))"]
            C14["CONST: deferredCancelledSection, VALUE: chalk.gray("]
            C15["CONST: statusColors, VALUE: {"]
            C16["CONST: totalRemaining, VALUE: Object.entries(statusBreakdown)"]
            C17["CONST: statusChars, VALUE: Math.round((percentage / totalRemaining) * empty)"]
            C18["CONST: actualChars, VALUE: Math.min(statusChars, empty - addedChars)"]
            C19["CONST: colorFn, VALUE: statusColors[status] || chalk.gray"]
            C20["CONST: percentTextColor, VALUE: percent === 100"]
            C21["CONST: statusConfig, VALUE: {"]
            C22["CONST: config, VALUE: statusConfig[status.toLowerCase()] || {"]
            C23["CONST: simpleIcons, VALUE: {"]
            C24["CONST: simpleIcon, VALUE: simpleIcons[status.toLowerCase()] || 'x'"]
            C25["CONST: formattedDeps, VALUE: dependencies.map((depId) => {"]
            C26["CONST: depIdStr, VALUE: depId.toString()"]
            C27["CONST: parentTask, VALUE: allTasks.find((t) => t.id === parentId)"]
            C28["CONST: subtask, VALUE: parentTask.subtasks.find((st) => st.id === subtaskId)"]
            C29["CONST: status, VALUE: subtask.status || 'pending'"]
            C30["CONST: isDone, VALUE: status.toLowerCase() === 'done' || status.toLowerCase() === 'completed'"]
            C31["CONST: isInProgress, VALUE: status.toLowerCase() === 'in-progress'"]
            C32["CONST: numericDepId, VALUE: typeof depId === 'string' ? parseInt(depId, 10) : depId"]
            C33["CONST: depTaskResult, VALUE: findTaskById("]
            C34["CONST: depTask, VALUE: depTaskResult.task"]
            C35["CONST: status, VALUE: depTask.status || 'pending'"]
            C36["CONST: isDone, VALUE: status.toLowerCase() === 'done' || status.toLowerCase() === 'completed'"]
            C37["CONST: isInProgress, VALUE: status.toLowerCase() === 'in-progress'"]
            C38["CONST: terminalWidth, VALUE: process.stdout.columns || 100"]
            C39["CONST: commandCategories, VALUE: ["]
            C40["CONST: nameWidth, VALUE: Math.max(25, Math.floor(terminalWidth * 0.2))"]
            C41["CONST: argsWidth, VALUE: Math.max(40, Math.floor(terminalWidth * 0.35))"]
            C42["CONST: descWidth, VALUE: Math.max(45, Math.floor(terminalWidth * 0.45) - 10)"]
            C43["CONST: commandTable, VALUE: new Table({"]
            C44["CONST: configTerminalWidth, VALUE: terminalWidth || process.stdout.columns || 100"]
            C45["CONST: configKeyWidth, VALUE: Math.max(30, Math.floor(configTerminalWidth * 0.25))"]
            C46["CONST: configDescWidth, VALUE: Math.max(50, Math.floor(configTerminalWidth * 0.45))"]
            C47["CONST: configValueWidth, VALUE: Math.max("]
            C48["CONST: configTable, VALUE: new Table({"]
            C49["CONST: data, VALUE: readJSON(tasksPath, projectRoot, tag)"]
            C50["CONST: complexityReport, VALUE: readComplexityReport(complexityReportPath)"]
            C51["CONST: nextTask, VALUE: findNextTask(data.tasks, complexityReport)"]
            C52["CONST: taskTable, VALUE: new Table({"]
            C53["CONST: priorityColors, VALUE: {"]
            C54["CONST: priorityColor, VALUE: priorityColors[nextTask.priority || 'medium'] || chalk.white"]
            C55["CONST: isSubtask, VALUE: !!nextTask.parentId"]
            C56["CONST: availableWidth, VALUE: process.stdout.columns - 10 || 100"]
            C57["CONST: idWidthPct, VALUE: 8"]
            C58["CONST: statusWidthPct, VALUE: 15"]
            C59["CONST: depsWidthPct, VALUE: 25"]
            C60["CONST: titleWidthPct, VALUE: 100 - idWidthPct - statusWidthPct - depsWidthPct"]
            C61["CONST: idWidth, VALUE: Math.floor(availableWidth * (idWidthPct / 100))"]
            C62["CONST: statusWidth, VALUE: Math.floor(availableWidth * (statusWidthPct / 100))"]
            C63["CONST: depsWidth, VALUE: Math.floor(availableWidth * (depsWidthPct / 100))"]
            C64["CONST: titleWidth, VALUE: Math.floor(availableWidth * (titleWidthPct / 100))"]
            C65["CONST: subtaskTable, VALUE: new Table({"]
            C66["CONST: statusColor, VALUE: {"]
            C67["CONST: formattedDeps, VALUE: st.dependencies.map((depId) => {"]
            C68["CONST: foundSubtask, VALUE: nextTask.subtasks.find("]
            C69["CONST: isDone, VALUE: foundSubtask.status === 'done' ||"]
            C70["CONST: isInProgress, VALUE: foundSubtask.status === 'in-progress'"]
            C71["CONST: data, VALUE: readJSON(tasksPath, projectRoot, tag)"]
            C72["CONST: complexityReport, VALUE: readComplexityReport(complexityReportPath)"]
            C73["CONST: subtaskTable, VALUE: new Table({"]
            C74["CONST: taskTable, VALUE: new Table({"]
            C75["CONST: priorityColors, VALUE: {"]
            C76["CONST: priorityColor, VALUE: priorityColors[task.priority || 'medium'] || chalk.white"]
            C77["CONST: availableWidth, VALUE: process.stdout.columns - 10 || 100"]
            C78["CONST: idWidthPct, VALUE: 10"]
            C79["CONST: statusWidthPct, VALUE: 15"]
            C80["CONST: depsWidthPct, VALUE: 25"]
            C81["CONST: titleWidthPct, VALUE: 100 - idWidthPct - statusWidthPct - depsWidthPct"]
            C82["CONST: idWidth, VALUE: Math.floor(availableWidth * (idWidthPct / 100))"]
            C83["CONST: statusWidth, VALUE: Math.floor(availableWidth * (statusWidthPct / 100))"]
            C84["CONST: depsWidth, VALUE: Math.floor(availableWidth * (depsWidthPct / 100))"]
            C85["CONST: titleWidth, VALUE: Math.floor(availableWidth * (titleWidthPct / 100))"]
            C86["CONST: subtaskTable, VALUE: new Table({"]
            C87["CONST: statusColorMap, VALUE: {"]
            C88["CONST: statusColor, VALUE: statusColorMap[st.status || 'pending'] || chalk.white"]
            C89["CONST: formattedDeps, VALUE: st.dependencies.map((depId) => {"]
            C90["CONST: sourceListForDeps, VALUE: originalSubtasks || task.subtasks"]
            C91["CONST: foundDepSubtask, VALUE: typeof depId === 'number' && depId < 100"]
            C92["CONST: isDone, VALUE: foundDepSubtask.status === 'done' ||"]
            C93["CONST: isInProgress, VALUE: foundDepSubtask.status === 'in-progress'"]
            C94["CONST: color, VALUE: isDone"]
            C95["CONST: actualSubtasks, VALUE: originalSubtasks || task.subtasks"]
            C96["CONST: subtasksForProgress, VALUE: originalSubtasks || task.subtasks"]
            C97["CONST: totalSubtasks, VALUE: subtasksForProgress.length"]
            C98["CONST: completedSubtasks, VALUE: subtasksForProgress.filter("]
            C99["CONST: inProgressSubtasks, VALUE: subtasksForProgress.filter("]
            C100["CONST: pendingSubtasks, VALUE: subtasksForProgress.filter("]
            C101["CONST: blockedSubtasks, VALUE: subtasksForProgress.filter("]
            C102["CONST: deferredSubtasks, VALUE: subtasksForProgress.filter("]
            C103["CONST: cancelledSubtasks, VALUE: subtasksForProgress.filter("]
            C104["CONST: statusBreakdown, VALUE: {"]
            C105["CONST: completionPercentage, VALUE: (completedSubtasks / totalSubtasks) * 100"]
            C106["CONST: availableWidth, VALUE: process.stdout.columns || 80"]
            C107["CONST: boxPadding, VALUE: 2"]
            C108["CONST: boxBorders, VALUE: 2"]
            C109["CONST: percentTextLength, VALUE: 5"]
            C110["CONST: progressBarLength, VALUE: Math.max("]
            C111["CONST: statusCounts, VALUE: `${chalk.green('✓ Done:')} ${completedSubtasks}  ${chalk.hex('#FFA500')('► In Progress:')} ${inProgressSubtasks}  ${c..."]
            C112["CONST: actions, VALUE: []"]
            C113["CONST: complexityScore, VALUE: task.complexityScore"]
            C114["CONST: rl, VALUE: readline.createInterface({"]
            C115["CONST: answer, VALUE: await new Promise((resolve) => {"]
            C116["CONST: tasksPath, VALUE: TASKMASTER_TASKS_FILE"]
            C117["CONST: metaTable, VALUE: new Table({"]
            C118["CONST: sortedTasks, VALUE: [...report.complexityAnalysis].sort("]
            C119["CONST: tasksNeedingExpansion, VALUE: sortedTasks.filter("]
            C120["CONST: simpleTasks, VALUE: sortedTasks.filter("]
            C121["CONST: complexityDistribution, VALUE: [0, 0, 0]"]
            C122["CONST: percentLow, VALUE: Math.round("]
            C123["CONST: percentMedium, VALUE: Math.round("]
            C124["CONST: percentHigh, VALUE: Math.round("]
            C125["CONST: terminalWidth, VALUE: process.stdout.columns || 100"]
            C126["CONST: idWidth, VALUE: 12"]
            C127["CONST: titleWidth, VALUE: Math.floor(terminalWidth * 0.25)"]
            C128["CONST: scoreWidth, VALUE: 8"]
            C129["CONST: subtasksWidth, VALUE: 8"]
            C130["CONST: commandWidth, VALUE: terminalWidth - idWidth - titleWidth - scoreWidth - subtasksWidth - 10"]
            C131["CONST: complexTable, VALUE: new Table({"]
            C132["CONST: expansionCommand, VALUE: `task-master expand --id=${task.taskId} --num=${task.recommendedSubtasks}${task.expansionPrompt ? ` --prompt=\${task...."]
            C133["CONST: simpleTable, VALUE: new Table({"]
            C134["CONST: defaultSubtasks, VALUE: getDefaultSubtasks(null)"]
            C135["CONST: rl, VALUE: readline.createInterface({"]
            C136["CONST: answer, VALUE: await new Promise((resolve) => {"]
            C137["CONST: table, VALUE: new Table({"]
            C138["CONST: cliStatus, VALUE: cli ? chalk.green('✅ Found') : chalk.red('❌ Missing')"]
            C139["CONST: mcpStatus, VALUE: mcp ? chalk.green('✅ Found') : chalk.red('❌ Missing')"]
            C140["CONST: providerName, VALUE: provider.charAt(0).toUpperCase() + provider.slice(1)"]
            C141["CONST: formatSweScoreWithTertileStars, VALUE: (score, allModels) => {"]
            C142["CONST: formattedPercentage, VALUE: `${(score * 100).toFixed(1)}%`"]
            C143["CONST: validScores, VALUE: allModels"]
            C144["CONST: sortedScores, VALUE: [...validScores].sort((a, b) => b - a)"]
            C145["CONST: n, VALUE: sortedScores.length"]
            C146["CONST: topThirdIndex, VALUE: Math.max(0, Math.floor(n / 3) - 1)"]
            C147["CONST: midThirdIndex, VALUE: Math.max(0, Math.floor((2 * n) / 3) - 1)"]
            C148["CONST: formatCost, VALUE: (costObj) => {"]
            C149["CONST: formatSingleCost, VALUE: (costValue) => {"]
            C150["CONST: isInteger, VALUE: Number.isInteger(costValue)"]
            C151["CONST: active, VALUE: configData.activeModels"]
            C152["CONST: activeTable, VALUE: new Table({"]
            C153["CONST: availableTable, VALUE: new Table({"]
            C154["CONST: projectRoot, VALUE: context.projectRoot || null"]
            C155["CONST: tag, VALUE: context.tag || null"]
            C156["CONST: data, VALUE: readJSON(tasksPath, projectRoot, tag)"]
            C157["CONST: complexityReport, VALUE: readComplexityReport(complexityReportPath)"]
            C158["CONST: foundTasks, VALUE: []"]
            C159["CONST: notFoundIds, VALUE: []"]
            C160["CONST: terminalWidth, VALUE: process.stdout.columns || 100"]
            C161["CONST: availableWidth, VALUE: terminalWidth - 10"]
            C162["CONST: summaryTable, VALUE: new Table({"]
            C163["CONST: parentId, VALUE: task.parentTask ? task.parentTask.id : 'Unknown'"]
            C164["CONST: priorityColors, VALUE: {"]
            C165["CONST: priorityColor, VALUE: priorityColors[task.priority || 'medium'] || chalk.white"]
            C166["CONST: total, VALUE: task.subtasks.length"]
            C167["CONST: completed, VALUE: task.subtasks.filter("]
            C168["CONST: inProgress, VALUE: task.subtasks.filter("]
            C169["CONST: pending, VALUE: task.subtasks.filter("]
            C170["CONST: completionPercentage, VALUE: (completed / total) * 100"]
            C171["CONST: barLength, VALUE: 8"]
            C172["CONST: statusBreakdown, VALUE: {"]
            C173["CONST: rl, VALUE: readline.createInterface({"]
            C174["CONST: choice, VALUE: await new Promise((resolve) => {"]
            C175["CONST: rl2, VALUE: readline.createInterface({"]
            C176["CONST: actionChoice, VALUE: await new Promise((resolve) => {"]
            C177["CONST: taskIdList, VALUE: foundTasks.map((t) => t.id).join(',')"]
            C178["CONST: task, VALUE: foundTasks[0]"]
            C179["CONST: recentTasksNotInRelevance, VALUE: recentTasks.filter("]
        end
        subgraph file72Flow["ui.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file73["scripts/modules/update-config-tokens.js"]
        subgraph file73Imports["update-config-tokens.js-Imports"]
            I1["IMPORT: fs, FROM: fs"]
            I2["IMPORT: path, FROM: path"]
            I3["IMPORT: url, FROM: url"]
            I4["IMPORT: path, FROM: path"]
        end
        subgraph file73Functions["update-config-tokens.js-Functions Defined"]
            FU1["FUNCTION: updateConfigMaxTokens"]
        end
        subgraph file73Exports["update-config-tokens.js-Exports"]
            E1["EXP: updateConfigMaxTokens"]
        end
        subgraph file73Constants["update-config-tokens.js-Const Declarations"]
            C1["CONST: __filename, VALUE: fileURLToPath(import.meta.url)"]
            C2["CONST: __dirname, VALUE: dirname(__filename)"]
            C3["CONST: supportedModelsPath, VALUE: path.join(__dirname, 'supported-models.json')"]
            C4["CONST: supportedModels, VALUE: JSON.parse("]
            C5["CONST: config, VALUE: JSON.parse(fs.readFileSync(configPath, 'utf-8'))"]
            C6["CONST: roles, VALUE: ['main', 'research', 'fallback']"]
            C7["CONST: provider, VALUE: config.models[role].provider"]
            C8["CONST: modelId, VALUE: config.models[role].modelId"]
            C9["CONST: modelData, VALUE: supportedModels[provider].find("]
        end
        subgraph file73Flow["update-config-tokens.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    subgraph file74["scripts/modules/utils.js"]
        subgraph file74Imports["utils.js-Imports"]
            I1["IMPORT: fs, FROM: fs"]
            I2["IMPORT: path, FROM: path"]
            I3["IMPORT: chalk, FROM: chalk"]
            I4["IMPORT: dotenv, FROM: dotenv"]
            I5["IMPORT: ./config-manager.js, FROM: /claude-task-master/scripts/modules/config-manager.js"]
            I6["IMPORT: ./utils/git-utils.js, FROM: /claude-task-master/scripts/modules/utils/git-utils.js"]
        end
        subgraph file74Functions["utils.js-Functions Defined"]
            FU1["FUNCTION: resolveEnvVariable"]
            FU2["FUNCTION: slugifyTagForFilePath"]
            FU3["FUNCTION: getTagAwareFilePath"]
            FU4["FUNCTION: findProjectRoot"]
            FU5["FUNCTION: getTaskManager"]
            FU6["FUNCTION: enableSilentMode"]
            FU7["FUNCTION: disableSilentMode"]
            FU8["FUNCTION: isSilentMode"]
            FU9["FUNCTION: log"]
            FU10["FUNCTION: hasTaggedStructure"]
            FU11["FUNCTION: normalizeTaskIds"]
            FU12["FUNCTION: readJSON"]
            FU13["FUNCTION: performCompleteTagMigration"]
            FU14["FUNCTION: migrateConfigJson"]
            FU15["FUNCTION: createStateJson"]
            FU16["FUNCTION: markMigrationForNotice"]
            FU17["FUNCTION: writeJSON"]
            FU18["FUNCTION: sanitizePrompt"]
            FU19["FUNCTION: readComplexityReport"]
            FU20["FUNCTION: findTaskInComplexityReport"]
            FU21["FUNCTION: addComplexityToTask"]
            FU22["FUNCTION: taskExists"]
            FU23["FUNCTION: formatTaskId"]
            FU24["FUNCTION: findTaskById"]
            FU25["FUNCTION: truncate"]
            FU26["FUNCTION: isEmpty"]
            FU27["FUNCTION: findCycles"]
            FU28["FUNCTION: detectCamelCaseFlags"]
            FU29["FUNCTION: aggregateTelemetry"]
            FU30["FUNCTION: getCurrentTag"]
            FU31["FUNCTION: resolveTag"]
            FU32["FUNCTION: getTasksForTag"]
            FU33["FUNCTION: setTasksForTag"]
            FU34["FUNCTION: flattenTasksWithSubtasks"]
            FU35["FUNCTION: ensureTagMetadata"]
            FU36["FUNCTION: toKebabCase"]
        end
        subgraph file74Exports["utils.js-Exports"]
            E1["EXP: LOG_LEVELS"]
            E2["EXP: log"]
            E3["EXP: readJSON"]
            E4["EXP: writeJSON"]
            E5["EXP: sanitizePrompt"]
            E6["EXP: readComplexityReport"]
            E7["EXP: findTaskInComplexityReport"]
            E8["EXP: taskExists"]
            E9["EXP: formatTaskId"]
            E10["EXP: findTaskById"]
            E11["EXP: truncate"]
            E12["EXP: isEmpty"]
            E13["EXP: findCycles"]
            E14["EXP: toKebabCase"]
            E15["EXP: detectCamelCaseFlags"]
            E16["EXP: disableSilentMode"]
            E17["EXP: enableSilentMode"]
            E18["EXP: getTaskManager"]
            E19["EXP: isSilentMode"]
            E20["EXP: addComplexityToTask"]
            E21["EXP: resolveEnvVariable"]
            E22["EXP: findProjectRoot"]
            E23["EXP: getTagAwareFilePath"]
            E24["EXP: slugifyTagForFilePath"]
            E25["EXP: aggregateTelemetry"]
            E26["EXP: getCurrentTag"]
            E27["EXP: resolveTag"]
            E28["EXP: getTasksForTag"]
            E29["EXP: setTasksForTag"]
            E30["EXP: performCompleteTagMigration"]
            E31["EXP: migrateConfigJson"]
            E32["EXP: createStateJson"]
            E33["EXP: markMigrationForNotice"]
            E34["EXP: flattenTasksWithSubtasks"]
            E35["EXP: ensureTagMetadata"]
            E36["EXP: normalizeTaskIds"]
        end
        subgraph file74Constants["utils.js-Const Declarations"]
            C1["CONST: envPath, VALUE: path.join(projectRoot, '.env')"]
            C2["CONST: envFileContent, VALUE: fs.readFileSync(envPath, 'utf-8')"]
            C3["CONST: parsedEnv, VALUE: dotenv.parse(envFileContent)"]
            C4["CONST: parsedPath, VALUE: path.parse(basePath)"]
            C5["CONST: slugifiedTag, VALUE: slugifyTagForFilePath(tag)"]
            C6["CONST: relativePath, VALUE: path.format(parsedPath)"]
            C7["CONST: rootPath, VALUE: path.parse(currentPath).root"]
            C8["CONST: hasMarker, VALUE: markers.some((marker) => {"]
            C9["CONST: markerPath, VALUE: path.join(currentPath, marker)"]
            C10["CONST: hasMarkerInRoot, VALUE: markers.some((marker) => {"]
            C11["CONST: markerPath, VALUE: path.join(rootPath, marker)"]
            C12["CONST: LOG_LEVELS, VALUE: {"]
            C13["CONST: prefixes, VALUE: {"]
            C14["CONST: currentLevel, VALUE: LOG_LEVELS.hasOwnProperty(level) ? level : 'info'"]
            C15["CONST: prefix, VALUE: prefixes[currentLevel] || ''"]
            C16["CONST: message, VALUE: args"]
            C17["CONST: parsedId, VALUE: parseInt(task.id, 10)"]
            C18["CONST: parts, VALUE: subtask.id.split('.')"]
            C19["CONST: parsedSubtaskId, VALUE: parseInt(subtask.id, 10)"]
            C20["CONST: migratedData, VALUE: {"]
            C21["CONST: originalTaggedData, VALUE: JSON.parse(JSON.stringify(data))"]
            C22["CONST: derivedProjectRoot, VALUE: findProjectRoot(path.dirname(filepath))"]
            C23["CONST: tagData, VALUE: data[resolvedTag]"]
            C24["CONST: result, VALUE: {"]
            C25["CONST: masterData, VALUE: data.master"]
            C26["CONST: masterData, VALUE: data.master"]
            C27["CONST: projectRoot, VALUE: findProjectRoot(path.dirname(tasksJsonPath)) ||"]
            C28["CONST: configPath, VALUE: path.join(projectRoot, '.taskmaster', 'config.json')"]
            C29["CONST: statePath, VALUE: path.join(projectRoot, '.taskmaster', 'state.json')"]
            C30["CONST: rawConfig, VALUE: fs.readFileSync(configPath, 'utf8')"]
            C31["CONST: config, VALUE: JSON.parse(rawConfig)"]
            C32["CONST: initialState, VALUE: {"]
            C33["CONST: projectRoot, VALUE: path.dirname(path.dirname(tasksJsonPath))"]
            C34["CONST: statePath, VALUE: path.join(projectRoot, '.taskmaster', 'state.json')"]
            C35["CONST: rawState, VALUE: fs.readFileSync(statePath, 'utf8')"]
            C36["CONST: stateData, VALUE: JSON.parse(rawState) || {}"]
            C37["CONST: isDebug, VALUE: process.env.TASKMASTER_DEBUG === 'true'"]
            C38["CONST: resolvedTag, VALUE: tag || getCurrentTag(projectRoot)"]
            C39["CONST: rawFullData, VALUE: JSON.parse(fs.readFileSync(filepath, 'utf8'))"]
            C40["CONST: resolvedTag, VALUE: tag || getCurrentTag(projectRoot)"]
            C41["CONST: originalTaggedData, VALUE: data._rawTaggedData"]
            C42["CONST: finalCleanData, VALUE: {}"]
            C43["CONST: newPath, VALUE: path.join(process.cwd(), COMPLEXITY_REPORT_FILE)"]
            C44["CONST: legacyPath, VALUE: path.join("]
            C45["CONST: reportData, VALUE: readJSON(reportPath)"]
            C46["CONST: taskAnalysis, VALUE: findTaskInComplexityReport(complexityReport, taskId)"]
            C47["CONST: parentTask, VALUE: tasks.find((t) => t.id === parentId)"]
            C48["CONST: id, VALUE: parseInt(taskId, 10)"]
            C49["CONST: parentTask, VALUE: tasks.find((t) => t.id === parentId)"]
            C50["CONST: subtask, VALUE: parentTask.subtasks.find((st) => st.id === subtaskId)"]
            C51["CONST: id, VALUE: parseInt(taskId, 10)"]
            C52["CONST: task, VALUE: tasks.find((t) => t.id === id) || null"]
            C53["CONST: filteredTask, VALUE: { ...task }"]
            C54["CONST: cyclesToBreak, VALUE: []"]
            C55["CONST: dependencies, VALUE: dependencyMap.get(subtaskId) || []"]
            C56["CONST: cycles, VALUE: findCycles(depId, dependencyMap, visited, recursionStack, ["]
            C57["CONST: cycleStartIndex, VALUE: path.indexOf(depId)"]
            C58["CONST: cycleEdges, VALUE: path.slice(cycleStartIndex)"]
            C59["CONST: toKebabCase, VALUE: (str) => {"]
            C60["CONST: withReplacedAcronyms, VALUE: str"]
            C61["CONST: camelCaseFlags, VALUE: []"]
            C62["CONST: flagName, VALUE: arg.split('=')[0].slice(2)"]
            C63["CONST: kebabVersion, VALUE: toKebabCase(flagName)"]
            C64["CONST: aggregated, VALUE: {"]
            C65["CONST: uniqueModels, VALUE: new Set()"]
            C66["CONST: uniqueProviders, VALUE: new Set()"]
            C67["CONST: uniqueCurrencies, VALUE: new Set()"]
            C68["CONST: statePath, VALUE: path.join(projectRoot, '.taskmaster', 'state.json')"]
            C69["CONST: rawState, VALUE: fs.readFileSync(statePath, 'utf8')"]
            C70["CONST: stateData, VALUE: JSON.parse(rawState)"]
            C71["CONST: configPath, VALUE: path.join(projectRoot, '.taskmaster', 'config.json')"]
            C72["CONST: rawConfig, VALUE: fs.readFileSync(configPath, 'utf8')"]
            C73["CONST: configData, VALUE: JSON.parse(rawConfig)"]
            C74["CONST: flattened, VALUE: []"]
            C75["CONST: now, VALUE: new Date().toISOString()"]
        end
        subgraph file74Flow["utils.js-Execution Flow"]
            FL1["Identify and load dependencies and modules"]
            FL2["Define functions and core logic for this module"]
            FL3["Expose public API via exports"]
        end
    end
    SharedImports --> file1Imports
    SharedDependencies --> file1
    SharedParameters --> file1
    SharedConstants --> file1Constants