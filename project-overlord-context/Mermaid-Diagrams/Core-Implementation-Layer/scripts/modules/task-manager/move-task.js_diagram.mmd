```mermaid
flowchart TB
    subgraph Imports["Imports"]
        I1["IMPORT: path, FROM: path"]
        I2["IMPORT: ../utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        I3["IMPORT: ../task-manager.js, FROM: /claude-task-master/scripts/modules/task-manager.js"]
        I4["IMPORT: ./generate-task-files.js, FROM: /claude-task-master/scripts/modules/task-manager/generate-task-files.js"]
    end
    subgraph Dependencies["Dependencies"]
        D1["DEP: Path resolution"]
    end
    subgraph FunctionsDefined["Functions Defined"]
        FU1["FUNCTION: moveTask"]
        FU2["FUNCTION: moveSubtaskToSubtask"]
        FU3["FUNCTION: moveSubtaskToTask"]
        FU4["FUNCTION: moveTaskToSubtask"]
        FU5["FUNCTION: moveTaskToTask"]
        FU6["FUNCTION: moveSubtaskToAnotherParent"]
        FU7["FUNCTION: moveTaskToNewId"]
    end
    subgraph Exports["Exports"]
        E1["EXP: moveTask"]
    end
    subgraph Parameters["Parameters"]
        P1["PARAM: {string} tasksPath - Path to tasks.json file"]
        P2["PARAM: {string} sourceId - ID(s) of the task/subtask to move (e.g., '5' or '5.2' or '5,6,7')"]
        P3["PARAM: {string} destinationId - ID(s) of the destination (e.g., '7' or '7.3' or '7,8,9')"]
        P4["PARAM: {boolean} generateFiles - Whether to regenerate task files after moving"]
        P5["PARAM: {Object} options - Additional options"]
        P6["PARAM: {string} options.projectRoot - Project root directory for tag resolution"]
        P7["PARAM: {string} options.tag - Explicit tag to use (optional)"]
    end
    subgraph Constants["Const Declarations"]
        C1["CONST: sourceIds, VALUE: sourceId.split(',').map((id) => id.trim())"]
        C2["CONST: destinationIds, VALUE: destinationId.split(',').map((id) => id.trim())"]
        C3["CONST: results, VALUE: []"]
        C4["CONST: result, VALUE: await moveTask("]
        C5["CONST: tasks, VALUE: rawData[tag].tasks"]
        C6["CONST: isSourceSubtask, VALUE: sourceId.includes('.')"]
        C7["CONST: isDestSubtask, VALUE: destinationId.includes('.')"]
        C8["CONST: sourceParentTask, VALUE: tasks.find((t) => t.id === sourceParentId)"]
        C9["CONST: destParentTask, VALUE: tasks.find((t) => t.id === destParentId)"]
        C10["CONST: sourceSubtaskIndex, VALUE: sourceParentTask.subtasks.findIndex("]
        C11["CONST: sourceSubtask, VALUE: sourceParentTask.subtasks[sourceSubtaskIndex]"]
        C12["CONST: destSubtaskIndex, VALUE: destParentTask.subtasks.findIndex("]
        C13["CONST: adjustedIndex, VALUE: sourceSubtaskIndex < destSubtaskIndex"]
        C14["CONST: destTaskId, VALUE: parseInt(destinationId, 10)"]
        C15["CONST: sourceParentTask, VALUE: tasks.find((t) => t.id === sourceParentId)"]
        C16["CONST: sourceSubtaskIndex, VALUE: sourceParentTask.subtasks.findIndex("]
        C17["CONST: sourceSubtask, VALUE: sourceParentTask.subtasks[sourceSubtaskIndex]"]
        C18["CONST: existingDestTask, VALUE: tasks.find((t) => t.id === destTaskId)"]
        C19["CONST: newTask, VALUE: {"]
        C20["CONST: insertIndex, VALUE: tasks.findIndex((t) => t.id > destTaskId)"]
        C21["CONST: sourceTaskId, VALUE: parseInt(sourceId, 10)"]
        C22["CONST: sourceTaskIndex, VALUE: tasks.findIndex((t) => t.id === sourceTaskId)"]
        C23["CONST: destParentTask, VALUE: tasks.find((t) => t.id === destParentId)"]
        C24["CONST: sourceTask, VALUE: tasks[sourceTaskIndex]"]
        C25["CONST: newSubtask, VALUE: {"]
        C26["CONST: insertPosition, VALUE: destSubtaskIndex === -1 ? 0 : destSubtaskIndex + 1"]
        C27["CONST: sourceTaskId, VALUE: parseInt(sourceId, 10)"]
        C28["CONST: destTaskId, VALUE: parseInt(destinationId, 10)"]
        C29["CONST: sourceTaskIndex, VALUE: tasks.findIndex((t) => t.id === sourceTaskId)"]
        C30["CONST: sourceTask, VALUE: tasks[sourceTaskIndex]"]
        C31["CONST: destTaskIndex, VALUE: tasks.findIndex((t) => t.id === destTaskId)"]
        C32["CONST: destTask, VALUE: tasks[destTaskIndex]"]
        C33["CONST: destSubtaskId_num, VALUE: parseInt(destSubtaskId, 10)"]
        C34["CONST: newSubtask, VALUE: {"]
        C35["CONST: insertPosition, VALUE: destSubtaskIndex === -1 ? 0 : destSubtaskIndex + 1"]
        C36["CONST: destTaskIndex, VALUE: tasks.findIndex((t) => t.id === destTaskId)"]
        C37["CONST: movedTask, VALUE: {"]
        C38["CONST: depIndex, VALUE: task.dependencies.indexOf(sourceTask.id)"]
        C39["CONST: depIndex, VALUE: subtask.dependencies.indexOf(sourceTask.id)"]
        C40["CONST: adjustedDestIndex, VALUE: sourceTaskIndex < destTaskIndex ? destTaskIndex - 1 : destTaskIndex"]
    end
    subgraph ExecutionFlow["Execution Flow"]
        FL1["Identify and load dependencies and modules"]
        FL2["Define functions and core logic for this module"]
        FL3["Expose public API via exports"]
    end
    subgraph FileName["move-task.js"]
        Imports
        Dependencies
        FunctionsDefined
        Exports
        Parameters
        Constants
        ExecutionFlow
    end
    FL1 --> FL2
    FL2 --> FL3
```