```mermaid
flowchart TB
    subgraph Imports["Imports"]
        I1["IMPORT: path, FROM: path"]
        I2["IMPORT: fs, FROM: fs"]
        I3["IMPORT: inquirer, FROM: inquirer"]
        I4["IMPORT: chalk, FROM: chalk"]
        I5["IMPORT: boxen, FROM: boxen"]
        I6["IMPORT: cli-table3, FROM: cli-table3"]
        I7["IMPORT: ../ui.js, FROM: /claude-task-master/scripts/modules/ui.js"]
        I8["IMPORT: ./find-next-task.js, FROM: /claude-task-master/scripts/modules/task-manager/find-next-task.js"]
    end
    subgraph Dependencies["Dependencies"]
        D1["DEP: File system"]
        D2["DEP: Path resolution"]
    end
    subgraph FunctionsDefined["Functions Defined"]
        FU1["FUNCTION: createTag"]
        FU2["FUNCTION: deleteTag"]
        FU3["FUNCTION: enhanceTagsWithMetadata"]
        FU4["FUNCTION: tags"]
        FU5["FUNCTION: useTag"]
        FU6["FUNCTION: renameTag"]
        FU7["FUNCTION: copyTag"]
        FU8["FUNCTION: switchCurrentTag"]
        FU9["FUNCTION: updateBranchTagMapping"]
        FU10["FUNCTION: getTagForBranch"]
        FU11["FUNCTION: createTagFromBranch"]
        FU12["FUNCTION: autoSwitchTagForBranch"]
        FU13["FUNCTION: checkAndAutoSwitchTag"]
    end
    subgraph Exports["Exports"]
        E1["EXP: createTag"]
        E2["EXP: deleteTag"]
        E3["EXP: tags"]
        E4["EXP: useTag"]
        E5["EXP: renameTag"]
        E6["EXP: copyTag"]
        E7["EXP: switchCurrentTag"]
        E8["EXP: updateBranchTagMapping"]
        E9["EXP: getTagForBranch"]
        E10["EXP: createTagFromBranch"]
        E11["EXP: autoSwitchTagForBranch"]
        E12["EXP: checkAndAutoSwitchTag"]
    end
    subgraph Parameters["Parameters"]
        P1["PARAM: {string} tasksPath - Path to the tasks.json file"]
        P2["PARAM: {string} tagName - Name of the new tag to create"]
        P3["PARAM: {Object} options - Options object"]
        P4["PARAM: {string} [options.copyFromTag] - Specific tag to copy tasks from"]
        P5["PARAM: {string} [options.description] - Optional description for the tag"]
        P6["PARAM: {Object} context - Context object containing session and projectRoot"]
        P7["PARAM: {string} [context.projectRoot] - Project root path"]
        P8["PARAM: {Object} [context.mcpLog] - MCP logger object (optional)"]
        P9["PARAM: {string} outputFormat - Output format (text or json)"]
        P10["PARAM: {string} tasksPath - Path to the tasks.json file"]
        P11["PARAM: {string} tagName - Name of the tag to delete"]
        P12["PARAM: {Object} options - Options object"]
        P13["PARAM: {Object} context - Context object containing session and projectRoot"]
        P14["PARAM: {string} [context.projectRoot] - Project root path"]
        P15["PARAM: {Object} [context.mcpLog] - MCP logger object (optional)"]
        P16["PARAM: {string} outputFormat - Output format (text or json)"]
        P17["PARAM: {string} tasksPath - Path to the tasks.json file"]
        P18["PARAM: {Object} rawData - The raw tagged data"]
        P19["PARAM: {Object} context - Context object"]
        P20["PARAM: {string} tasksPath - Path to the tasks.json file"]
        P21["PARAM: {Object} options - Options object"]
        P22["PARAM: {Object} context - Context object containing session and projectRoot"]
        P23["PARAM: {string} [context.projectRoot] - Project root path"]
        P24["PARAM: {Object} [context.mcpLog] - MCP logger object (optional)"]
        P25["PARAM: {string} outputFormat - Output format (text or json)"]
        P26["PARAM: {string} tasksPath - Path to the tasks.json file"]
        P27["PARAM: {string} tagName - Name of the tag to switch to"]
        P28["PARAM: {Object} options - Options object"]
        P29["PARAM: {Object} context - Context object containing session and projectRoot"]
        P30["PARAM: {string} [context.projectRoot] - Project root path"]
        P31["PARAM: {Object} [context.mcpLog] - MCP logger object (optional)"]
        P32["PARAM: {string} outputFormat - Output format (text or json)"]
        P33["PARAM: {string} tasksPath - Path to the tasks.json file"]
        P34["PARAM: {string} oldName - Current name of the tag"]
        P35["PARAM: {string} newName - New name for the tag"]
        P36["PARAM: {Object} options - Options object"]
        P37["PARAM: {Object} context - Context object containing session and projectRoot"]
        P38["PARAM: {string} [context.projectRoot] - Project root path"]
        P39["PARAM: {Object} [context.mcpLog] - MCP logger object (optional)"]
        P40["PARAM: {string} outputFormat - Output format (text or json)"]
        P41["PARAM: {string} tasksPath - Path to the tasks.json file"]
        P42["PARAM: {string} sourceName - Name of the source tag to copy from"]
        P43["PARAM: {string} targetName - Name of the new tag to create"]
        P44["PARAM: {Object} options - Options object"]
        P45["PARAM: {string} [options.description] - Optional description for the new tag"]
        P46["PARAM: {Object} context - Context object containing session and projectRoot"]
        P47["PARAM: {string} [context.projectRoot] - Project root path"]
        P48["PARAM: {Object} [context.mcpLog] - MCP logger object (optional)"]
        P49["PARAM: {string} outputFormat - Output format (text or json)"]
        P50["PARAM: {string} projectRoot - Project root directory"]
        P51["PARAM: {string} tagName - Name of the tag to switch to"]
        P52["PARAM: {string} projectRoot - Project root directory"]
        P53["PARAM: {string} branchName - Git branch name"]
        P54["PARAM: {string} tagName - Tag name to map to"]
        P55["PARAM: {string} projectRoot - Project root directory"]
        P56["PARAM: {string} branchName - Git branch name"]
        P57["PARAM: {string} tasksPath - Path to the tasks.json file"]
        P58["PARAM: {string} branchName - Git branch name to create tag from"]
        P59["PARAM: {Object} options - Options object"]
        P60["PARAM: {boolean} [options.copyFromCurrent] - Copy tasks from current tag"]
        P61["PARAM: {string} [options.copyFromTag] - Copy tasks from specific tag"]
        P62["PARAM: {string} [options.description] - Custom description for the tag"]
        P63["PARAM: {boolean} [options.autoSwitch] - Automatically switch to the new tag"]
        P64["PARAM: {Object} context - Context object containing session and projectRoot"]
        P65["PARAM: {string} [context.projectRoot] - Project root path"]
        P66["PARAM: {Object} [context.mcpLog] - MCP logger object (optional)"]
        P67["PARAM: {string} outputFormat - Output format (text or json)"]
        P68["PARAM: {string} tasksPath - Path to the tasks.json file"]
        P69["PARAM: {Object} options - Options object"]
        P70["PARAM: {boolean} [options.createIfMissing] - Create tag if it doesn't exist"]
        P71["PARAM: {boolean} [options.copyFromCurrent] - Copy tasks when creating new tag"]
        P72["PARAM: {Object} context - Context object containing session and projectRoot"]
        P73["PARAM: {string} [context.projectRoot] - Project root path"]
        P74["PARAM: {Object} [context.mcpLog] - MCP logger object (optional)"]
        P75["PARAM: {string} outputFormat - Output format (text or json)"]
        P76["PARAM: {string} projectRoot - Project root directory"]
        P77["PARAM: {string} tasksPath - Path to the tasks.json file"]
        P78["PARAM: {Object} context - Context object"]
    end
    subgraph Constants["Const Declarations"]
        C1["CONST: logFn, VALUE: mcpLog || {"]
        C2["CONST: reservedNames, VALUE: ['master', 'main', 'default']"]
        C3["CONST: data, VALUE: readJSON(tasksPath, projectRoot)"]
        C4["CONST: sourceTag, VALUE: copyFromTag || getCurrentTag(projectRoot)"]
        C5["CONST: cleanData, VALUE: {}"]
        C6["CONST: logFn, VALUE: mcpLog || {"]
        C7["CONST: data, VALUE: readJSON(tasksPath, projectRoot)"]
        C8["CONST: currentTag, VALUE: getCurrentTag(projectRoot)"]
        C9["CONST: isCurrentTag, VALUE: currentTag === tagName"]
        C10["CONST: tasks, VALUE: getTasksForTag(rawData, tagName)"]
        C11["CONST: taskCount, VALUE: tasks.length"]
        C12["CONST: firstConfirm, VALUE: await inquirer.prompt(["]
        C13["CONST: secondConfirm, VALUE: await inquirer.prompt(["]
        C14["CONST: cleanData, VALUE: {}"]
        C15["CONST: stats, VALUE: fs.statSync(tasksPath)"]
        C16["CONST: cleanData, VALUE: {}"]
        C17["CONST: logFn, VALUE: context.mcpLog || {"]
        C18["CONST: logFn, VALUE: mcpLog || {"]
        C19["CONST: data, VALUE: readJSON(tasksPath, projectRoot)"]
        C20["CONST: currentTag, VALUE: getCurrentTag(projectRoot)"]
        C21["CONST: rawData, VALUE: data._rawTaggedData || data"]
        C22["CONST: tagList, VALUE: []"]
        C23["CONST: tasks, VALUE: tagData.tasks || []"]
        C24["CONST: metadata, VALUE: tagData.metadata || {}"]
        C25["CONST: headers, VALUE: [chalk.cyan.bold('Tag Name')]"]
        C26["CONST: table, VALUE: new Table({"]
        C27["CONST: row, VALUE: []"]
        C28["CONST: tagDisplay, VALUE: tag.isCurrent"]
        C29["CONST: createdDate, VALUE: tag.created !== 'Unknown'"]
        C30["CONST: logFn, VALUE: mcpLog || {"]
        C31["CONST: data, VALUE: readJSON(tasksPath, projectRoot)"]
        C32["CONST: rawData, VALUE: data._rawTaggedData || data"]
        C33["CONST: previousTag, VALUE: getCurrentTag(projectRoot)"]
        C34["CONST: tagData, VALUE: readJSON(tasksPath, projectRoot, tagName)"]
        C35["CONST: tasks, VALUE: tagData ? tagData.tasks || [] : []"]
        C36["CONST: taskCount, VALUE: tasks.length"]
        C37["CONST: nextTask, VALUE: findNextTask(tasks)"]
        C38["CONST: logFn, VALUE: mcpLog || {"]
        C39["CONST: reservedNames, VALUE: ['master', 'main', 'default']"]
        C40["CONST: data, VALUE: readJSON(tasksPath, projectRoot)"]
        C41["CONST: rawData, VALUE: data._rawTaggedData || data"]
        C42["CONST: currentTag, VALUE: getCurrentTag(projectRoot)"]
        C43["CONST: isCurrentTag, VALUE: currentTag === oldName"]
        C44["CONST: cleanData, VALUE: {}"]
        C45["CONST: tasks, VALUE: getTasksForTag(rawData, newName)"]
        C46["CONST: taskCount, VALUE: tasks.length"]
        C47["CONST: logFn, VALUE: mcpLog || {"]
        C48["CONST: reservedNames, VALUE: ['master', 'main', 'default']"]
        C49["CONST: data, VALUE: readJSON(tasksPath, projectRoot)"]
        C50["CONST: rawData, VALUE: data._rawTaggedData || data"]
        C51["CONST: sourceTasks, VALUE: getTasksForTag(rawData, sourceName)"]
        C52["CONST: cleanData, VALUE: {}"]
        C53["CONST: statePath, VALUE: path.join(projectRoot, '.taskmaster', 'state.json')"]
        C54["CONST: rawState, VALUE: fs.readFileSync(statePath, 'utf8')"]
        C55["CONST: statePath, VALUE: path.join(projectRoot, '.taskmaster', 'state.json')"]
        C56["CONST: rawState, VALUE: fs.readFileSync(statePath, 'utf8')"]
        C57["CONST: statePath, VALUE: path.join(projectRoot, '.taskmaster', 'state.json')"]
        C58["CONST: rawState, VALUE: fs.readFileSync(statePath, 'utf8')"]
        C59["CONST: state, VALUE: JSON.parse(rawState)"]
        C60["CONST: logFn, VALUE: mcpLog || {"]
        C61["CONST: tagName, VALUE: sanitizeBranchNameForTag(branchName)"]
        C62["CONST: createResult, VALUE: await createTag("]
        C63["CONST: logFn, VALUE: mcpLog || {"]
        C64["CONST: currentBranch, VALUE: await getCurrentBranch(projectRoot)"]
        C65["CONST: data, VALUE: readJSON(tasksPath, projectRoot)"]
        C66["CONST: rawData, VALUE: data._rawTaggedData || data"]
        C67["CONST: tagExists, VALUE: rawData[tagName]"]
        C68["CONST: createResult, VALUE: await createTagFromBranch("]
        C69["CONST: switchResult, VALUE: await useTag("]
        C70["CONST: configPath, VALUE: path.join(projectRoot, '.taskmaster', 'config.json')"]
        C71["CONST: rawConfig, VALUE: fs.readFileSync(configPath, 'utf8')"]
        C72["CONST: config, VALUE: JSON.parse(rawConfig)"]
    end
    subgraph ExecutionFlow["Execution Flow"]
        FL1["Identify and load dependencies and modules"]
        FL2["Define functions and core logic for this module"]
        FL3["Expose public API via exports"]
    end
    subgraph FileName["tag-management.js"]
        Imports
        Dependencies
        FunctionsDefined
        Exports
        Parameters
        Constants
        ExecutionFlow
    end
    FL1 --> FL2
    FL2 --> FL3
```