flowchart TB
    subgraph Imports["Imports"]
        I1["IMPORT: chalk, FROM: chalk"]
        I2["IMPORT: boxen, FROM: boxen"]
        I3["IMPORT: readline, FROM: readline"]
        I4["IMPORT: fs, FROM: fs"]
        I5["IMPORT: log, readJSON, writeJSON, isSilentMode, FROM: /claude-task-master/claude-task-master/scripts/modules/utils.js"]
        I6["IMPORT: startLoadingIndicator, stopLoadingIndicator, displayAiUsageSummary, FROM: /claude-task-master/claude-task-master/scripts/modules/ui.js"]
        I7["IMPORT: generateTextService, FROM: /claude-task-master/claude-task-master/scripts/modules/ai-services-unified.js"]
        I8["IMPORT: getDebugFlag, getProjectName, getMainProvider, getResearchProvider, FROM: /claude-task-master/claude-task-master/scripts/modules/config-manager.js"]
        I9["IMPORT: getPromptManager, FROM: /claude-task-master/claude-task-master/scripts/modules/prompt-manager.js"]
        I10["IMPORT: COMPLEXITY_REPORT_FILE, LEGACY_TASKS_FILE, FROM: /claude-task-master/claude-task-master/src/constants/paths.js"]
        I11["IMPORT: CUSTOM_PROVIDERS, FROM: /claude-task-master/claude-task-master/src/constants/providers.js"]
        I12["IMPORT: resolveComplexityReportOutputPath, FROM: /claude-task-master/claude-task-master/src/utils/path-utils.js"]
        I13["IMPORT: ContextGatherer, FROM: /claude-task-master/claude-task-master/scripts/modules/utils/contextGatherer.js"]
        I14["IMPORT: FuzzyTaskSearch, FROM: /claude-task-master/claude-task-master/scripts/modules/utils/fuzzyTaskSearch.js"]
        I15["IMPORT: flattenTasksWithSubtasks, FROM: /claude-task-master/claude-task-master/scripts/modules/utils.js"]
    end
    
    subgraph Dependencies["Dependencies"]
        D1["DEP: AI service provider for complexity analysis"]
        D2["DEP: File system for reading/writing complexity reports"]
        D3["DEP: Terminal/console for user interface display"]
    end
    
    subgraph FunctionsDefined["Functions Defined"]
        FU1["FUNCTION: generateInternalComplexityAnalysisPrompt"]
        FU2["FUNCTION: analyzeTaskComplexity"]
    end
    
    subgraph Exports["Exports"]
        E1["EXP: analyzeTaskComplexity"]
    end
    
    subgraph Parameters["Parameters"]
        P1["PARAM: {Object} tasksData - The tasks data object"]
        P2["PARAM: {string} gatheredContext - The gathered context for the analysis"]
        P3["PARAM: {Object} options - Command options"]
        P4["PARAM: {string} options.file - Path to tasks file"]
        P5["PARAM: {string} options.output - Path to report output file"]
        P6["PARAM: {string|number} options.threshold - Complexity threshold"]
        P7["PARAM: {boolean} options.research - Use research role"]
        P8["PARAM: {string} options.projectRoot - Project root path (for MCP/env fallback)"]
        P9["PARAM: {string} options.tag - Tag for the task"]
        P10["PARAM: {string} options.id - Comma-separated list of task IDs to analyze specifically"]
        P11["PARAM: {number} options.from - Starting task ID in a range to analyze"]
        P12["PARAM: {number} options.to - Ending task ID in a range to analyze"]
        P13["PARAM: {Object} options._filteredTasksData - Pre-filtered task data (internal use)"]
        P14["PARAM: {number} options._originalTaskCount - Original task count (internal use)"]
        P15["PARAM: {Object} context - Context object, potentially containing session and mcpLog"]
        P16["PARAM: {Object} context.session - Session object from MCP server (optional)"]
        P17["PARAM: {Object} context.mcpLog - MCP logger object (optional)"]
        P18["PARAM: {function} context.reportProgress - Deprecated: Function to report progress (ignored)"]
    end
    
    subgraph Constants["Const Declarations"]
        C1["CONST: session, VALUE: extracted from context parameter"]
        C2["CONST: mcpLog, VALUE: extracted from context parameter"]
        C3["CONST: tasksPath, VALUE: options.file or LEGACY_TASKS_FILE default"]
        C4["CONST: thresholdScore, VALUE: parseFloat of options.threshold or 5 default"]
        C5["CONST: useResearch, VALUE: options.research boolean or false"]
        C6["CONST: outputFormat, VALUE: 'json' if mcpLog exists, otherwise 'text'"]
        C7["CONST: outputPath, VALUE: resolved complexity report output path"]
        C8["CONST: tasksData, VALUE: filtered tasks data for analysis"]
        C9["CONST: gatheredContext, VALUE: context gathered from ContextGatherer"]
        C10["CONST: complexityAnalysis, VALUE: parsed AI response for complexity scores"]
        C11["CONST: report, VALUE: final complexity analysis report object"]
    end
    
    subgraph EnvironmentVariables["Environment Variables"]
        ENV1["ENV: DATABASE_URL, USAGE: potential database connection for task storage"]
        ENV2["ENV: API_KEY, USAGE: AI service authentication"]
    end
    
    subgraph ExecutionFlow["Execution Flow"]
        FL1["Parse command options and determine analysis parameters"]
        FL2["Resolve output path for complexity report using tag-aware resolution"]
        FL3["Read tasks from JSON file and validate data structure"]
        FL4["Filter tasks based on status, ID ranges, or specific ID lists"]
        FL5["Gather additional project context using ContextGatherer and FuzzyTaskSearch"]
        FL6["Check for existing complexity report and create lookup map"]
        FL7["Load complexity analysis prompt using PromptManager"]
        FL8["Call AI service to analyze task complexity and generate scores"]
        FL9["Parse AI response and extract complexity analysis JSON"]
        FL10["Validate and correct complexity analysis data structure"]
        FL11["Merge new analysis with existing report data"]
        FL12["Write updated complexity report to output file"]
        FL13["Display analysis summary and suggested next steps to user"]
        FL14["Return report object with telemetry data"]
    end
    
    subgraph analyzeTaskComplexityJs["analyze-task-complexity.js"]
        Imports
        Dependencies
        FunctionsDefined
        Exports
        Parameters
        Constants
        EnvironmentVariables
        ExecutionFlow
    end
    
    FL1 --> FL2
    FL2 --> FL3
    FL3 --> FL4
    FL4 --> FL5
    FL5 --> FL6
    FL6 --> FL7
    FL7 --> FL8
    FL8 --> FL9
    FL9 --> FL10
    FL10 --> FL11
    FL11 --> FL12
    FL12 --> FL13
    FL13 --> FL14