```mermaid
flowchart TB
    subgraph Imports["Imports"]
        I1["IMPORT: path, FROM: path"]
        I2["IMPORT: chalk, FROM: chalk"]
        I3["IMPORT: boxen, FROM: boxen"]
        I4["IMPORT: cli-table3, FROM: cli-table3"]
        I5["IMPORT: zod, FROM: zod"]
        I6["IMPORT: fuse.js, FROM: fuse.js"]
        I7["IMPORT: ../ai-services-unified.js, FROM: /claude-task-master/scripts/modules/ai-services-unified.js"]
        I8["IMPORT: ../config-manager.js, FROM: /claude-task-master/scripts/modules/config-manager.js"]
        I9["IMPORT: ../prompt-manager.js, FROM: /claude-task-master/scripts/modules/prompt-manager.js"]
        I10["IMPORT: ../utils/contextGatherer.js, FROM: /claude-task-master/scripts/modules/utils/contextGatherer.js"]
        I11["IMPORT: ./generate-task-files.js, FROM: /claude-task-master/scripts/modules/task-manager/generate-task-files.js"]
    end
    subgraph Dependencies["Dependencies"]
        D1["DEP: Path resolution"]
    end
    subgraph FunctionsDefined["Functions Defined"]
        FU1["FUNCTION: getAllTasks"]
        FU2["FUNCTION: addTask"]
        FU3["FUNCTION: buildDependencyGraph"]
        FU4["FUNCTION: report"]
        FU5["FUNCTION: getPriorityColor"]
    end
    subgraph Exports["Exports"]
        E1["EXP: addTask"]
    end
    subgraph Parameters["Parameters"]
        P1["PARAM: {Object} rawData - The raw tagged data object"]
        P2["PARAM: {string} tasksPath - Path to the tasks.json file"]
        P3["PARAM: {string} prompt - Description of the task to add (required for AI-driven creation)"]
        P4["PARAM: {Array} dependencies - Task dependencies"]
        P5["PARAM: {string} priority - Task priority"]
        P6["PARAM: {function} reportProgress - Function to report progress to MCP server (optional)"]
        P7["PARAM: {Object} mcpLog - MCP logger object (optional)"]
        P8["PARAM: {Object} session - Session object from MCP server (optional)"]
        P9["PARAM: {string} outputFormat - Output format (text or json)"]
        P10["PARAM: {Object} customEnv - Custom environment variables (optional) - Note: AI params override deprecated"]
        P11["PARAM: {Object} manualTaskData - Manual task data (optional, for direct task creation without AI)"]
        P12["PARAM: {boolean} useResearch - Whether to use the research model (passed to unified service)"]
        P13["PARAM: {Object} context - Context object containing session and potentially projectRoot"]
        P14["PARAM: {string} [context.projectRoot] - Project root path (for MCP/env fallback)"]
        P15["PARAM: {string} [context.commandName] - The name of the command being executed (for telemetry)"]
        P16["PARAM: {string} [context.outputType] - The output type ('cli' or 'mcp', for telemetry)"]
        P17["PARAM: {string} [context.tag] - Tag for the task (optional)"]
        P18["PARAM: {Array} tasks - All tasks from tasks.json"]
        P19["PARAM: {number} taskId - ID of the task to analyze"]
        P20["PARAM: {Set} visited - Set of already visited task IDs"]
        P21["PARAM: {Map} depthMap - Map of task ID to its depth in the graph"]
        P22["PARAM: {number} depth - Current depth in the recursion"]
    end
    subgraph Constants["Const Declarations"]
        C1["CONST: AiTaskDataSchema, VALUE: z.object({"]
        C2["CONST: isMCP, VALUE: !!mcpLog"]
        C3["CONST: logFn, VALUE: isMCP"]
        C4["CONST: normalizedPriority, VALUE: normalizeTaskPriority(priority)"]
        C5["CONST: report, VALUE: (message, level = 'info') => {"]
        C6["CONST: task, VALUE: tasks.find((t) => t.id === taskId)"]
        C7["CONST: dependencyData, VALUE: []"]
        C8["CONST: depData, VALUE: buildDependencyGraph("]
        C9["CONST: targetTag, VALUE: tag"]
        C10["CONST: allTasks, VALUE: getAllTasks(rawData)"]
        C11["CONST: tasksInTargetTag, VALUE: rawData[targetTag].tasks"]
        C12["CONST: highestId, VALUE: tasksInTargetTag.length > 0"]
        C13["CONST: newTaskId, VALUE: highestId + 1"]
        C14["CONST: invalidDeps, VALUE: dependencies.filter((depId) => {"]
        C15["CONST: numDepId, VALUE: parseInt(depId, 10)"]
        C16["CONST: numericDependencies, VALUE: dependencies.map((dep) => parseInt(dep, 10))"]
        C17["CONST: dependencyGraphs, VALUE: []"]
        C18["CONST: allRelatedTaskIds, VALUE: new Set()"]
        C19["CONST: depthMap, VALUE: new Map()"]
        C20["CONST: graph, VALUE: buildDependencyGraph(allTasks, depId, new Set(), depthMap)"]
        C21["CONST: contextGatherer, VALUE: new ContextGatherer(projectRoot, tag)"]
        C22["CONST: gatherResult, VALUE: await contextGatherer.gather({"]
        C23["CONST: gatheredContext, VALUE: gatherResult.context"]
        C24["CONST: analysisData, VALUE: gatherResult.analysisData"]
        C25["CONST: promptManager, VALUE: getPromptManager()"]
        C26["CONST: serviceRole, VALUE: useResearch ? 'research' : 'main'"]
        C27["CONST: newTask, VALUE: {"]
        C28["CONST: allValidDeps, VALUE: taskData.dependencies.every((depId) => {"]
        C29["CONST: numDepId, VALUE: parseInt(depId, 10)"]
        C30["CONST: numDepId, VALUE: parseInt(depId, 10)"]
        C31["CONST: table, VALUE: new Table({"]
        C32["CONST: getPriorityColor, VALUE: (p) => {"]
        C33["CONST: aiAddedDeps, VALUE: newTask.dependencies.filter("]
        C34["CONST: aiRemovedDeps, VALUE: numericDependencies.filter("]
        C35["CONST: depTitles, VALUE: {}"]
        C36["CONST: depTask, VALUE: allTasks.find((t) => t.id === dep)"]
        C37["CONST: isAiAdded, VALUE: aiAddedDeps.includes(dep)"]
        C38["CONST: depType, VALUE: isAiAdded ? chalk.yellow(' (AI suggested)') : ''"]
        C39["CONST: depTask, VALUE: allTasks.find((t) => t.id === dep)"]
        C40["CONST: title, VALUE: depTask ? truncate(depTask.title, 30) : 'Unknown task'"]
    end
    subgraph ExecutionFlow["Execution Flow"]
        FL1["Identify and load dependencies and modules"]
        FL2["Define functions and core logic for this module"]
        FL3["Expose public API via exports"]
    end
    subgraph FileName["add-task.js"]
        Imports
        Dependencies
        FunctionsDefined
        Exports
        Parameters
        Constants
        ExecutionFlow
    end
    FL1 --> FL2
    FL2 --> FL3
```