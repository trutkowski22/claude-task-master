```mermaid
flowchart TB
    subgraph Imports["Imports"]
        I1["IMPORT: path, FROM: path"]
        I2["IMPORT: fs, FROM: fs"]
        I3["IMPORT: ../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        I4["IMPORT: ./base-profile.js, FROM: /claude-task-master/src/profiles/base-profile.js"]
        I5["IMPORT: ../constants/profiles.js, FROM: /claude-task-master/src/constants/profiles.js"]
    end
    subgraph Dependencies["Dependencies"]
        D1["DEP: File system"]
        D2["DEP: Path resolution"]
    end
    subgraph FunctionsDefined["Functions Defined"]
        FU1["FUNCTION: onAddRulesProfile"]
        FU2["FUNCTION: copyRecursiveSync"]
        FU3["FUNCTION: onRemoveRulesProfile"]
        FU4["FUNCTION: onPostConvertRulesProfile"]
    end
    subgraph Exports["Exports"]
        E1["EXP: rooProfile"]
        E2["EXP: onAddRulesProfile"]
        E3["EXP: onRemoveRulesProfile"]
        E4["EXP: onPostConvertRulesProfile"]
    end
    subgraph Constants["Const Declarations"]
        C1["CONST: sourceDir, VALUE: path.join(assetsDir, 'roocode')"]
        C2["CONST: rooModesDir, VALUE: path.join(sourceDir, '.roo')"]
        C3["CONST: roomodesSrc, VALUE: path.join(sourceDir, '.roomodes')"]
        C4["CONST: roomodesDest, VALUE: path.join(targetDir, '.roomodes')"]
        C5["CONST: src, VALUE: path.join(rooModesDir, `rules-${mode}`, `${mode}-rules`)"]
        C6["CONST: dest, VALUE: path.join(targetDir, '.roo', `rules-${mode}`, `${mode}-rules`)"]
        C7["CONST: destDir, VALUE: path.dirname(dest)"]
        C8["CONST: exists, VALUE: fs.existsSync(src)"]
        C9["CONST: stats, VALUE: exists && fs.statSync(src)"]
        C10["CONST: isDirectory, VALUE: exists && stats.isDirectory()"]
        C11["CONST: roomodesPath, VALUE: path.join(targetDir, '.roomodes')"]
        C12["CONST: rooDir, VALUE: path.join(targetDir, '.roo')"]
        C13["CONST: modeDir, VALUE: path.join(rooDir, entry)"]
        C14["CONST: rooProfile, VALUE: createProfile({"]
    end
    subgraph ExecutionFlow["Execution Flow"]
        FL1["Identify and load dependencies and modules"]
        FL2["Define functions and core logic for this module"]
        FL3["Expose public API via exports"]
    end
    subgraph FileName["roo.js"]
        Imports
        Dependencies
        FunctionsDefined
        Exports
        Constants
        ExecutionFlow
    end
    FL1 --> FL2
    FL2 --> FL3
```