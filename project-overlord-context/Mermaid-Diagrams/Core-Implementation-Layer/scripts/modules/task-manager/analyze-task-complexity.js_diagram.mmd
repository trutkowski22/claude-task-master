```mermaid
flowchart TB
    subgraph Imports["Imports"]
        I1["IMPORT: chalk, FROM: chalk"]
        I2["IMPORT: boxen, FROM: boxen"]
        I3["IMPORT: readline, FROM: readline"]
        I4["IMPORT: fs, FROM: fs"]
        I5["IMPORT: ../utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        I6["IMPORT: ../ai-services-unified.js, FROM: /claude-task-master/scripts/modules/ai-services-unified.js"]
        I7["IMPORT: ../prompt-manager.js, FROM: /claude-task-master/scripts/modules/prompt-manager.js"]
        I8["IMPORT: ../../../src/constants/providers.js, FROM: /claude-task-master/src/constants/providers.js"]
        I9["IMPORT: ../../../src/utils/path-utils.js, FROM: /claude-task-master/src/utils/path-utils.js"]
        I10["IMPORT: ../utils/contextGatherer.js, FROM: /claude-task-master/scripts/modules/utils/contextGatherer.js"]
        I11["IMPORT: ../utils/fuzzyTaskSearch.js, FROM: /claude-task-master/scripts/modules/utils/fuzzyTaskSearch.js"]
        I12["IMPORT: ../utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
    end
    subgraph Dependencies["Dependencies"]
        D1["DEP: File system"]
        D2["DEP: Path resolution"]
    end
    subgraph FunctionsDefined["Functions Defined"]
        FU1["FUNCTION: generateInternalComplexityAnalysisPrompt"]
        FU2["FUNCTION: analyzeTaskComplexity"]
        FU3["FUNCTION: reportLog"]
    end
    subgraph Exports["Exports"]
        E1["EXP: analyzeTaskComplexity"]
    end
    subgraph Parameters["Parameters"]
        P1["PARAM: {Object} tasksData - The tasks data object."]
        P2["PARAM: {string} [gatheredContext] - The gathered context for the analysis."]
        P3["PARAM: {string} options.file - Path to tasks file"]
        P4["PARAM: {string} options.output - Path to report output file"]
        P5["PARAM: {string|number} [options.threshold] - Complexity threshold"]
        P6["PARAM: {boolean} [options.research] - Use research role"]
        P7["PARAM: {string} [options.projectRoot] - Project root path (for MCP/env fallback)."]
        P8["PARAM: {string} [options.tag] - Tag for the task"]
        P9["PARAM: {string} [options.id] - Comma-separated list of task IDs to analyze specifically"]
        P10["PARAM: {number} [options.from] - Starting task ID in a range to analyze"]
        P11["PARAM: {number} [options.to] - Ending task ID in a range to analyze"]
        P12["PARAM: {Object} [options._filteredTasksData] - Pre-filtered task data (internal use)"]
        P13["PARAM: {number} [options._originalTaskCount] - Original task count (internal use)"]
        P14["PARAM: {Object} context - Context object, potentially containing session and mcpLog"]
        P15["PARAM: {Object} [context.session] - Session object from MCP server (optional)"]
        P16["PARAM: {Object} [context.mcpLog] - MCP logger object (optional)"]
        P17["PARAM: {function} [context.reportProgress] - Deprecated: Function to report progress (ignored)"]
    end
    subgraph Constants["Const Declarations"]
        C1["CONST: tasksString, VALUE: JSON.stringify(tasksData.tasks, null, 2)"]
        C2["CONST: tasksPath, VALUE: options.file || LEGACY_TASKS_FILE"]
        C3["CONST: thresholdScore, VALUE: parseFloat(options.threshold || '5')"]
        C4["CONST: useResearch, VALUE: options.research || false"]
        C5["CONST: projectRoot, VALUE: options.projectRoot"]
        C6["CONST: tag, VALUE: options.tag"]
        C7["CONST: specificIds, VALUE: options.id"]
        C8["CONST: fromId, VALUE: options.from !== undefined ? parseInt(options.from, 10) : null"]
        C9["CONST: toId, VALUE: options.to !== undefined ? parseInt(options.to, 10) : null"]
        C10["CONST: outputFormat, VALUE: mcpLog ? 'json' : 'text'"]
        C11["CONST: reportLog, VALUE: (message, level = 'info') => {"]
        C12["CONST: outputPath, VALUE: resolveComplexityReportOutputPath("]
        C13["CONST: activeStatuses, VALUE: ['pending', 'blocked', 'in-progress']"]
        C14["CONST: foundIds, VALUE: filteredTasks.map((t) => t.id)"]
        C15["CONST: missingIds, VALUE: specificIds.filter("]
        C16["CONST: effectiveFromId, VALUE: fromId !== null ? fromId : 1"]
        C17["CONST: effectiveToId, VALUE: toId !== null"]
        C18["CONST: contextGatherer, VALUE: new ContextGatherer(projectRoot, tag)"]
        C19["CONST: allTasksFlat, VALUE: flattenTasksWithSubtasks(originalData.tasks)"]
        C20["CONST: fuzzySearch, VALUE: new FuzzyTaskSearch("]
        C21["CONST: searchQuery, VALUE: tasksData.tasks"]
        C22["CONST: searchResults, VALUE: fuzzySearch.findRelevantTasks(searchQuery, {"]
        C23["CONST: relevantTaskIds, VALUE: fuzzySearch.getTaskIds(searchResults)"]
        C24["CONST: contextResult, VALUE: await contextGatherer.gather({"]
        C25["CONST: skippedCount, VALUE: originalTaskCount - tasksData.tasks.length"]
        C26["CONST: filterMsg, VALUE: specificIds"]
        C27["CONST: skipMessage, VALUE: `Skipping ${skippedCount} tasks marked as done/cancelled/deferred. Analyzing ${tasksData.tasks.length} active tasks.`"]
        C28["CONST: existingAnalysisMap, VALUE: new Map()"]
        C29["CONST: emptyReport, VALUE: {"]
        C30["CONST: highComplexity, VALUE: 0"]
        C31["CONST: mediumComplexity, VALUE: 0"]
        C32["CONST: lowComplexity, VALUE: 0"]
        C33["CONST: totalAnalyzed, VALUE: 0"]
        C34["CONST: promptManager, VALUE: getPromptManager()"]
        C35["CONST: currentProvider, VALUE: useResearch"]
        C36["CONST: isClaudeCode, VALUE: currentProvider === CUSTOM_PROVIDERS.CLAUDE_CODE"]
        C37["CONST: promptParams, VALUE: {"]
        C38["CONST: role, VALUE: useResearch ? 'research' : 'main'"]
        C39["CONST: codeBlockMatch, VALUE: cleanedResponse.match("]
        C40["CONST: firstBracket, VALUE: cleanedResponse.indexOf('[')"]
        C41["CONST: lastBracket, VALUE: cleanedResponse.lastIndexOf(']')"]
        C42["CONST: taskIds, VALUE: tasksData.tasks.map((t) => t.id)"]
        C43["CONST: analysisTaskIds, VALUE: complexityAnalysis.map((a) => a.taskId)"]
        C44["CONST: missingTaskIds, VALUE: taskIds.filter("]
        C45["CONST: missingTask, VALUE: tasksData.tasks.find((t) => t.id === missingId)"]
        C46["CONST: analyzedTaskIds, VALUE: new Set("]
        C47["CONST: currentTagTaskIds, VALUE: new Set(tasksData.tasks.map((t) => t.id))"]
        C48["CONST: existingEntriesNotAnalyzed, VALUE: existingReport.complexityAnalysis.filter("]
        C49["CONST: report, VALUE: {"]
        C50["CONST: highComplexity, VALUE: complexityAnalysis.filter("]
        C51["CONST: mediumComplexity, VALUE: complexityAnalysis.filter("]
        C52["CONST: lowComplexity, VALUE: complexityAnalysis.filter("]
        C53["CONST: totalAnalyzed, VALUE: complexityAnalysis.length"]
    end
    subgraph ExecutionFlow["Execution Flow"]
        FL1["Identify and load dependencies and modules"]
        FL2["Define functions and core logic for this module"]
        FL3["Expose public API via exports"]
    end
    subgraph FileName["analyze-task-complexity.js"]
        Imports
        Dependencies
        FunctionsDefined
        Exports
        Parameters
        Constants
        ExecutionFlow
    end
    FL1 --> FL2
    FL2 --> FL3
```