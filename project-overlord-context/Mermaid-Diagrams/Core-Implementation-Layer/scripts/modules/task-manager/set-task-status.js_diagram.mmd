```mermaid
flowchart TB
    subgraph Imports["Imports"]
        I1["IMPORT: path, FROM: path"]
        I2["IMPORT: chalk, FROM: chalk"]
        I3["IMPORT: boxen, FROM: boxen"]
        I4["IMPORT: ../ui.js, FROM: /claude-task-master/scripts/modules/ui.js"]
        I5["IMPORT: ../dependency-manager.js, FROM: /claude-task-master/scripts/modules/dependency-manager.js"]
        I6["IMPORT: ../config-manager.js, FROM: /claude-task-master/scripts/modules/config-manager.js"]
        I7["IMPORT: ./update-single-task-status.js, FROM: /claude-task-master/scripts/modules/task-manager/update-single-task-status.js"]
        I8["IMPORT: ./generate-task-files.js, FROM: /claude-task-master/scripts/modules/task-manager/generate-task-files.js"]
    end
    subgraph Dependencies["Dependencies"]
        D1["DEP: Path resolution"]
    end
    subgraph FunctionsDefined["Functions Defined"]
        FU1["FUNCTION: setTaskStatus"]
    end
    subgraph Exports["Exports"]
        E1["EXP: setTaskStatus"]
    end
    subgraph Parameters["Parameters"]
        P1["PARAM: {string} tasksPath - Path to the tasks.json file"]
        P2["PARAM: {string} taskIdInput - Task ID(s) to update"]
        P3["PARAM: {string} newStatus - New status"]
        P4["PARAM: {Object} options - Additional options (mcpLog for MCP mode, projectRoot for tag resolution)"]
        P5["PARAM: {string} [options.projectRoot] - Project root path"]
        P6["PARAM: {string} [options.tag] - Optional tag to override current tag resolution"]
        P7["PARAM: {string} [options.mcpLog] - MCP logger object"]
    end
    subgraph Constants["Const Declarations"]
        C1["CONST: isMcpMode, VALUE: !!options?.mcpLog"]
        C2["CONST: data, VALUE: {"]
        C3["CONST: taskIds, VALUE: taskIdInput.split(',').map((id) => id.trim())"]
        C4["CONST: updatedTasks, VALUE: []"]
        C5["CONST: parentTask, VALUE: data.tasks.find((t) => t.id === parentId)"]
        C6["CONST: subtask, VALUE: parentTask.subtasks.find((st) => st.id === subtaskId)"]
        C7["CONST: taskId, VALUE: parseInt(id, 10)"]
        C8["CONST: task, VALUE: data.tasks.find((t) => t.id === taskId)"]
    end
    subgraph ExecutionFlow["Execution Flow"]
        FL1["Identify and load dependencies and modules"]
        FL2["Define functions and core logic for this module"]
        FL3["Expose public API via exports"]
    end
    subgraph FileName["set-task-status.js"]
        Imports
        Dependencies
        FunctionsDefined
        Exports
        Parameters
        Constants
        ExecutionFlow
    end
    FL1 --> FL2
    FL2 --> FL3
```