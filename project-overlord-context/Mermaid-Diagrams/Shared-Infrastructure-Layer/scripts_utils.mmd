flowchart TB
    subgraph ["utils-Imports"]
        I1["IMPORT: fs, FROM: fs"]
        I2["IMPORT: path, FROM: path"]
        I3["IMPORT: chalk, FROM: chalk"]
        I4["IMPORT: dotenv, FROM: dotenv"]
        I5["IMPORT: getLogLevel, getDebugFlag, FROM: /claude-task-master/scripts/modules/config-manager.js"]
        I6["IMPORT: *, FROM: /claude-task-master/scripts/modules/utils/git-utils.js"]
        I7["IMPORT: COMPLEXITY_REPORT_FILE, LEGACY_COMPLEXITY_REPORT_FILE, LEGACY_CONFIG_FILE, FROM: /claude-task-master/src/constants/paths.js"]
    end
    subgraph ["utils-Dependencies"]
        D1["DEP: Node.js file system and path modules"]
        D2["DEP: Chalk for colored output"]
        D3["DEP: Dotenv for environment variable parsing"]
        D4["DEP: Configuration management"]
        D5["DEP: Git utilities"]
    end
    subgraph ["utils-FunctionsDefined"]
        FU1["FUNCTION: resolveEnvVariable"]
        FU2["FUNCTION: slugifyTagForFilePath"]
        FU3["FUNCTION: getTagAwareFilePath"]
        FU4["FUNCTION: findProjectRoot"]
        FU5["FUNCTION: getTaskManager"]
        FU6["FUNCTION: enableSilentMode"]
        FU7["FUNCTION: disableSilentMode"]
        FU8["FUNCTION: isSilentMode"]
        FU9["FUNCTION: log"]
        FU10["FUNCTION: hasTaggedStructure"]
        FU11["FUNCTION: normalizeTaskIds"]
        FU12["FUNCTION: readJSON"]
        FU13["FUNCTION: performCompleteTagMigration"]
        FU14["FUNCTION: migrateConfigJson"]
        FU15["FUNCTION: createStateJson"]
        FU16["FUNCTION: markMigrationForNotice"]
        FU17["FUNCTION: writeJSON"]
        FU18["FUNCTION: sanitizePrompt"]
        FU19["FUNCTION: readComplexityReport"]
        FU20["FUNCTION: findTaskInComplexityReport"]
        FU21["FUNCTION: taskExists"]
        FU22["FUNCTION: formatTaskId"]
        FU23["FUNCTION: findTaskById"]
        FU24["FUNCTION: truncate"]
        FU25["FUNCTION: isEmpty"]
        FU26["FUNCTION: findCycles"]
        FU27["FUNCTION: toKebabCase"]
        FU28["FUNCTION: detectCamelCaseFlags"]
        FU29["FUNCTION: addComplexityToTask"]
        FU30["FUNCTION: aggregateTelemetry"]
        FU31["FUNCTION: getCurrentTag"]
        FU32["FUNCTION: resolveTag"]
        FU33["FUNCTION: getTasksForTag"]
        FU34["FUNCTION: setTasksForTag"]
        FU35["FUNCTION: flattenTasksWithSubtasks"]
        FU36["FUNCTION: ensureTagMetadata"]
    end
    subgraph ["utils-Exports"]
        E1["EXP: LOG_LEVELS"]
        E2["EXP: log"]
        E3["EXP: readJSON"]
        E4["EXP: writeJSON"]
        E5["EXP: sanitizePrompt"]
        E6["EXP: readComplexityReport"]
        E7["EXP: findTaskInComplexityReport"]
        E8["EXP: taskExists"]
        E9["EXP: formatTaskId"]
        E10["EXP: findTaskById"]
        E11["EXP: truncate"]
        E12["EXP: isEmpty"]
        E13["EXP: findCycles"]
        E14["EXP: toKebabCase"]
        E15["EXP: detectCamelCaseFlags"]
        E16["EXP: disableSilentMode"]
        E17["EXP: enableSilentMode"]
        E18["EXP: getTaskManager"]
        E19["EXP: isSilentMode"]
        E20["EXP: addComplexityToTask"]
        E21["EXP: resolveEnvVariable"]
        E22["EXP: findProjectRoot"]
        E23["EXP: getTagAwareFilePath"]
        E24["EXP: slugifyTagForFilePath"]
        E25["EXP: aggregateTelemetry"]
        E26["EXP: getCurrentTag"]
        E27["EXP: resolveTag"]
        E28["EXP: getTasksForTag"]
        E29["EXP: setTasksForTag"]
        E30["EXP: performCompleteTagMigration"]
        E31["EXP: migrateConfigJson"]
        E32["EXP: createStateJson"]
        E33["EXP: markMigrationForNotice"]
        E34["EXP: flattenTasksWithSubtasks"]
        E35["EXP: ensureTagMetadata"]
        E36["EXP: normalizeTaskIds"]
    end
    subgraph ["utils-Parameters"]
        P1["PARAM: {string} key - The environment variable key"]
        P2["PARAM: {object|null} [session=null] - The MCP session object"]
        P3["PARAM: {string|null} [projectRoot=null] - The project root directory"]
        P4["PARAM: {string} tagName - The tag name to slugify"]
        P5["PARAM: {string} basePath - The base file path"]
        P6["PARAM: {string|null} tag - The tag name"]
        P7["PARAM: {string} [startDir=process.cwd()] - The directory to start searching from"]
        P8["PARAM: {string[]} [markers] - Marker files/dirs to look for"]
        P9["PARAM: {string} level - The log level"]
        P10["PARAM: {Object} data - The data object to check"]
        P11["PARAM: {Array} tasks - Array of tasks to normalize"]
        P12["PARAM: {string} filepath - Path to the JSON file"]
    end
    subgraph ["utils-Constants"]
        C1["CONST: silentMode, VALUE: Global silent mode flag (false)"]
        C2["CONST: LOG_LEVELS, VALUE: Object mapping log levels to numbers"]
        C3["CONST: parsedEnv, VALUE: Parsed environment variables from .env file"]
        C4["CONST: slugifiedTag, VALUE: Filesystem-safe tag name"]
        C5["CONST: taggedPath, VALUE: Tag-specific file path"]
        C6["CONST: projectRoot, VALUE: Resolved project root directory"]
        C7["CONST: normalizedTasks, VALUE: Tasks with normalized ID format"]
        C8["CONST: taskExists, VALUE: Boolean indicating task existence"]
        C9["CONST: telemetryData, VALUE: Aggregated usage statistics"]
    end
    subgraph ["utils-ExecutionFlow"]
        FL1["Resolve environment variables from session, .env file, or process.env"]
        FL2["Manage tag-aware file paths with filesystem-safe naming"]
        FL3["Find project root using marker files like package.json or .git"]
        FL4["Handle silent mode and logging with configurable levels"]
        FL5["Manage JSON file operations with tag-aware path resolution"]
        FL6["Perform tag-based data migration and structure conversion"]
        FL7["Provide task existence checks and ID formatting utilities"]
        FL8["Handle complexity report operations and task analysis"]
        FL9["Support string manipulation and validation utilities"]
        FL10["Export comprehensive utility function library"]
    end
    subgraph ["utils.js"]
        ["utils-Imports"]
        ["utils-Dependencies"]
        ["utils-FunctionsDefined"]
        ["utils-Exports"]
        ["utils-Parameters"]
        ["utils-Constants"]
        ["utils-ExecutionFlow"]
    end
    FL1 --> FL2
    FL2 --> FL3
    FL3 --> FL4
    FL4 --> FL5
    FL5 --> FL6
    FL6 --> FL7
    FL7 --> FL8
    FL8 --> FL9
    FL9 --> FL10