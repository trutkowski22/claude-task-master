flowchart TB
    subgraph Imports["Imports"]
        I1["IMPORT: spawnSync, FROM: child_process"]
        I2["IMPORT: path, FROM: path"]
        I3["IMPORT: fs, FROM: fs"]
        I4["IMPORT: contextManager, FROM: ../core/context-manager.js"]
        I5["IMPORT: fileURLToPath, FROM: url"]
        I6["IMPORT: getCurrentTag, FROM: ../../../scripts/modules/utils.js"]
        I7["IMPORT: lastFoundProjectRoot, FROM: ../core/utils/path-utils.js"]
        I8["IMPORT: PROJECT_MARKERS, FROM: ../core/utils/path-utils.js"]
    end
    
    subgraph Dependencies["Dependencies"]
        D1["DEP: Node.js child process for executing task-master CLI commands"]
        D2["DEP: Node.js file system for path validation and reading"]
        D3["DEP: FastMCP server framework for tool registration and responses"]
        D4["DEP: Task Master CLI or local script for command execution"]
    end
    
    subgraph FunctionsDefined["Functions Defined"]
        FU1["FUNCTION: getVersionInfo"]
        FU2["FUNCTION: getTagInfo"]
        FU3["FUNCTION: getProjectRoot"]
        FU4["FUNCTION: getProjectRootFromSession"]
        FU5["FUNCTION: handleApiResult"]
        FU6["FUNCTION: executeTaskMasterCommand"]
        FU7["FUNCTION: getCachedOrExecute"]
        FU8["FUNCTION: processMCPResponseData"]
        FU9["FUNCTION: createContentResponse"]
        FU10["FUNCTION: createErrorResponse"]
        FU11["FUNCTION: createLogWrapper"]
        FU12["FUNCTION: normalizeProjectRoot"]
        FU13["FUNCTION: getRawProjectRootFromSession"]
        FU14["FUNCTION: withNormalizedProjectRoot"]
    end
    
    subgraph Exports["Exports"]
        E1["EXP: getProjectRoot"]
        E2["EXP: getProjectRootFromSession"]
        E3["EXP: getTagInfo"]
        E4["EXP: handleApiResult"]
        E5["EXP: executeTaskMasterCommand"]
        E6["EXP: getCachedOrExecute"]
        E7["EXP: processMCPResponseData"]
        E8["EXP: createContentResponse"]
        E9["EXP: createErrorResponse"]
        E10["EXP: createLogWrapper"]
        E11["EXP: normalizeProjectRoot"]
        E12["EXP: getRawProjectRootFromSession"]
        E13["EXP: withNormalizedProjectRoot"]
    end
    
    subgraph Parameters["Parameters"]
        P1["PARAM: {Object} result - Result object from API call with success, data, and error properties"]
        P2["PARAM: {Object} log - Logger object"]
        P3["PARAM: {string} errorPrefix - Prefix for error messages"]
        P4["PARAM: {Function} processFunction - Optional function to process successful result data"]
        P5["PARAM: {string} projectRoot - The project root directory"]
        P6["PARAM: {string} command - The command to execute"]
        P7["PARAM: {Array} args - Arguments for the command"]
        P8["PARAM: {string} cacheKey - The unique key for caching this operation's result"]
        P9["PARAM: {Function} actionFn - The async function to execute if the cache misses"]
        P10["PARAM: {Object|Array} taskOrData - A single task object or a data object containing a 'tasks' array"]
        P11["PARAM: {string[]} fieldsToRemove - An array of field names to remove"]
        P12["PARAM: {string|Object} content - Content to include in response"]
        P13["PARAM: {string} errorMessage - Error message to include in response"]
        P14["PARAM: {string|undefined|null} rawPath - The raw project root path"]
        P15["PARAM: {Object} session - The MCP session object"]
        P16["PARAM: {Function} executeFn - The original async execute function"]
    end
    
    subgraph Constants["Const Declarations"]
        C1["CONST: __filename, VALUE: fileURLToPath result"]
        C2["CONST: cachedVersionInfo, VALUE: null or version information cache"]
        C3["CONST: packageJsonPath, VALUE: path to package.json file"]
        C4["CONST: packageJson, VALUE: parsed package.json content"]
        C5["CONST: currentTag, VALUE: getCurrentTag result"]
        C6["CONST: availableTags, VALUE: extracted tag keys from tasks.json"]
        C7["CONST: tasksJsonPath, VALUE: path to tasks.json file"]
        C8["CONST: tasksData, VALUE: parsed tasks.json content"]
        C9["CONST: tagKeys, VALUE: filtered object keys from tasks data"]
        C10["CONST: versionInfo, VALUE: getVersionInfo result"]
        C11["CONST: tagInfo, VALUE: getTagInfo result"]
        C12["CONST: processedData, VALUE: processFunction result"]
        C13["CONST: responsePayload, VALUE: formatted response object"]
        C14["CONST: cwd, VALUE: getProjectRoot result"]
        C15["CONST: fullArgs, VALUE: command and arguments array"]
        C16["CONST: spawnOptions, VALUE: spawn configuration object"]
        C17["CONST: result, VALUE: spawnSync execution result"]
        C18["CONST: cachedResult, VALUE: contextManager.getCachedData result"]
        C19["CONST: processSingleTask, VALUE: helper function for processing task objects"]
        C20["CONST: processArrayOfTasks, VALUE: helper function for processing task arrays"]
        C21["CONST: pathString, VALUE: normalized path string"]
        C22["CONST: resolvedPath, VALUE: path.resolve result"]
        C23["CONST: normalizedRoot, VALUE: normalized project root path"]
        C24["CONST: rootSource, VALUE: source description for project root"]
        C25["CONST: updatedArgs, VALUE: args with normalized project root"]
    end
    
    subgraph EnvironmentVariables["Environment Variables"]
        ENV1["ENV: TASK_MASTER_PROJECT_ROOT, USAGE: override for project root path detection"]
    end
    
    subgraph ExecutionFlow["Execution Flow"]
        FL1["Provide version information retrieval with caching"]
        FL2["Extract current tag and available tags from project"]
        FL3["Determine project root using precedence order"]
        FL4["Extract project root from MCP session with fallbacks"]
        FL5["Handle API results with standardized formatting"]
        FL6["Execute task-master CLI commands with proper environment"]
        FL7["Implement caching mechanism for expensive operations"]
        FL8["Process MCP response data by removing sensitive fields"]
        FL9["Create standardized content and error responses"]
        FL10["Provide logger wrapper for core function compatibility"]
        FL11["Normalize project root paths from various formats"]
        FL12["Wrap tool execute functions with project root normalization"]
    end
    
    subgraph utils["utils.js"]
        Imports
        Dependencies
        FunctionsDefined
        Exports
        Parameters
        Constants
        EnvironmentVariables
        ExecutionFlow
    end
    
    FL1 --> FL2
    FL2 --> FL3
    FL3 --> FL4
    FL4 --> FL5
    FL5 --> FL6
    FL6 --> FL7
    FL7 --> FL8
    FL8 --> FL9
    FL9 --> FL10
    FL10 --> FL11
    FL11 --> FL12