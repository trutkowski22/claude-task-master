```mermaid
flowchart TB
    subgraph Imports["Imports"]
        I1["IMPORT: child_process, FROM: child_process"]
        I2["IMPORT: path, FROM: path"]
        I3["IMPORT: fs, FROM: fs"]
        I4["IMPORT: ../core/context-manager.js, FROM: /claude-task-master/mcp-server/src/core/context-manager.js"]
        I5["IMPORT: url, FROM: url"]
        I6["IMPORT: ../../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
    end
    subgraph Dependencies["Dependencies"]
        D1["DEP: FastMCP"]
        D2["DEP: File system"]
        D3["DEP: Path resolution"]
    end
    subgraph FunctionsDefined["Functions Defined"]
        FU1["FUNCTION: getVersionInfo"]
        FU2["FUNCTION: getTagInfo"]
        FU3["FUNCTION: getProjectRoot"]
        FU4["FUNCTION: getProjectRootFromSession"]
        FU5["FUNCTION: handleApiResult"]
        FU6["FUNCTION: executeTaskMasterCommand"]
        FU7["FUNCTION: getCachedOrExecute"]
        FU8["FUNCTION: processMCPResponseData"]
        FU9["FUNCTION: createContentResponse"]
        FU10["FUNCTION: createErrorResponse"]
        FU11["FUNCTION: createLogWrapper"]
        FU12["FUNCTION: normalizeProjectRoot"]
        FU13["FUNCTION: getRawProjectRootFromSession"]
        FU14["FUNCTION: withNormalizedProjectRoot"]
        FU15["FUNCTION: processSingleTask"]
        FU16["FUNCTION: processArrayOfTasks"]
    end
    subgraph Exports["Exports"]
        E1["EXP: getProjectRoot"]
        E2["EXP: getProjectRootFromSession"]
        E3["EXP: getTagInfo"]
        E4["EXP: handleApiResult"]
        E5["EXP: executeTaskMasterCommand"]
        E6["EXP: getCachedOrExecute"]
        E7["EXP: processMCPResponseData"]
        E8["EXP: createContentResponse"]
        E9["EXP: createErrorResponse"]
        E10["EXP: createLogWrapper"]
        E11["EXP: normalizeProjectRoot"]
        E12["EXP: getRawProjectRootFromSession"]
        E13["EXP: withNormalizedProjectRoot"]
    end
    subgraph Parameters["Parameters"]
        P1["PARAM: {string} projectRoot - The project root directory"]
        P2["PARAM: {Object} log - Logger object"]
        P3["PARAM: {string|undefined} projectRootRaw - Raw project root from arguments"]
        P4["PARAM: {Object} log - Logger object"]
        P5["PARAM: {Object} session - The MCP session object."]
        P6["PARAM: {Object} log - The MCP logger object."]
        P7["PARAM: {Object} result - Result object from API call with success, data, and error properties"]
        P8["PARAM: {Object} log - Logger object"]
        P9["PARAM: {string} errorPrefix - Prefix for error messages"]
        P10["PARAM: {Function} processFunction - Optional function to process successful result data"]
        P11["PARAM: {string} [projectRoot] - Optional project root for tag information"]
        P12["PARAM: {string} command - The command to execute (e.g., 'add-task')"]
        P13["PARAM: {Object} log - Logger instance"]
        P14["PARAM: {Array} args - Arguments for the command"]
        P15["PARAM: {string|undefined} projectRootRaw - Optional raw project root path (will be normalized internally)"]
        P16["PARAM: {Object|null} customEnv - Optional object containing environment variables to pass to the child process"]
        P17["PARAM: {Object} options - Configuration options."]
        P18["PARAM: {string} options.cacheKey - The unique key for caching this operation's result."]
        P19["PARAM: {Function} options.actionFn - The async function to execute if the cache misses."]
        P20["PARAM: {Object} options.log - The logger instance."]
        P21["PARAM: {Object|Array} taskOrData - A single task object or a data object containing a 'tasks' array."]
        P22["PARAM: {string[]} fieldsToRemove - An array of field names to remove."]
        P23["PARAM: {string|Object} content - Content to include in response"]
        P24["PARAM: {string} errorMessage - Error message to include in response"]
        P25["PARAM: {Object} [versionInfo] - Optional version information object"]
        P26["PARAM: {Object} [tagInfo] - Optional tag information object"]
        P27["PARAM: {Object} log - The MCP logger instance."]
        P28["PARAM: {string | undefined | null} rawPath - The raw project root path."]
        P29["PARAM: {object} [log] - Optional logger object."]
        P30["PARAM: {Object} session - The MCP session object."]
        P31["PARAM: {Object} log - The MCP logger object."]
        P32["PARAM: {Function} executeFn - The original async execute(args, context) function."]
    end
    subgraph Constants["Const Declarations"]
        C1["CONST: __filename, VALUE: fileURLToPath(import.meta.url)"]
        C2["CONST: packageJsonPath, VALUE: path.join("]
        C3["CONST: packageJson, VALUE: JSON.parse(fs.readFileSync(packageJsonPath, 'utf-8'))"]
        C4["CONST: currentTag, VALUE: getCurrentTag(projectRoot)"]
        C5["CONST: tasksJsonPath, VALUE: path.join("]
        C6["CONST: tasksData, VALUE: JSON.parse(fs.readFileSync(tasksJsonPath, 'utf-8'))"]
        C7["CONST: tagKeys, VALUE: Object.keys(tasksData).filter("]
        C8["CONST: envRoot, VALUE: process.env.TASK_MASTER_PROJECT_ROOT"]
        C9["CONST: absolutePath, VALUE: path.isAbsolute(envRoot)"]
        C10["CONST: absolutePath, VALUE: path.isAbsolute(projectRootRaw)"]
        C11["CONST: currentDir, VALUE: process.cwd()"]
        C12["CONST: markerPath, VALUE: path.join(currentDir, marker)"]
        C13["CONST: normalizedSlashes, VALUE: decodedPath.replace(/\\\\/g, '/')"]
        C14["CONST: cwd, VALUE: process.cwd()"]
        C15["CONST: serverPath, VALUE: process.argv[1]"]
        C16["CONST: mcpServerIndex, VALUE: serverPath.indexOf('mcp-server')"]
        C17["CONST: projectRoot, VALUE: path.dirname("]
        C18["CONST: cwd, VALUE: process.cwd()"]
        C19["CONST: versionInfo, VALUE: getVersionInfo()"]
        C20["CONST: tagInfo, VALUE: projectRoot ? getTagInfo(projectRoot, log) : null"]
        C21["CONST: errorMsg, VALUE: result.error?.message || `Unknown ${errorPrefix}`"]
        C22["CONST: processedData, VALUE: processFunction"]
        C23["CONST: responsePayload, VALUE: {"]
        C24["CONST: cwd, VALUE: getProjectRoot(projectRootRaw, log)"]
        C25["CONST: fullArgs, VALUE: [command, ...args]"]
        C26["CONST: spawnOptions, VALUE: {"]
        C27["CONST: errorOutput, VALUE: result.stderr"]
        C28["CONST: cachedResult, VALUE: contextManager.getCachedData(cacheKey)"]
        C29["CONST: result, VALUE: await actionFn()"]
        C30["CONST: processSingleTask, VALUE: (task) => {"]
        C31["CONST: processedTask, VALUE: { ...task }"]
        C32["CONST: processArrayOfTasks, VALUE: (tasks) => {"]
        C33["CONST: resolvedPath, VALUE: path.resolve(pathString)"]
        C34["CONST: envRoot, VALUE: process.env.TASK_MASTER_PROJECT_ROOT"]
        C35["CONST: envRoot, VALUE: session.env.TASK_MASTER_PROJECT_ROOT"]
        C36["CONST: sessionRoot, VALUE: getProjectRootFromSession(session, log)"]
        C37["CONST: updatedArgs, VALUE: { ...args, projectRoot: normalizedRoot }"]
    end
    subgraph EnvironmentVariables["Environment Variables"]
        ENV1["ENV: TASK_MASTER_PROJECT_ROOT, USAGE: accessed via process.env"]
    end
    subgraph ExecutionFlow["Execution Flow"]
        FL1["Identify and load dependencies and modules"]
        FL2["Define functions and core logic for this module"]
        FL3["Expose public API via exports"]
    end
    subgraph FileName["utils.js"]
        Imports
        Dependencies
        FunctionsDefined
        Exports
        Parameters
        Constants
        EnvironmentVariables
        ExecutionFlow
    end
    FL1 --> FL2
    FL2 --> FL3
```