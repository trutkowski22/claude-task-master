```mermaid
flowchart TB
    subgraph Imports["Imports"]
        I1["IMPORT: ../utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        I2["IMPORT: ../utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
    end
    subgraph FunctionsDefined["Functions Defined"]
        FU1["FUNCTION: findNextTask"]
        FU2["FUNCTION: toFullSubId"]
    end
    subgraph Exports["Exports"]
        E1["EXP: findNextTask"]
    end
    subgraph Constants["Const Declarations"]
        C1["CONST: priorityValues, VALUE: { high: 3, medium: 2, low: 1 }"]
        C2["CONST: toFullSubId, VALUE: (parentId, maybeDotId) => {"]
        C3["CONST: completedIds, VALUE: new Set()"]
        C4["CONST: candidateSubtasks, VALUE: []"]
        C5["CONST: stStatus, VALUE: (st.status || 'pending').toLowerCase()"]
        C6["CONST: fullDeps, VALUE: st.dependencies?.map((d) => toFullSubId(parent.id, d)) ?? []"]
        C7["CONST: depsSatisfied, VALUE: fullDeps.length === 0 ||"]
        C8["CONST: pa, VALUE: priorityValues[a.priority] ?? 2"]
        C9["CONST: pb, VALUE: priorityValues[b.priority] ?? 2"]
        C10["CONST: nextTask, VALUE: candidateSubtasks[0]"]
        C11["CONST: eligibleTasks, VALUE: tasks.filter((task) => {"]
        C12["CONST: status, VALUE: (task.status || 'pending').toLowerCase()"]
        C13["CONST: deps, VALUE: task.dependencies ?? []"]
        C14["CONST: nextTask, VALUE: eligibleTasks.sort((a, b) => {"]
        C15["CONST: pa, VALUE: priorityValues[a.priority || 'medium'] ?? 2"]
        C16["CONST: pb, VALUE: priorityValues[b.priority || 'medium'] ?? 2"]
        C17["CONST: da, VALUE: (a.dependencies ?? []).length"]
        C18["CONST: db, VALUE: (b.dependencies ?? []).length"]
    end
    subgraph ExecutionFlow["Execution Flow"]
        FL1["Identify and load dependencies and modules"]
        FL2["Define functions and core logic for this module"]
        FL3["Expose public API via exports"]
    end
    subgraph FileName["find-next-task.js"]
        Imports
        FunctionsDefined
        Exports
        Constants
        ExecutionFlow
    end
    FL1 --> FL2
    FL2 --> FL3
```