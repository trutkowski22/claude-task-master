```mermaid
flowchart TB
    subgraph Imports["Imports"]
        I1["IMPORT: path, FROM: path"]
        I2["IMPORT: fs, FROM: fs"]
        I3["IMPORT: ./logger-utils.js, FROM: /claude-task-master/src/utils/logger-utils.js"]
    end
    subgraph Dependencies["Dependencies"]
        D1["DEP: File system"]
        D2["DEP: Path resolution"]
    end
    subgraph FunctionsDefined["Functions Defined"]
        FU1["FUNCTION: normalizeProjectRoot"]
        FU2["FUNCTION: findProjectRoot"]
        FU3["FUNCTION: findTasksPath"]
        FU4["FUNCTION: findPRDPath"]
        FU5["FUNCTION: findComplexityReportPath"]
        FU6["FUNCTION: resolveTasksOutputPath"]
        FU7["FUNCTION: resolveComplexityReportOutputPath"]
        FU8["FUNCTION: findConfigPath"]
    end
    subgraph Exports["Exports"]
        E1["EXP: normalizeProjectRoot"]
        E2["EXP: findProjectRoot"]
        E3["EXP: findTasksPath"]
        E4["EXP: findPRDPath"]
        E5["EXP: findComplexityReportPath"]
        E6["EXP: resolveTasksOutputPath"]
        E7["EXP: resolveComplexityReportOutputPath"]
        E8["EXP: findConfigPath"]
    end
    subgraph Parameters["Parameters"]
        P1["PARAM: {string} projectRoot - The project root path to normalize"]
        P2["PARAM: {string} startDir - Directory to start searching from"]
        P3["PARAM: {string|null} explicitPath - Explicit path provided by user (highest priority)"]
        P4["PARAM: {Object|null} args - Args object from MCP args (optional)"]
        P5["PARAM: {Object|null} log - Logger object (optional)"]
        P6["PARAM: {string|null} explicitPath - Explicit path provided by user (highest priority)"]
        P7["PARAM: {Object|null} args - Args object for MCP context (optional)"]
        P8["PARAM: {Object|null} log - Logger object (optional)"]
        P9["PARAM: {string|null} explicitPath - Explicit path provided by user (highest priority)"]
        P10["PARAM: {Object|null} args - Args object for MCP context (optional)"]
        P11["PARAM: {Object|null} log - Logger object (optional)"]
        P12["PARAM: {string|null} explicitPath - Explicit output path provided by user"]
        P13["PARAM: {Object|null} args - Args object for MCP context (optional)"]
        P14["PARAM: {Object|null} log - Logger object (optional)"]
        P15["PARAM: {string|null} explicitPath - Explicit output path provided by user"]
        P16["PARAM: {Object|null} args - Args object for MCP context (optional)"]
        P17["PARAM: {Object|null} log - Logger object (optional)"]
        P18["PARAM: {string|null} explicitPath - Explicit path provided by user (highest priority)"]
        P19["PARAM: {Object|null} args - Args object for MCP context (optional)"]
        P20["PARAM: {Object|null} log - Logger object (optional)"]
    end
    subgraph Constants["Const Declarations"]
        C1["CONST: segments, VALUE: projectRoot.split(path.sep)"]
        C2["CONST: taskmasterIndex, VALUE: segments.findIndex("]
        C3["CONST: normalizedSegments, VALUE: segments.slice(0, taskmasterIndex)"]
        C4["CONST: projectMarkers, VALUE: ["]
        C5["CONST: rootDir, VALUE: path.parse(currentDir).root"]
        C6["CONST: maxDepth, VALUE: 50"]
        C7["CONST: markerPath, VALUE: path.join(currentDir, marker)"]
        C8["CONST: logger, VALUE: getLoggerOrDefault(log)"]
        C9["CONST: rawProjectRoot, VALUE: args?.projectRoot || findProjectRoot()"]
        C10["CONST: projectRoot, VALUE: normalizeProjectRoot(rawProjectRoot)"]
        C11["CONST: resolvedPath, VALUE: path.isAbsolute(explicitPath)"]
        C12["CONST: possiblePaths, VALUE: ["]
        C13["CONST: logger, VALUE: getLoggerOrDefault(log)"]
        C14["CONST: resolvedPath, VALUE: path.isAbsolute(explicitPath)"]
        C15["CONST: rawProjectRoot, VALUE: args?.projectRoot || findProjectRoot()"]
        C16["CONST: projectRoot, VALUE: normalizeProjectRoot(rawProjectRoot)"]
        C17["CONST: locations, VALUE: ["]
        C18["CONST: fileNames, VALUE: ['PRD.md', 'prd.md', 'PRD.txt', 'prd.txt']"]
        C19["CONST: prdPath, VALUE: path.join(projectRoot, location, fileName)"]
        C20["CONST: logger, VALUE: getLoggerOrDefault(log)"]
        C21["CONST: resolvedPath, VALUE: path.isAbsolute(explicitPath)"]
        C22["CONST: rawProjectRoot, VALUE: args?.projectRoot || findProjectRoot()"]
        C23["CONST: projectRoot, VALUE: normalizeProjectRoot(rawProjectRoot)"]
        C24["CONST: locations, VALUE: ["]
        C25["CONST: fileNames, VALUE: ["]
        C26["CONST: reportPath, VALUE: path.join(projectRoot, location, fileName)"]
        C27["CONST: logger, VALUE: getLoggerOrDefault(log)"]
        C28["CONST: resolvedPath, VALUE: path.isAbsolute(explicitPath)"]
        C29["CONST: rawProjectRoot, VALUE: args?.projectRoot || findProjectRoot() || process.cwd()"]
        C30["CONST: projectRoot, VALUE: normalizeProjectRoot(rawProjectRoot)"]
        C31["CONST: defaultPath, VALUE: path.join(projectRoot, TASKMASTER_TASKS_FILE)"]
        C32["CONST: outputDir, VALUE: path.dirname(defaultPath)"]
        C33["CONST: logger, VALUE: getLoggerOrDefault(log)"]
        C34["CONST: tag, VALUE: args?.tag"]
        C35["CONST: resolvedPath, VALUE: path.isAbsolute(explicitPath)"]
        C36["CONST: rawProjectRoot, VALUE: args?.projectRoot || findProjectRoot() || process.cwd()"]
        C37["CONST: projectRoot, VALUE: normalizeProjectRoot(rawProjectRoot)"]
        C38["CONST: defaultPath, VALUE: path.join(projectRoot, '.taskmaster/reports', filename)"]
        C39["CONST: outputDir, VALUE: path.dirname(defaultPath)"]
        C40["CONST: logger, VALUE: getLoggerOrDefault(log)"]
        C41["CONST: resolvedPath, VALUE: path.isAbsolute(explicitPath)"]
        C42["CONST: rawProjectRoot, VALUE: args?.projectRoot || findProjectRoot()"]
        C43["CONST: projectRoot, VALUE: normalizeProjectRoot(rawProjectRoot)"]
        C44["CONST: possiblePaths, VALUE: ["]
    end
    subgraph ExecutionFlow["Execution Flow"]
        FL1["Identify and load dependencies and modules"]
        FL2["Define functions and core logic for this module"]
        FL3["Expose public API via exports"]
    end
    subgraph FileName["path-utils.js"]
        Imports
        Dependencies
        FunctionsDefined
        Exports
        Parameters
        Constants
        ExecutionFlow
    end
    FL1 --> FL2
    FL2 --> FL3
```