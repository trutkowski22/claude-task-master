flowchart TB
    subgraph updateSubtaskById-Imports["updateSubtaskById-Imports"]
        I1["IMPORT: fs, FROM: fs"]
        I2["IMPORT: path, FROM: path"]
        I3["IMPORT: chalk, FROM: chalk"]
        I4["IMPORT: boxen, FROM: boxen"]
        I5["IMPORT: Table, FROM: cli-table3"]
        I6["IMPORT: getStatusWithColor, startLoadingIndicator, stopLoadingIndicator, displayAiUsageSummary, FROM: /claude-task-master/scripts/modules/ui.js"]
        I7["IMPORT: log as consoleLog, readJSON, writeJSON, truncate, isSilentMode, findProjectRoot, flattenTasksWithSubtasks, FROM: /claude-task-master/scripts/modules/utils.js"]
        I8["IMPORT: generateTextService, FROM: /claude-task-master/scripts/modules/ai-services-unified.js"]
        I9["IMPORT: getDebugFlag, FROM: /claude-task-master/scripts/modules/config-manager.js"]
        I10["IMPORT: getPromptManager, FROM: /claude-task-master/scripts/modules/prompt-manager.js"]
        I11["IMPORT: generateTaskFiles, FROM: /claude-task-master/scripts/modules/task-manager/generate-task-files.js"]
        I12["IMPORT: ContextGatherer, FROM: /claude-task-master/scripts/modules/utils/contextGatherer.js"]
        I13["IMPORT: FuzzyTaskSearch, FROM: /claude-task-master/scripts/modules/utils/fuzzyTaskSearch.js"]
    end
    subgraph updateSubtaskById-FunctionsDefined["updateSubtaskById-Functions Defined"]
        FU1["FUNCTION: updateSubtaskById"]
    end
    subgraph updateSubtaskById-Exports["updateSubtaskById-Exports"]
        E1["EXP: updateSubtaskById"]
    end
    subgraph updateSubtaskById-Parameters["updateSubtaskById-Parameters"]
        P1["PARAM: {string} tasksPath - Path to the tasks.json file"]
        P2["PARAM: {string} subtaskId - ID of the subtask to update in format parentId.subtaskId"]
        P3["PARAM: {string} prompt - Prompt for generating additional information"]
        P4["PARAM: {boolean} [useResearch=false] - Whether to use the research AI role"]
        P5["PARAM: {Object} context - Context object containing session and mcpLog"]
        P6["PARAM: {Object} [context.session] - Session object from MCP server"]
        P7["PARAM: {Object} [context.mcpLog] - MCP logger object"]
        P8["PARAM: {string} [context.projectRoot] - Project root path"]
        P9["PARAM: {string} [context.tag] - Tag for the task"]
        P10["PARAM: {string} [outputFormat='text'] - Output format (text or json)"]
    end
    subgraph updateSubtaskById-Constants["updateSubtaskById-Const Declarations"]
        C1["CONST: logFn, VALUE: mcpLog || consoleLog"]
        C2["CONST: isMCP, VALUE: !!mcpLog"]
        C3["CONST: projectRoot, VALUE: providedProjectRoot || findProjectRoot()"]
        C4["CONST: data, VALUE: readJSON(tasksPath, projectRoot, tag)"]
        C5["CONST: [parentIdStr, subtaskIdStr], VALUE: subtaskId.split('.')"]
        C6["CONST: parentId, VALUE: parseInt(parentIdStr, 10)"]
        C7["CONST: subtaskIdNum, VALUE: parseInt(subtaskIdStr, 10)"]
        C8["CONST: parentTask, VALUE: data.tasks.find((task) => task.id === parentId)"]
        C9["CONST: subtaskIndex, VALUE: parentTask.subtasks.findIndex((st) => st.id === subtaskIdNum)"]
        C10["CONST: subtask, VALUE: parentTask.subtasks[subtaskIndex]"]
        C11["CONST: contextGatherer, VALUE: new ContextGatherer(projectRoot, tag)"]
        C12["CONST: allTasksFlat, VALUE: flattenTasksWithSubtasks(data.tasks)"]
        C13["CONST: fuzzySearch, VALUE: new FuzzyTaskSearch(allTasksFlat, 'update-subtask')"]
        C14["CONST: searchQuery, VALUE: `${parentTask.title} ${subtask.title} ${prompt}`"]
        C15["CONST: promptManager, VALUE: getPromptManager()"]
        C16["CONST: timestamp, VALUE: new Date().toISOString()"]
        C17["CONST: formattedBlock, VALUE: timestamped AI response block"]
        C18["CONST: updatedSubtask, VALUE: parentTask.subtasks[subtaskIndex]"]
    end
    subgraph updateSubtaskById-ExecutionFlow["updateSubtaskById-Execution Flow"]
        FL1["Validate subtask ID format and prompt content"]
        FL2["Check if tasks file exists and read task data"]
        FL3["Parse parent and subtask IDs from dot-separated format"]
        FL4["Find parent task and validate subtask exists"]
        FL5["Initialize context gathering with ContextGatherer"]
        FL6["Perform fuzzy search for relevant tasks"]
        FL7["Gather context using relevant task IDs"]
        FL8["Display current subtask information in table format"]
        FL9["Start loading indicator for AI processing"]
        FL10["Build context objects for parent, previous, and next subtasks"]
        FL11["Load prompts using PromptManager with research or default variant"]
        FL12["Call AI text generation service with system and user prompts"]
        FL13["Process AI response and format with timestamp"]
        FL14["Append formatted AI response to subtask details"]
        FL15["Update subtask description with timestamp if prompt is short"]
        FL16["Write updated data back to tasks file"]
        FL17["Display success message with newly added content"]
        FL18["Show AI usage telemetry data if available"]
        FL19["Handle errors with appropriate user-friendly messages"]
    end
    subgraph updateSubtaskById["update-subtask-by-id.js"]
        updateSubtaskById-Imports
        updateSubtaskById-FunctionsDefined
        updateSubtaskById-Exports
        updateSubtaskById-Parameters
        updateSubtaskById-Constants
        updateSubtaskById-ExecutionFlow
    end
    FL1 --> FL2
    FL2 --> FL3
    FL3 --> FL4
    FL4 --> FL5
    FL5 --> FL6
    FL6 --> FL7
    FL7 --> FL8
    FL8 --> FL9
    FL9 --> FL10
    FL10 --> FL11
    FL11 --> FL12
    FL12 --> FL13
    FL13 --> FL14
    FL14 --> FL15
    FL15 --> FL16
    FL16 --> FL17
    FL17 --> FL18
    FL18 --> FL19