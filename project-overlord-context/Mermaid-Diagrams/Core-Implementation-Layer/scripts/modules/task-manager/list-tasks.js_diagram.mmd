```mermaid
flowchart TB
    subgraph Imports["Imports"]
        I1["IMPORT: chalk, FROM: chalk"]
        I2["IMPORT: boxen, FROM: boxen"]
        I3["IMPORT: cli-table3, FROM: cli-table3"]
        I4["IMPORT: ./find-next-task.js, FROM: /claude-task-master/scripts/modules/task-manager/find-next-task.js"]
    end
    subgraph Dependencies["Dependencies"]
        D1["DEP: Path resolution"]
    end
    subgraph FunctionsDefined["Functions Defined"]
        FU1["FUNCTION: listTasks"]
        FU2["FUNCTION: getWorkItemDescription"]
        FU3["FUNCTION: generateMarkdownOutput"]
        FU4["FUNCTION: createMarkdownProgressBar"]
        FU5["FUNCTION: getStatusSymbol"]
        FU6["FUNCTION: formatDependenciesForMarkdown"]
    end
    subgraph Exports["Exports"]
        E1["EXP: listTasks"]
    end
    subgraph Parameters["Parameters"]
        P1["PARAM: {string} tasksPath - Path to the tasks.json file"]
        P2["PARAM: {string} statusFilter - Filter by status (single status or comma-separated list, e.g., 'pending' or 'blocked,deferred')"]
        P3["PARAM: {string} reportPath - Path to the complexity report"]
        P4["PARAM: {boolean} withSubtasks - Whether to show subtasks"]
        P5["PARAM: {string} outputFormat - Output format (text or json)"]
        P6["PARAM: {Object} context - Context object (required)"]
        P7["PARAM: {string} context.projectRoot - Project root path"]
        P8["PARAM: {string} context.tag - Tag for the task"]
        P9["PARAM: {Object} data - Full tasks data"]
        P10["PARAM: {Array} filteredTasks - Filtered tasks array"]
        P11["PARAM: {Object} stats - Statistics object"]
    end
    subgraph Constants["Const Declarations"]
        C1["CONST: data, VALUE: readJSON(tasksPath, projectRoot, tag)"]
        C2["CONST: complexityReport, VALUE: readComplexityReport(reportPath)"]
        C3["CONST: allowedStatuses, VALUE: statusFilter"]
        C4["CONST: totalTasks, VALUE: data.tasks.length"]
        C5["CONST: completedTasks, VALUE: data.tasks.filter("]
        C6["CONST: completionPercentage, VALUE: totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 0"]
        C7["CONST: doneCount, VALUE: completedTasks"]
        C8["CONST: inProgressCount, VALUE: data.tasks.filter("]
        C9["CONST: pendingCount, VALUE: data.tasks.filter("]
        C10["CONST: blockedCount, VALUE: data.tasks.filter("]
        C11["CONST: deferredCount, VALUE: data.tasks.filter("]
        C12["CONST: cancelledCount, VALUE: data.tasks.filter("]
        C13["CONST: reviewCount, VALUE: data.tasks.filter("]
        C14["CONST: subtaskCompletionPercentage, VALUE: totalSubtasks > 0 ? (completedSubtasks / totalSubtasks) * 100 : 0"]
        C15["CONST: completedTaskIds, VALUE: new Set("]
        C16["CONST: tasksWithNoDeps, VALUE: data.tasks.filter("]
        C17["CONST: tasksWithAllDepsSatisfied, VALUE: data.tasks.filter("]
        C18["CONST: tasksWithUnsatisfiedDeps, VALUE: data.tasks.filter("]
        C19["CONST: tasksReadyToWork, VALUE: tasksWithNoDeps + tasksWithAllDepsSatisfied"]
        C20["CONST: dependencyCount, VALUE: {}"]
        C21["CONST: mostDependedOnTask, VALUE: mostDependedOnTaskId !== null"]
        C22["CONST: totalDependencies, VALUE: data.tasks.reduce("]
        C23["CONST: avgDependenciesPerTask, VALUE: totalDependencies / data.tasks.length"]
        C24["CONST: nextItem, VALUE: findNextTask(data.tasks, complexityReport)"]
        C25["CONST: tasksWithoutDetails, VALUE: filteredTasks.map((task) => {"]
        C26["CONST: taskStatusBreakdown, VALUE: {"]
        C27["CONST: subtaskStatusBreakdown, VALUE: {"]
        C28["CONST: taskProgressBar, VALUE: createProgressBar("]
        C29["CONST: subtaskProgressBar, VALUE: createProgressBar("]
        C30["CONST: projectDashboardContent, VALUE: chalk.white.bold('Project Dashboard') +"]
        C31["CONST: dependencyDashboardContent, VALUE: chalk.white.bold('Dependency Status & Next Task') +"]
        C32["CONST: minDashboardWidth, VALUE: 50"]
        C33["CONST: minDependencyWidth, VALUE: 50"]
        C34["CONST: totalMinWidth, VALUE: minDashboardWidth + minDependencyWidth + 4"]
        C35["CONST: availableWidth, VALUE: terminalWidth"]
        C36["CONST: halfWidth, VALUE: Math.floor(availableWidth / 2)"]
        C37["CONST: boxContentWidth, VALUE: halfWidth - 4"]
        C38["CONST: dashboardBox, VALUE: boxen(projectDashboardContent, {"]
        C39["CONST: dependencyBox, VALUE: boxen(dependencyDashboardContent, {"]
        C40["CONST: dashboardLines, VALUE: dashboardBox.split('\\n')"]
        C41["CONST: dependencyLines, VALUE: dependencyBox.split('\\n')"]
        C42["CONST: maxHeight, VALUE: Math.max(dashboardLines.length, dependencyLines.length)"]
        C43["CONST: combinedLines, VALUE: []"]
        C44["CONST: dashLine, VALUE: i < dashboardLines.length ? dashboardLines[i] : ''"]
        C45["CONST: depLine, VALUE: i < dependencyLines.length ? dependencyLines[i] : ''"]
        C46["CONST: trimmedDashLine, VALUE: dashLine.trimEnd()"]
        C47["CONST: paddedDashLine, VALUE: trimmedDashLine.padEnd(halfWidth, ' ')"]
        C48["CONST: dashboardBox, VALUE: boxen(projectDashboardContent, {"]
        C49["CONST: dependencyBox, VALUE: boxen(dependencyDashboardContent, {"]
        C50["CONST: idWidthPct, VALUE: withSubtasks ? 10 : 7"]
        C51["CONST: statusWidthPct, VALUE: 15"]
        C52["CONST: priorityWidthPct, VALUE: 12"]
        C53["CONST: depsWidthPct, VALUE: 20"]
        C54["CONST: complexityWidthPct, VALUE: 10"]
        C55["CONST: titleWidthPct, VALUE: 100 -"]
        C56["CONST: availableWidth, VALUE: terminalWidth - 10"]
        C57["CONST: idWidth, VALUE: Math.floor(availableWidth * (idWidthPct / 100))"]
        C58["CONST: statusWidth, VALUE: Math.floor(availableWidth * (statusWidthPct / 100))"]
        C59["CONST: priorityWidth, VALUE: Math.floor(availableWidth * (priorityWidthPct / 100))"]
        C60["CONST: depsWidth, VALUE: Math.floor(availableWidth * (depsWidthPct / 100))"]
        C61["CONST: complexityWidth, VALUE: Math.floor("]
        C62["CONST: titleWidth, VALUE: Math.floor(availableWidth * (titleWidthPct / 100))"]
        C63["CONST: table, VALUE: new Table({"]
        C64["CONST: cleanTitle, VALUE: task.title.replace(/\\n/g, ' ')"]
        C65["CONST: priorityColor, VALUE: {"]
        C66["CONST: status, VALUE: getStatusWithColor(task.status, true)"]
        C67["CONST: formattedDeps, VALUE: subtask.dependencies"]
        C68["CONST: foundSubtask, VALUE: task.subtasks.find("]
        C69["CONST: isDone, VALUE: foundSubtask.status === 'done' ||"]
        C70["CONST: isInProgress, VALUE: foundSubtask.status === 'in-progress'"]
        C71["CONST: depTask, VALUE: data.tasks.find((t) => t.id === depId)"]
        C72["CONST: isDone, VALUE: depTask.status === 'done' || depTask.status === 'completed'"]
        C73["CONST: isInProgress, VALUE: depTask.status === 'in-progress'"]
        C74["CONST: priorityColors, VALUE: {"]
        C75["CONST: parentTaskForSubtasks, VALUE: data.tasks.find("]
        C76["CONST: status, VALUE: subtask.status || 'pending'"]
        C77["CONST: statusColors, VALUE: {"]
        C78["CONST: statusColor, VALUE: statusColors[status.toLowerCase()] || chalk.white"]
        C79["CONST: parent, VALUE: allTasks.find((t) => t.id === item.parentId)"]
        C80["CONST: subtask, VALUE: parent?.subtasks?.find("]
        C81["CONST: task, VALUE: allTasks.find((t) => String(t.id) === String(item.id))"]
        C82["CONST: createMarkdownProgressBar, VALUE: (percentage, width = 20) => {"]
        C83["CONST: filled, VALUE: Math.round((percentage / 100) * width)"]
        C84["CONST: empty, VALUE: width - filled"]
        C85["CONST: taskProgressBar, VALUE: createMarkdownProgressBar(completionPercentage, 20)"]
        C86["CONST: subtaskProgressBar, VALUE: createMarkdownProgressBar("]
        C87["CONST: getStatusSymbol, VALUE: (status) => {"]
        C88["CONST: formatDependenciesForMarkdown, VALUE: (deps, allTasks) => {"]
        C89["CONST: depTask, VALUE: allTasks.find((t) => t.id === depId)"]
        C90["CONST: taskTitle, VALUE: task.title"]
        C91["CONST: statusSymbol, VALUE: getStatusSymbol(task.status)"]
        C92["CONST: priority, VALUE: task.priority || 'medium'"]
        C93["CONST: deps, VALUE: formatDependenciesForMarkdown(task.dependencies, data.tasks)"]
        C94["CONST: complexity, VALUE: task.complexityScore"]
        C95["CONST: subtaskTitle, VALUE: `${subtask.title}`"]
        C96["CONST: subtaskStatus, VALUE: getStatusSymbol(subtask.status)"]
        C97["CONST: subtaskDeps, VALUE: formatDependenciesForMarkdown("]
        C98["CONST: subtaskComplexity, VALUE: subtask.complexityScore"]
    end
    subgraph ExecutionFlow["Execution Flow"]
        FL1["Identify and load dependencies and modules"]
        FL2["Define functions and core logic for this module"]
        FL3["Expose public API via exports"]
    end
    subgraph FileName["list-tasks.js"]
        Imports
        Dependencies
        FunctionsDefined
        Exports
        Parameters
        Constants
        ExecutionFlow
    end
    FL1 --> FL2
    FL2 --> FL3
```