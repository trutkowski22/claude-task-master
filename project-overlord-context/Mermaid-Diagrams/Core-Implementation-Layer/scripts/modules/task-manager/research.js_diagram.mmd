```mermaid
flowchart TB
    subgraph Imports["Imports"]
        I1["IMPORT: fs, FROM: fs"]
        I2["IMPORT: path, FROM: path"]
        I3["IMPORT: chalk, FROM: chalk"]
        I4["IMPORT: boxen, FROM: boxen"]
        I5["IMPORT: inquirer, FROM: inquirer"]
        I6["IMPORT: cli-highlight, FROM: cli-highlight"]
        I7["IMPORT: ../utils/contextGatherer.js, FROM: /claude-task-master/scripts/modules/utils/contextGatherer.js"]
        I8["IMPORT: ../utils/fuzzyTaskSearch.js, FROM: /claude-task-master/scripts/modules/utils/fuzzyTaskSearch.js"]
        I9["IMPORT: ../ai-services-unified.js, FROM: /claude-task-master/scripts/modules/ai-services-unified.js"]
        I10["IMPORT: ../prompt-manager.js, FROM: /claude-task-master/scripts/modules/prompt-manager.js"]
    end
    subgraph Dependencies["Dependencies"]
        D1["DEP: File system"]
        D2["DEP: Path resolution"]
    end
    subgraph FunctionsDefined["Functions Defined"]
        FU1["FUNCTION: performResearch"]
        FU2["FUNCTION: displayDetailedTokenBreakdown"]
        FU3["FUNCTION: processCodeBlocks"]
        FU4["FUNCTION: displayResearchResults"]
        FU5["FUNCTION: handleFollowUpQuestions"]
        FU6["FUNCTION: handleSaveToTask"]
        FU7["FUNCTION: handleSaveToFile"]
        FU8["FUNCTION: formatConversationForFile"]
        FU9["FUNCTION: formatConversationForSaving"]
        FU10["FUNCTION: buildConversationContext"]
    end
    subgraph Exports["Exports"]
        E1["EXP: performResearch"]
    end
    subgraph Parameters["Parameters"]
        P1["PARAM: {string} query - Research query/prompt"]
        P2["PARAM: {Object} options - Research options"]
        P3["PARAM: {Array<string>} [options.taskIds] - Task/subtask IDs for context"]
        P4["PARAM: {Array<string>} [options.filePaths] - File paths for context"]
        P5["PARAM: {string} [options.customContext] - Additional custom context"]
        P6["PARAM: {boolean} [options.includeProjectTree] - Include project file tree"]
        P7["PARAM: {string} [options.detailLevel] - Detail level: 'low', 'medium', 'high'"]
        P8["PARAM: {string} [options.projectRoot] - Project root directory"]
        P9["PARAM: {string} [options.tag] - Tag for the task"]
        P10["PARAM: {boolean} [options.saveToFile] - Whether to save results to file (MCP mode)"]
        P11["PARAM: {Object} [context] - Execution context"]
        P12["PARAM: {Object} [context.session] - MCP session object"]
        P13["PARAM: {Object} [context.mcpLog] - MCP logger object"]
        P14["PARAM: {string} [context.commandName] - Command name for telemetry"]
        P15["PARAM: {string} [context.outputType] - Output type ('cli' or 'mcp')"]
        P16["PARAM: {string} [outputFormat] - Output format ('text' or 'json')"]
        P17["PARAM: {boolean} [allowFollowUp] - Whether to allow follow-up questions (default: true)"]
        P18["PARAM: {Object} tokenBreakdown - Token breakdown from context gatherer"]
        P19["PARAM: {number} systemPromptTokens - System prompt token count"]
        P20["PARAM: {number} userPromptTokens - User prompt token count"]
        P21["PARAM: {string} text - Raw research result text"]
        P22["PARAM: {string} result - AI research result"]
        P23["PARAM: {string} query - Original query"]
        P24["PARAM: {string} detailLevel - Detail level used"]
        P25["PARAM: {Object} tokenBreakdown - Detailed token usage"]
        P26["PARAM: {Object} originalOptions - Original research options"]
        P27["PARAM: {Object} context - Execution context"]
        P28["PARAM: {string} outputFormat - Output format"]
        P29["PARAM: {string} projectRoot - Project root directory"]
        P30["PARAM: {Object} logFn - Logger function"]
        P31["PARAM: {string} initialQuery - Initial query for context"]
        P32["PARAM: {string} initialResult - Initial AI result for context"]
        P33["PARAM: {Array} conversationHistory - Array of conversation exchanges"]
        P34["PARAM: {string} projectRoot - Project root directory"]
        P35["PARAM: {Object} context - Execution context"]
        P36["PARAM: {Object} logFn - Logger function"]
        P37["PARAM: {Array} conversationHistory - Array of conversation exchanges"]
        P38["PARAM: {string} projectRoot - Project root directory"]
        P39["PARAM: {Object} context - Execution context"]
        P40["PARAM: {Object} logFn - Logger function"]
        P41["PARAM: {Array} conversationHistory - Array of conversation exchanges"]
        P42["PARAM: {string} initialQuery - The initial query for metadata"]
        P43["PARAM: {Array} conversationHistory - Array of conversation exchanges"]
        P44["PARAM: {Array} conversationHistory - Array of conversation exchanges"]
    end
    subgraph Constants["Const Declarations"]
        C1["CONST: isMCP, VALUE: !!mcpLog"]
        C2["CONST: projectRoot, VALUE: providedProjectRoot || findProjectRoot()"]
        C3["CONST: logFn, VALUE: isMCP"]
        C4["CONST: contextGatherer, VALUE: new ContextGatherer(projectRoot, tag)"]
        C5["CONST: tasksPath, VALUE: path.join("]
        C6["CONST: tasksData, VALUE: await readJSON(tasksPath, projectRoot, tag)"]
        C7["CONST: flattenedTasks, VALUE: flattenTasksWithSubtasks(tasksData.tasks)"]
        C8["CONST: fuzzySearch, VALUE: new FuzzyTaskSearch(flattenedTasks, 'research')"]
        C9["CONST: searchResults, VALUE: fuzzySearch.findRelevantTasks(query, {"]
        C10["CONST: uniqueAutoDiscovered, VALUE: autoDiscoveredIds.filter("]
        C11["CONST: sortedTaskIds, VALUE: finalTaskIds"]
        C12["CONST: sortedProvidedIds, VALUE: taskIds"]
        C13["CONST: sortedAutoIds, VALUE: uniqueAutoDiscovered"]
        C14["CONST: contextResult, VALUE: await contextGatherer.gather({"]
        C15["CONST: gatheredContext, VALUE: contextResult.context"]
        C16["CONST: tokenBreakdown, VALUE: contextResult.tokenBreakdown"]
        C17["CONST: promptManager, VALUE: getPromptManager()"]
        C18["CONST: promptParams, VALUE: {"]
        C19["CONST: systemPromptTokens, VALUE: contextGatherer.countTokens(systemPrompt)"]
        C20["CONST: userPromptTokens, VALUE: contextGatherer.countTokens(userPrompt)"]
        C21["CONST: totalInputTokens, VALUE: systemPromptTokens + userPromptTokens"]
        C22["CONST: researchResult, VALUE: aiResult.mainResult"]
        C23["CONST: telemetryData, VALUE: aiResult.telemetryData"]
        C24["CONST: tagInfo, VALUE: aiResult.tagInfo"]
        C25["CONST: conversationHistory, VALUE: ["]
        C26["CONST: savedFilePath, VALUE: await handleSaveToFile("]
        C27["CONST: parts, VALUE: []"]
        C28["CONST: totalTaskTokens, VALUE: tokenBreakdown.tasks.reduce("]
        C29["CONST: taskDetails, VALUE: tokenBreakdown.tasks"]
        C30["CONST: titleDisplay, VALUE: task.title.length > 30"]
        C31["CONST: totalFileTokens, VALUE: tokenBreakdown.files.reduce("]
        C32["CONST: fileDetails, VALUE: tokenBreakdown.files"]
        C33["CONST: pathDisplay, VALUE: file.path.length > 40"]
        C34["CONST: totalPromptTokens, VALUE: systemPromptTokens + userPromptTokens"]
        C35["CONST: promptDetails, VALUE: ["]
        C36["CONST: content, VALUE: parts.join('\\n\\n')"]
        C37["CONST: tokenBox, VALUE: boxen(content, {"]
        C38["CONST: codeBlockRegex, VALUE: /```(\\w+)?\\n([\\s\\S]*?)```/g"]
        C39["CONST: lang, VALUE: language || 'javascript'"]
        C40["CONST: highlightedCode, VALUE: highlight(code.trim(), {"]
        C41["CONST: codeBox, VALUE: boxen(highlightedCode, {"]
        C42["CONST: header, VALUE: boxen("]
        C43["CONST: processedResult, VALUE: processCodeBlocks(result)"]
        C44["CONST: contentBox, VALUE: boxen(processedResult, {"]
        C45["CONST: updateTaskById, VALUE: (await import('./update-task-by-id.js')).default"]
        C46["CONST: conversationHistory, VALUE: ["]
        C47["CONST: saveResult, VALUE: await handleSaveToTask("]
        C48["CONST: conversationContext, VALUE: buildConversationContext(conversationHistory)"]
        C49["CONST: followUpOptions, VALUE: {"]
        C50["CONST: followUpResult, VALUE: await performResearch("]
        C51["CONST: updateTaskById, VALUE: (await import('./update-task-by-id.js')).default"]
        C52["CONST: trimmedInput, VALUE: input.trim()"]
        C53["CONST: trimmedTaskId, VALUE: taskId.trim()"]
        C54["CONST: conversationThread, VALUE: formatConversationForSaving(conversationHistory)"]
        C55["CONST: isSubtask, VALUE: trimmedTaskId.includes('.')"]
        C56["CONST: tasksPath, VALUE: path.join("]
        C57["CONST: data, VALUE: readJSON(tasksPath, projectRoot, context.tag)"]
        C58["CONST: parentTask, VALUE: data.tasks.find((t) => t.id === parentId)"]
        C59["CONST: taskIdNum, VALUE: parseInt(trimmedTaskId, 10)"]
        C60["CONST: task, VALUE: data.tasks.find((t) => t.id === taskIdNum)"]
        C61["CONST: researchDir, VALUE: path.join("]
        C62["CONST: firstQuery, VALUE: conversationHistory[0]?.question || 'research-query'"]
        C63["CONST: timestamp, VALUE: new Date().toISOString().split('T')[0]"]
        C64["CONST: querySlug, VALUE: firstQuery"]
        C65["CONST: filename, VALUE: `${timestamp}_${querySlug}.md`"]
        C66["CONST: filePath, VALUE: path.join(researchDir, filename)"]
        C67["CONST: fileContent, VALUE: formatConversationForFile("]
        C68["CONST: relativePath, VALUE: path.relative(projectRoot, filePath)"]
        C69["CONST: timestamp, VALUE: new Date().toISOString()"]
        C70["CONST: date, VALUE: new Date().toLocaleDateString()"]
        C71["CONST: time, VALUE: new Date().toLocaleTimeString()"]
        C72["CONST: timestamp, VALUE: new Date().toISOString()"]
        C73["CONST: contextParts, VALUE: ['--- Conversation History ---']"]
        C74["CONST: questionLabel, VALUE: exchange.type === 'initial' ? 'Initial Question' : `Follow-up ${index}`"]
        C75["CONST: answerLabel, VALUE: exchange.type === 'initial' ? 'Initial Answer' : `Answer ${index}`"]
    end
    subgraph ExecutionFlow["Execution Flow"]
        FL1["Identify and load dependencies and modules"]
        FL2["Define functions and core logic for this module"]
        FL3["Expose public API via exports"]
    end
    subgraph FileName["research.js"]
        Imports
        Dependencies
        FunctionsDefined
        Exports
        Parameters
        Constants
        ExecutionFlow
    end
    FL1 --> FL2
    FL2 --> FL3
```