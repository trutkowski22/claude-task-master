```mermaid
flowchart TB
    subgraph Imports["Imports"]
        I1["IMPORT: chalk, FROM: chalk"]
        I2["IMPORT: figlet, FROM: figlet"]
        I3["IMPORT: boxen, FROM: boxen"]
        I4["IMPORT: ora, FROM: ora"]
        I5["IMPORT: cli-table3, FROM: cli-table3"]
        I6["IMPORT: gradient-string, FROM: gradient-string"]
        I7["IMPORT: readline, FROM: readline"]
        I8["IMPORT: fs, FROM: fs"]
        I9["IMPORT: ./config-manager.js, FROM: /claude-task-master/scripts/modules/config-manager.js"]
        I10["IMPORT: ../../src/constants/task-status.js, FROM: /claude-task-master/src/constants/task-status.js"]
        I11["IMPORT: ../../src/utils/getVersion.js, FROM: /claude-task-master/src/utils/getVersion.js"]
    end
    subgraph Dependencies["Dependencies"]
        D1["DEP: File system"]
        D2["DEP: Path resolution"]
    end
    subgraph FunctionsDefined["Functions Defined"]
        FU1["FUNCTION: displayTaggedTasksFYI"]
        FU2["FUNCTION: displayCurrentTagIndicator"]
        FU3["FUNCTION: displayBanner"]
        FU4["FUNCTION: startLoadingIndicator"]
        FU5["FUNCTION: stopLoadingIndicator"]
        FU6["FUNCTION: succeedLoadingIndicator"]
        FU7["FUNCTION: failLoadingIndicator"]
        FU8["FUNCTION: warnLoadingIndicator"]
        FU9["FUNCTION: infoLoadingIndicator"]
        FU10["FUNCTION: createProgressBar"]
        FU11["FUNCTION: getStatusWithColor"]
        FU12["FUNCTION: formatDependenciesWithStatus"]
        FU13["FUNCTION: displayHelp"]
        FU14["FUNCTION: getComplexityWithColor"]
        FU15["FUNCTION: truncateString"]
        FU16["FUNCTION: displayNextTask"]
        FU17["FUNCTION: displayTaskById"]
        FU18["FUNCTION: displayComplexityReport"]
        FU19["FUNCTION: generateComplexityAnalysisPrompt"]
        FU20["FUNCTION: confirmTaskOverwrite"]
        FU21["FUNCTION: displayApiKeyStatus"]
        FU22["FUNCTION: displayModelConfiguration"]
        FU23["FUNCTION: displayAvailableModels"]
        FU24["FUNCTION: displayAiUsageSummary"]
        FU25["FUNCTION: displayMultipleTasksSummary"]
        FU26["FUNCTION: displayContextAnalysis"]
        FU27["FUNCTION: formatSweScoreWithTertileStars"]
        FU28["FUNCTION: formatCost"]
        FU29["FUNCTION: formatSingleCost"]
    end
    subgraph Exports["Exports"]
        E1["EXP: displayBanner"]
        E2["EXP: displayTaggedTasksFYI"]
        E3["EXP: startLoadingIndicator"]
        E4["EXP: stopLoadingIndicator"]
        E5["EXP: createProgressBar"]
        E6["EXP: getStatusWithColor"]
        E7["EXP: formatDependenciesWithStatus"]
        E8["EXP: displayHelp"]
        E9["EXP: getComplexityWithColor"]
        E10["EXP: displayNextTask"]
        E11["EXP: displayTaskById"]
        E12["EXP: displayComplexityReport"]
        E13["EXP: generateComplexityAnalysisPrompt"]
        E14["EXP: confirmTaskOverwrite"]
        E15["EXP: displayApiKeyStatus"]
        E16["EXP: displayModelConfiguration"]
        E17["EXP: displayAvailableModels"]
        E18["EXP: displayAiUsageSummary"]
        E19["EXP: displayMultipleTasksSummary"]
        E20["EXP: succeedLoadingIndicator"]
        E21["EXP: failLoadingIndicator"]
        E22["EXP: warnLoadingIndicator"]
        E23["EXP: infoLoadingIndicator"]
        E24["EXP: displayContextAnalysis"]
        E25["EXP: displayCurrentTagIndicator"]
    end
    subgraph Parameters["Parameters"]
        P1["PARAM: {Object} data - Data object that may contain _migrationHappened flag"]
        P2["PARAM: {string} tagName - The tag name to display"]
        P3["PARAM: {Object} options - Display options"]
        P4["PARAM: {string} message - Message to display next to the spinner"]
        P5["PARAM: {Object} spinner - Spinner object to stop"]
        P6["PARAM: {Object} spinner - Spinner object to complete"]
        P7["PARAM: {string} message - Optional success message (defaults to current text)"]
        P8["PARAM: {Object} spinner - Spinner object to fail"]
        P9["PARAM: {string} message - Optional failure message (defaults to current text)"]
        P10["PARAM: {Object} spinner - Spinner object to warn"]
        P11["PARAM: {string} message - Optional warning message (defaults to current text)"]
        P12["PARAM: {Object} spinner - Spinner object to complete with info"]
        P13["PARAM: {string} message - Optional info message (defaults to current text)"]
        P14["PARAM: {number} percent - The completion percentage"]
        P15["PARAM: {number} length - The total length of the progress bar in characters"]
        P16["PARAM: {Object} statusBreakdown - Optional breakdown of non-complete statuses (e.g., {pending: 20, 'in-progress': 10})"]
        P17["PARAM: {string} status - Task status (e.g., \"done\", \"pending\", \"in-progress\")"]
        P18["PARAM: {boolean} forTable - Whether the status is being displayed in a table"]
        P19["PARAM: {Array} dependencies - Array of dependency IDs"]
        P20["PARAM: {Array} allTasks - Array of all tasks"]
        P21["PARAM: {boolean} forConsole - Whether the output is for console display"]
        P22["PARAM: {Object|null} complexityReport - Optional pre-loaded complexity report"]
        P23["PARAM: {number} score - Complexity score (1-10)"]
        P24["PARAM: {string} str - The string to truncate"]
        P25["PARAM: {number} maxLength - Maximum length"]
        P26["PARAM: {string} tasksPath - Path to the tasks.json file"]
        P27["PARAM: {string} complexityReportPath - Path to the complexity report file"]
        P28["PARAM: {string} tag - Optional tag to override current tag resolution"]
        P29["PARAM: {string} tasksPath - Path to the tasks.json file"]
        P30["PARAM: {string|number} taskId - The ID of the task to display"]
        P31["PARAM: {string} complexityReportPath - Path to the complexity report file"]
        P32["PARAM: {string} [statusFilter] - Optional status to filter subtasks by"]
        P33["PARAM: {object} context - Context object containing projectRoot and tag"]
        P34["PARAM: {string} context.projectRoot - Project root path"]
        P35["PARAM: {string} context.tag - Tag for the task"]
        P36["PARAM: {string} reportPath - Path to the complexity report file"]
        P37["PARAM: {Object} tasksData - Tasks data object containing tasks array"]
        P38["PARAM: {string} tasksPath - Path to the tasks.json file"]
        P39["PARAM: {ConfigData} configData - The active configuration data."]
        P40["PARAM: {AvailableModel[]} allAvailableModels - Needed for SWE score tertiles."]
        P41["PARAM: {AvailableModel[]} availableModels - List of available models."]
        P42["PARAM: {object} telemetryData - The telemetry data object."]
        P43["PARAM: {string} outputType - 'cli' or 'mcp' (though typically only called for 'cli')."]
        P44["PARAM: {string} tasksPath - Path to the tasks.json file"]
        P45["PARAM: {Array<string>} taskIds - Array of task IDs to display"]
        P46["PARAM: {string} complexityReportPath - Path to complexity report"]
        P47["PARAM: {string} statusFilter - Optional status filter for subtasks"]
        P48["PARAM: {Object} context - Context object containing projectRoot and tag"]
        P49["PARAM: {string} [context.projectRoot] - Project root path"]
        P50["PARAM: {string} [context.tag] - Tag for the task"]
        P51["PARAM: {Object} analysisData - Analysis data from ContextGatherer"]
        P52["PARAM: {string} semanticQuery - The original query used for semantic search"]
        P53["PARAM: {number} contextSize - Size of gathered context in characters"]
    end
    subgraph Constants["Const Declarations"]
        C1["CONST: coolGradient, VALUE: gradient(['#00b4d8', '#0077b6', '#03045e'])"]
        C2["CONST: warmGradient, VALUE: gradient(['#fb8b24', '#e36414', '#9a031e'])"]
        C3["CONST: tagIcon, VALUE: '🏷️'"]
        C4["CONST: tagText, VALUE: dim"]
        C5["CONST: bannerText, VALUE: figlet.textSync('Task Master', {"]
        C6["CONST: version, VALUE: getTaskMasterVersion()"]
        C7["CONST: spinner, VALUE: ora({"]
        C8["CONST: effectivePercent, VALUE: statusBreakdown"]
        C9["CONST: trueCompletedFilled, VALUE: Math.round((percent * length) / 100)"]
        C10["CONST: effectiveCompletedFilled, VALUE: Math.round("]
        C11["CONST: deferredCancelledFilled, VALUE: effectiveCompletedFilled - trueCompletedFilled"]
        C12["CONST: empty, VALUE: length - effectiveCompletedFilled"]
        C13["CONST: completedSection, VALUE: completedColor('█'.repeat(trueCompletedFilled))"]
        C14["CONST: deferredCancelledSection, VALUE: chalk.gray("]
        C15["CONST: statusColors, VALUE: {"]
        C16["CONST: totalRemaining, VALUE: Object.entries(statusBreakdown)"]
        C17["CONST: statusChars, VALUE: Math.round((percentage / totalRemaining) * empty)"]
        C18["CONST: actualChars, VALUE: Math.min(statusChars, empty - addedChars)"]
        C19["CONST: colorFn, VALUE: statusColors[status] || chalk.gray"]
        C20["CONST: percentTextColor, VALUE: percent === 100"]
        C21["CONST: statusConfig, VALUE: {"]
        C22["CONST: config, VALUE: statusConfig[status.toLowerCase()] || {"]
        C23["CONST: simpleIcons, VALUE: {"]
        C24["CONST: simpleIcon, VALUE: simpleIcons[status.toLowerCase()] || 'x'"]
        C25["CONST: formattedDeps, VALUE: dependencies.map((depId) => {"]
        C26["CONST: depIdStr, VALUE: depId.toString()"]
        C27["CONST: parentTask, VALUE: allTasks.find((t) => t.id === parentId)"]
        C28["CONST: subtask, VALUE: parentTask.subtasks.find((st) => st.id === subtaskId)"]
        C29["CONST: status, VALUE: subtask.status || 'pending'"]
        C30["CONST: isDone, VALUE: status.toLowerCase() === 'done' || status.toLowerCase() === 'completed'"]
        C31["CONST: isInProgress, VALUE: status.toLowerCase() === 'in-progress'"]
        C32["CONST: numericDepId, VALUE: typeof depId === 'string' ? parseInt(depId, 10) : depId"]
        C33["CONST: depTaskResult, VALUE: findTaskById("]
        C34["CONST: depTask, VALUE: depTaskResult.task"]
        C35["CONST: status, VALUE: depTask.status || 'pending'"]
        C36["CONST: isDone, VALUE: status.toLowerCase() === 'done' || status.toLowerCase() === 'completed'"]
        C37["CONST: isInProgress, VALUE: status.toLowerCase() === 'in-progress'"]
        C38["CONST: terminalWidth, VALUE: process.stdout.columns || 100"]
        C39["CONST: commandCategories, VALUE: ["]
        C40["CONST: nameWidth, VALUE: Math.max(25, Math.floor(terminalWidth * 0.2))"]
        C41["CONST: argsWidth, VALUE: Math.max(40, Math.floor(terminalWidth * 0.35))"]
        C42["CONST: descWidth, VALUE: Math.max(45, Math.floor(terminalWidth * 0.45) - 10)"]
        C43["CONST: commandTable, VALUE: new Table({"]
        C44["CONST: configTerminalWidth, VALUE: terminalWidth || process.stdout.columns || 100"]
        C45["CONST: configKeyWidth, VALUE: Math.max(30, Math.floor(configTerminalWidth * 0.25))"]
        C46["CONST: configDescWidth, VALUE: Math.max(50, Math.floor(configTerminalWidth * 0.45))"]
        C47["CONST: configValueWidth, VALUE: Math.max("]
        C48["CONST: configTable, VALUE: new Table({"]
        C49["CONST: data, VALUE: readJSON(tasksPath, projectRoot, tag)"]
        C50["CONST: complexityReport, VALUE: readComplexityReport(complexityReportPath)"]
        C51["CONST: nextTask, VALUE: findNextTask(data.tasks, complexityReport)"]
        C52["CONST: taskTable, VALUE: new Table({"]
        C53["CONST: priorityColors, VALUE: {"]
        C54["CONST: priorityColor, VALUE: priorityColors[nextTask.priority || 'medium'] || chalk.white"]
        C55["CONST: isSubtask, VALUE: !!nextTask.parentId"]
        C56["CONST: availableWidth, VALUE: process.stdout.columns - 10 || 100"]
        C57["CONST: idWidthPct, VALUE: 8"]
        C58["CONST: statusWidthPct, VALUE: 15"]
        C59["CONST: depsWidthPct, VALUE: 25"]
        C60["CONST: titleWidthPct, VALUE: 100 - idWidthPct - statusWidthPct - depsWidthPct"]
        C61["CONST: idWidth, VALUE: Math.floor(availableWidth * (idWidthPct / 100))"]
        C62["CONST: statusWidth, VALUE: Math.floor(availableWidth * (statusWidthPct / 100))"]
        C63["CONST: depsWidth, VALUE: Math.floor(availableWidth * (depsWidthPct / 100))"]
        C64["CONST: titleWidth, VALUE: Math.floor(availableWidth * (titleWidthPct / 100))"]
        C65["CONST: subtaskTable, VALUE: new Table({"]
        C66["CONST: statusColor, VALUE: {"]
        C67["CONST: formattedDeps, VALUE: st.dependencies.map((depId) => {"]
        C68["CONST: foundSubtask, VALUE: nextTask.subtasks.find("]
        C69["CONST: isDone, VALUE: foundSubtask.status === 'done' ||"]
        C70["CONST: isInProgress, VALUE: foundSubtask.status === 'in-progress'"]
        C71["CONST: data, VALUE: readJSON(tasksPath, projectRoot, tag)"]
        C72["CONST: complexityReport, VALUE: readComplexityReport(complexityReportPath)"]
        C73["CONST: subtaskTable, VALUE: new Table({"]
        C74["CONST: taskTable, VALUE: new Table({"]
        C75["CONST: priorityColors, VALUE: {"]
        C76["CONST: priorityColor, VALUE: priorityColors[task.priority || 'medium'] || chalk.white"]
        C77["CONST: availableWidth, VALUE: process.stdout.columns - 10 || 100"]
        C78["CONST: idWidthPct, VALUE: 10"]
        C79["CONST: statusWidthPct, VALUE: 15"]
        C80["CONST: depsWidthPct, VALUE: 25"]
        C81["CONST: titleWidthPct, VALUE: 100 - idWidthPct - statusWidthPct - depsWidthPct"]
        C82["CONST: idWidth, VALUE: Math.floor(availableWidth * (idWidthPct / 100))"]
        C83["CONST: statusWidth, VALUE: Math.floor(availableWidth * (statusWidthPct / 100))"]
        C84["CONST: depsWidth, VALUE: Math.floor(availableWidth * (depsWidthPct / 100))"]
        C85["CONST: titleWidth, VALUE: Math.floor(availableWidth * (titleWidthPct / 100))"]
        C86["CONST: subtaskTable, VALUE: new Table({"]
        C87["CONST: statusColorMap, VALUE: {"]
        C88["CONST: statusColor, VALUE: statusColorMap[st.status || 'pending'] || chalk.white"]
        C89["CONST: formattedDeps, VALUE: st.dependencies.map((depId) => {"]
        C90["CONST: sourceListForDeps, VALUE: originalSubtasks || task.subtasks"]
        C91["CONST: foundDepSubtask, VALUE: typeof depId === 'number' && depId < 100"]
        C92["CONST: isDone, VALUE: foundDepSubtask.status === 'done' ||"]
        C93["CONST: isInProgress, VALUE: foundDepSubtask.status === 'in-progress'"]
        C94["CONST: color, VALUE: isDone"]
        C95["CONST: actualSubtasks, VALUE: originalSubtasks || task.subtasks"]
        C96["CONST: subtasksForProgress, VALUE: originalSubtasks || task.subtasks"]
        C97["CONST: totalSubtasks, VALUE: subtasksForProgress.length"]
        C98["CONST: completedSubtasks, VALUE: subtasksForProgress.filter("]
        C99["CONST: inProgressSubtasks, VALUE: subtasksForProgress.filter("]
        C100["CONST: pendingSubtasks, VALUE: subtasksForProgress.filter("]
        C101["CONST: blockedSubtasks, VALUE: subtasksForProgress.filter("]
        C102["CONST: deferredSubtasks, VALUE: subtasksForProgress.filter("]
        C103["CONST: cancelledSubtasks, VALUE: subtasksForProgress.filter("]
        C104["CONST: statusBreakdown, VALUE: {"]
        C105["CONST: completionPercentage, VALUE: (completedSubtasks / totalSubtasks) * 100"]
        C106["CONST: availableWidth, VALUE: process.stdout.columns || 80"]
        C107["CONST: boxPadding, VALUE: 2"]
        C108["CONST: boxBorders, VALUE: 2"]
        C109["CONST: percentTextLength, VALUE: 5"]
        C110["CONST: progressBarLength, VALUE: Math.max("]
        C111["CONST: statusCounts, VALUE: `${chalk.green('✓ Done:')} ${completedSubtasks}  ${chalk.hex('#FFA500')('► In Progress:')} ${inProgressSubtasks}  ${c..."]
        C112["CONST: actions, VALUE: []"]
        C113["CONST: complexityScore, VALUE: task.complexityScore"]
        C114["CONST: rl, VALUE: readline.createInterface({"]
        C115["CONST: answer, VALUE: await new Promise((resolve) => {"]
        C116["CONST: tasksPath, VALUE: TASKMASTER_TASKS_FILE"]
        C117["CONST: metaTable, VALUE: new Table({"]
        C118["CONST: sortedTasks, VALUE: [...report.complexityAnalysis].sort("]
        C119["CONST: tasksNeedingExpansion, VALUE: sortedTasks.filter("]
        C120["CONST: simpleTasks, VALUE: sortedTasks.filter("]
        C121["CONST: complexityDistribution, VALUE: [0, 0, 0]"]
        C122["CONST: percentLow, VALUE: Math.round("]
        C123["CONST: percentMedium, VALUE: Math.round("]
        C124["CONST: percentHigh, VALUE: Math.round("]
        C125["CONST: terminalWidth, VALUE: process.stdout.columns || 100"]
        C126["CONST: idWidth, VALUE: 12"]
        C127["CONST: titleWidth, VALUE: Math.floor(terminalWidth * 0.25)"]
        C128["CONST: scoreWidth, VALUE: 8"]
        C129["CONST: subtasksWidth, VALUE: 8"]
        C130["CONST: commandWidth, VALUE: terminalWidth - idWidth - titleWidth - scoreWidth - subtasksWidth - 10"]
        C131["CONST: complexTable, VALUE: new Table({"]
        C132["CONST: expansionCommand, VALUE: `task-master expand --id=${task.taskId} --num=${task.recommendedSubtasks}${task.expansionPrompt ? ` --prompt=\"${task...."]
        C133["CONST: simpleTable, VALUE: new Table({"]
        C134["CONST: defaultSubtasks, VALUE: getDefaultSubtasks(null)"]
        C135["CONST: rl, VALUE: readline.createInterface({"]
        C136["CONST: answer, VALUE: await new Promise((resolve) => {"]
        C137["CONST: table, VALUE: new Table({"]
        C138["CONST: cliStatus, VALUE: cli ? chalk.green('✅ Found') : chalk.red('❌ Missing')"]
        C139["CONST: mcpStatus, VALUE: mcp ? chalk.green('✅ Found') : chalk.red('❌ Missing')"]
        C140["CONST: providerName, VALUE: provider.charAt(0).toUpperCase() + provider.slice(1)"]
        C141["CONST: formatSweScoreWithTertileStars, VALUE: (score, allModels) => {"]
        C142["CONST: formattedPercentage, VALUE: `${(score * 100).toFixed(1)}%`"]
        C143["CONST: validScores, VALUE: allModels"]
        C144["CONST: sortedScores, VALUE: [...validScores].sort((a, b) => b - a)"]
        C145["CONST: n, VALUE: sortedScores.length"]
        C146["CONST: topThirdIndex, VALUE: Math.max(0, Math.floor(n / 3) - 1)"]
        C147["CONST: midThirdIndex, VALUE: Math.max(0, Math.floor((2 * n) / 3) - 1)"]
        C148["CONST: formatCost, VALUE: (costObj) => {"]
        C149["CONST: formatSingleCost, VALUE: (costValue) => {"]
        C150["CONST: isInteger, VALUE: Number.isInteger(costValue)"]
        C151["CONST: active, VALUE: configData.activeModels"]
        C152["CONST: activeTable, VALUE: new Table({"]
        C153["CONST: availableTable, VALUE: new Table({"]
        C154["CONST: projectRoot, VALUE: context.projectRoot || null"]
        C155["CONST: tag, VALUE: context.tag || null"]
        C156["CONST: data, VALUE: readJSON(tasksPath, projectRoot, tag)"]
        C157["CONST: complexityReport, VALUE: readComplexityReport(complexityReportPath)"]
        C158["CONST: foundTasks, VALUE: []"]
        C159["CONST: notFoundIds, VALUE: []"]
        C160["CONST: terminalWidth, VALUE: process.stdout.columns || 100"]
        C161["CONST: availableWidth, VALUE: terminalWidth - 10"]
        C162["CONST: summaryTable, VALUE: new Table({"]
        C163["CONST: parentId, VALUE: task.parentTask ? task.parentTask.id : 'Unknown'"]
        C164["CONST: priorityColors, VALUE: {"]
        C165["CONST: priorityColor, VALUE: priorityColors[task.priority || 'medium'] || chalk.white"]
        C166["CONST: total, VALUE: task.subtasks.length"]
        C167["CONST: completed, VALUE: task.subtasks.filter("]
        C168["CONST: inProgress, VALUE: task.subtasks.filter("]
        C169["CONST: pending, VALUE: task.subtasks.filter("]
        C170["CONST: completionPercentage, VALUE: (completed / total) * 100"]
        C171["CONST: barLength, VALUE: 8"]
        C172["CONST: statusBreakdown, VALUE: {"]
        C173["CONST: rl, VALUE: readline.createInterface({"]
        C174["CONST: choice, VALUE: await new Promise((resolve) => {"]
        C175["CONST: rl2, VALUE: readline.createInterface({"]
        C176["CONST: actionChoice, VALUE: await new Promise((resolve) => {"]
        C177["CONST: taskIdList, VALUE: foundTasks.map((t) => t.id).join(',')"]
        C178["CONST: task, VALUE: foundTasks[0]"]
        C179["CONST: recentTasksNotInRelevance, VALUE: recentTasks.filter("]
    end
    subgraph ExecutionFlow["Execution Flow"]
        FL1["Identify and load dependencies and modules"]
        FL2["Define functions and core logic for this module"]
        FL3["Expose public API via exports"]
    end
    subgraph FileName["ui.js"]
        Imports
        Dependencies
        FunctionsDefined
        Exports
        Parameters
        Constants
        ExecutionFlow
    end
    FL1 --> FL2
    FL2 --> FL3
```