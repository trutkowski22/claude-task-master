flowchart TB
    subgraph generateTaskFiles-Imports["generateTaskFiles-Imports"]
        I1["IMPORT: path, FROM: path"]
        I2["IMPORT: fs, FROM: fs"]
        I3["IMPORT: chalk, FROM: chalk"]
        I4["IMPORT: log, FROM: /claude-task-master/scripts/modules/utils.js"]
        I5["IMPORT: readJSON, FROM: /claude-task-master/scripts/modules/utils.js"]
        I6["IMPORT: formatDependenciesWithStatus, FROM: /claude-task-master/scripts/modules/ui.js"]
        I7["IMPORT: validateAndFixDependencies, FROM: /claude-task-master/scripts/modules/dependency-manager.js"]
        I8["IMPORT: getDebugFlag, FROM: /claude-task-master/scripts/modules/config-manager.js"]
    end
    subgraph generateTaskFiles-Dependencies["generateTaskFiles-Dependencies"]
        D1["DEP: File system"]
        D2["DEP: Node.js path"]
        D3["DEP: Chalk terminal colors"]
    end
    subgraph generateTaskFiles-FunctionsDefined["generateTaskFiles-Functions Defined"]
        FU1["FUNCTION: generateTaskFiles"]
    end
    subgraph generateTaskFiles-Exports["generateTaskFiles-Exports"]
        E1["EXP: generateTaskFiles"]
    end
    subgraph generateTaskFiles-Parameters["generateTaskFiles-Parameters"]
        P1["PARAM: {string} tasksPath - Path to the tasks.json file"]
        P2["PARAM: {string} outputDir - Output directory for task files"]
        P3["PARAM: {Object} options - Additional options (mcpLog for MCP mode, projectRoot, tag)"]
        P4["PARAM: {string} options.projectRoot - Project root path"]
        P5["PARAM: {string} options.tag - Tag for the task"]
        P6["PARAM: {Object} options.mcpLog - MCP logger object"]
    end
    subgraph generateTaskFiles-Constants["generateTaskFiles-Const Declarations"]
        C1["CONST: isMcpMode, VALUE: !!options?.mcpLog"]
        C2["CONST: resolvedData, VALUE: readJSON result"]
        C3["CONST: rawData, VALUE: resolvedData._rawTaggedData || resolvedData"]
        C4["CONST: tagData, VALUE: rawData[tag]"]
        C5["CONST: tasksForGeneration, VALUE: tagData.tasks"]
        C6["CONST: allTasksInTag, VALUE: tagData.tasks"]
        C7["CONST: validTaskIds, VALUE: mapped task IDs"]
        C8["CONST: masterFilePattern, VALUE: /^task_(\\d+)\\.txt$/"]
        C9["CONST: taggedFilePattern, VALUE: new RegExp"]
        C10["CONST: orphanedFiles, VALUE: filtered files array"]
        C11["CONST: taskFileName, VALUE: formatted task file name"]
        C12["CONST: taskPath, VALUE: path.join result"]
    end
    subgraph generateTaskFiles-ExecutionFlow["generateTaskFiles-Execution Flow"]
        FL1["Determine MCP mode and extract options"]
        FL2["Read tasks.json file and resolve tag data structure"]
        FL3["Extract tasks for the specified tag"]
        FL4["Create output directory if it doesn't exist"]
        FL5["Validate and fix dependencies using full raw data"]
        FL6["Scan for orphaned task files to clean up"]
        FL7["Remove orphaned files matching tag pattern"]
        FL8["Generate individual task files for each task"]
        FL9["Create task file content with metadata and details"]
        FL10["Include subtasks information if present"]
        FL11["Write task file to disk"]
        FL12["Return success result in MCP mode or undefined in CLI mode"]
    end
    subgraph generateTaskFiles["generate-task-files.js"]
        generateTaskFiles-Imports
        generateTaskFiles-Dependencies
        generateTaskFiles-FunctionsDefined
        generateTaskFiles-Exports
        generateTaskFiles-Parameters
        generateTaskFiles-Constants
        generateTaskFiles-ExecutionFlow
    end
    FL1 --> FL2
    FL2 --> FL3
    FL3 --> FL4
    FL4 --> FL5
    FL5 --> FL6
    FL6 --> FL7
    FL7 --> FL8
    FL8 --> FL9
    FL9 --> FL10
    FL10 --> FL11
    FL11 --> FL12