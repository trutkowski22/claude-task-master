```mermaid
flowchart TB
    subgraph Imports["Imports"]
        I1["IMPORT: fs, FROM: fs"]
        I2["IMPORT: path, FROM: path"]
        I3["IMPORT: gpt-tokens, FROM: gpt-tokens"]
        I4["IMPORT: fuse.js, FROM: fuse.js"]
    end
    subgraph Dependencies["Dependencies"]
        D1["DEP: File system"]
        D2["DEP: Path resolution"]
    end
    subgraph FunctionsDefined["Functions Defined"]
        FU1["FUNCTION: createContextGatherer"]
    end
    subgraph Exports["Exports"]
        E1["EXP: ContextGatherer"]
        E2["EXP: createContextGatherer"]
    end
    subgraph Parameters["Parameters"]
        P1["PARAM: {string} text - Text to count tokens for"]
        P2["PARAM: {Object} options - Context gathering options"]
        P3["PARAM: {Array<string>} [options.tasks] - Task/subtask IDs to include"]
        P4["PARAM: {Array<string>} [options.files] - File paths to include"]
        P5["PARAM: {string} [options.customContext] - Additional custom context"]
        P6["PARAM: {boolean} [options.includeProjectTree] - Include project file tree"]
        P7["PARAM: {string} [options.format] - Output format: 'research', 'chat', 'system-prompt'"]
        P8["PARAM: {boolean} [options.includeTokenCounts] - Whether to include token breakdown"]
        P9["PARAM: {string} [options.semanticQuery] - A query string for semantic task searching."]
        P10["PARAM: {number} [options.maxSemanticResults] - Max number of semantic results."]
        P11["PARAM: {Array<number>} [options.dependencyTasks] - Array of task IDs to build dependency graphs from."]
        P12["PARAM: {Array<string>} taskIds - Array of task ID strings"]
        P13["PARAM: {Array<string>} taskIds - Task/subtask IDs"]
        P14["PARAM: {string} format - Output format"]
        P15["PARAM: {boolean} includeTokenCounts - Whether to include token breakdown"]
        P16["PARAM: {Object} task - Task object"]
        P17["PARAM: {string} format - Output format"]
        P18["PARAM: {Object} subtask - Subtask object"]
        P19["PARAM: {Object} parentTask - Parent task object"]
        P20["PARAM: {string} format - Output format"]
        P21["PARAM: {Array<string>} filePaths - File paths to read"]
        P22["PARAM: {string} format - Output format"]
        P23["PARAM: {boolean} includeTokenCounts - Whether to include token breakdown"]
        P24["PARAM: {string} format - Output format"]
        P25["PARAM: {boolean} includeTokenCounts - Whether to include token breakdown"]
        P26["PARAM: {Object} fileData - File data object"]
        P27["PARAM: {string} format - Output format"]
        P28["PARAM: {string} dirPath - Directory path"]
        P29["PARAM: {number} maxDepth - Maximum depth to traverse"]
        P30["PARAM: {number} currentDepth - Current depth"]
        P31["PARAM: {string} customContext - Custom context string"]
        P32["PARAM: {string} format - Output format"]
        P33["PARAM: {Array<string>} taskItems - Formatted task items"]
        P34["PARAM: {string} format - Output format"]
        P35["PARAM: {Array<Object>} fileContents - File content objects"]
        P36["PARAM: {string} format - Output format"]
        P37["PARAM: {Object} tree - File tree structure"]
        P38["PARAM: {string} format - Output format"]
        P39["PARAM: {Object} tree - File tree structure"]
        P40["PARAM: {string} prefix - Current prefix for indentation"]
        P41["PARAM: {Array<string>} sections - Context sections"]
        P42["PARAM: {string} format - Output format"]
        P43["PARAM: {string} projectRoot - Project root directory"]
        P44["PARAM: {string} tag - Tag for the task"]
    end
    subgraph Constants["Const Declarations"]
        C1["CONST: data, VALUE: readJSON(this.tasksPath, this.projectRoot, this.tag)"]
        C2["CONST: tasks, VALUE: data?.tasks || []"]
        C3["CONST: contextSections, VALUE: []"]
        C4["CONST: finalTaskIds, VALUE: new Set(tasks.map(String))"]
        C5["CONST: semanticResults, VALUE: this._performSemanticSearch("]
        C6["CONST: dependencyResults, VALUE: this._buildDependencyGraphs(dependencyTasks)"]
        C7["CONST: formattedCustomContext, VALUE: this._formatCustomContext("]
        C8["CONST: taskContextResult, VALUE: await this._gatherTaskContext("]
        C9["CONST: taskTokens, VALUE: taskContextResult.breakdown.reduce("]
        C10["CONST: fileContextResult, VALUE: await this._gatherFileContext("]
        C11["CONST: fileTokens, VALUE: fileContextResult.breakdown.reduce("]
        C12["CONST: treeContextResult, VALUE: await this._gatherProjectTreeContext("]
        C13["CONST: finalContext, VALUE: this._joinContextSections(contextSections, format)"]
        C14["CONST: result, VALUE: {"]
        C15["CONST: searchableTasks, VALUE: this.allTasks.map((task) => {"]
        C16["CONST: dependencyTitles, VALUE: task.dependencies?.length > 0"]
        C17["CONST: searchOptions, VALUE: {"]
        C18["CONST: fuse, VALUE: new Fuse(searchableTasks, searchOptions)"]
        C19["CONST: promptWords, VALUE: query"]
        C20["CONST: fuzzyResults, VALUE: fuse.search(query)"]
        C21["CONST: wordResults, VALUE: []"]
        C22["CONST: results, VALUE: fuse.search(word)"]
        C23["CONST: mergedResults, VALUE: [...fuzzyResults]"]
        C24["CONST: highRelevance, VALUE: mergedResults"]
        C25["CONST: mediumRelevance, VALUE: mergedResults"]
        C26["CONST: recentTasks, VALUE: [...this.allTasks]"]
        C27["CONST: allRelevantTasks, VALUE: [...highRelevance]"]
        C28["CONST: finalResults, VALUE: allRelevantTasks.slice(0, maxResults)"]
        C29["CONST: dependentTasks, VALUE: Array.from(allRelatedTaskIds)"]
        C30["CONST: uniqueDetailedTasks, VALUE: dependentTasks.slice(0, 8)"]
        C31["CONST: directDeps, VALUE: this.allTasks.filter((t) => taskIds.includes(t.id))"]
        C32["CONST: indirectDeps, VALUE: dependentTasks.filter((t) => !taskIds.includes(t.id))"]
        C33["CONST: isDirect, VALUE: taskIds.includes(depTask.id)"]
        C34["CONST: visited, VALUE: new Set()"]
        C35["CONST: depthMap, VALUE: new Map()"]
        C36["CONST: graphs, VALUE: []"]
        C37["CONST: graph, VALUE: this._buildDependencyGraph(id, visited, depthMap)"]
        C38["CONST: task, VALUE: this.allTasks.find((t) => t.id === taskId)"]
        C39["CONST: dependencies, VALUE: task.dependencies"]
        C40["CONST: connector, VALUE: isLast ? '└── ' : '├── '"]
        C41["CONST: childPrefix, VALUE: prefix + (isLast ? '    ' : '│   ')"]
        C42["CONST: parsed, VALUE: []"]
        C43["CONST: parsedIds, VALUE: this._parseTaskIds(taskIds)"]
        C44["CONST: contextItems, VALUE: []"]
        C45["CONST: breakdown, VALUE: []"]
        C46["CONST: result, VALUE: findTaskById(this.allTasks, parsed.taskId)"]
        C47["CONST: parentResult, VALUE: findTaskById(this.allTasks, parsed.parentId)"]
        C48["CONST: subtask, VALUE: parentResult.task.subtasks.find("]
        C49["CONST: finalContext, VALUE: this._formatTaskContextSection(contextItems, format)"]
        C50["CONST: sections, VALUE: []"]
        C51["CONST: details, VALUE: truncate(task.details, 500)"]
        C52["CONST: testStrategy, VALUE: truncate(task.testStrategy, 300)"]
        C53["CONST: sections, VALUE: []"]
        C54["CONST: details, VALUE: truncate(subtask.details, 500)"]
        C55["CONST: fileContents, VALUE: []"]
        C56["CONST: breakdown, VALUE: []"]
        C57["CONST: fullPath, VALUE: path.isAbsolute(filePath)"]
        C58["CONST: stats, VALUE: fs.statSync(fullPath)"]
        C59["CONST: content, VALUE: fs.readFileSync(fullPath, 'utf-8')"]
        C60["CONST: relativePath, VALUE: path.relative(this.projectRoot, fullPath)"]
        C61["CONST: fileData, VALUE: {"]
        C62["CONST: formattedFile, VALUE: this._formatSingleFileForContext("]
        C63["CONST: finalContext, VALUE: this._formatFileContextSection(fileContents, format)"]
        C64["CONST: tree, VALUE: this._generateFileTree(this.projectRoot, 5)"]
        C65["CONST: finalContext, VALUE: this._formatProjectTreeSection(tree, format)"]
        C66["CONST: breakdown, VALUE: includeTokenCounts"]
        C67["CONST: header, VALUE: `**File: ${fileData.path}** (${Math.round(fileData.size / 1024)}KB)`"]
        C68["CONST: content, VALUE: `\\`\\`\\`\\n${fileData.content}\\n\\`\\`\\``"]
        C69["CONST: ignoreDirs, VALUE: ["]
        C70["CONST: ignoreFiles, VALUE: ['.DS_Store', '.env', '.env.local', '.env.production']"]
        C71["CONST: items, VALUE: fs.readdirSync(dirPath)"]
        C72["CONST: tree, VALUE: {"]
        C73["CONST: itemPath, VALUE: path.join(dirPath, item)"]
        C74["CONST: stats, VALUE: fs.statSync(itemPath)"]
        C75["CONST: subtree, VALUE: this._generateFileTree("]
        C76["CONST: fileItems, VALUE: fileContents.map((file) => {"]
        C77["CONST: header, VALUE: `**File: ${file.path}** (${Math.round(file.size / 1024)}KB)`"]
        C78["CONST: content, VALUE: `\\`\\`\\`\\n${file.content}\\n\\`\\`\\``"]
        C79["CONST: treeString, VALUE: this._renderFileTree(tree)"]
        C80["CONST: isLast, VALUE: index === tree.children.length - 1"]
        C81["CONST: childPrefix, VALUE: prefix + (isLast ? '└── ' : '├── ')"]
        C82["CONST: nextPrefix, VALUE: prefix + (isLast ? '    ' : '│   ')"]
    end
    subgraph ExecutionFlow["Execution Flow"]
        FL1["Identify and load dependencies and modules"]
        FL2["Define functions and core logic for this module"]
        FL3["Expose public API via exports"]
    end
    subgraph FileName["contextGatherer.js"]
        Imports
        Dependencies
        FunctionsDefined
        Exports
        Parameters
        Constants
        ExecutionFlow
    end
    FL1 --> FL2
    FL2 --> FL3
```