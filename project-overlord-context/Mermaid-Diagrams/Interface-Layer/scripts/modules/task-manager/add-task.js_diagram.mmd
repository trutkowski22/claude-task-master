flowchart TB
    subgraph Imports["Imports"]
        I1["IMPORT: path, FROM: path"]
        I2["IMPORT: chalk, FROM: chalk"]
        I3["IMPORT: boxen, FROM: boxen"]
        I4["IMPORT: Table, FROM: cli-table3"]
        I5["IMPORT: z, FROM: zod"]
        I6["IMPORT: Fuse, FROM: fuse.js"]
        I7["IMPORT: displayBanner, FROM: /claude-task-master/scripts/modules/ui.js"]
        I8["IMPORT: readJSON, FROM: /claude-task-master/scripts/modules/utils.js"]
        I9["IMPORT: generateObjectService, FROM: /claude-task-master/scripts/modules/ai-services-unified.js"]
        I10["IMPORT: getDefaultPriority, FROM: /claude-task-master/scripts/modules/config-manager.js"]
        I11["IMPORT: getPromptManager, FROM: /claude-task-master/scripts/modules/prompt-manager.js"]
        I12["IMPORT: ContextGatherer, FROM: /claude-task-master/scripts/modules/utils/contextGatherer.js"]
        I13["IMPORT: generateTaskFiles, FROM: /claude-task-master/scripts/modules/task-manager/generate-task-files.js"]
        I14["IMPORT: TASK_PRIORITY_OPTIONS, FROM: /claude-task-master/src/constants/task-priority.js"]
    end
    
    subgraph Dependencies["Dependencies"]
        D1["DEP: Zod schema validation system"]
        D2["DEP: File system operations"]
        D3["DEP: Terminal UI libraries"]
        D4["DEP: AI language model services"]
    end
    
    subgraph FunctionsDefined["Functions Defined"]
        FU1["FUNCTION: getAllTasks"]
        FU2["FUNCTION: addTask"]
        FU3["FUNCTION: buildDependencyGraph"]
    end
    
    subgraph Exports["Exports"]
        E1["EXP: addTask"]
    end
    
    subgraph Parameters["Parameters"]
        P1["PARAM: {string} tasksPath - Path to the tasks.json file"]
        P2["PARAM: {string} prompt - Description of the task to add"]
        P3["PARAM: {Array} dependencies - Task dependencies"]
        P4["PARAM: {string} priority - Task priority"]
        P5["PARAM: {Object} context - Context object containing session and project info"]
        P6["PARAM: {string} outputFormat - Output format (text or json)"]
        P7["PARAM: {Object} manualTaskData - Manual task data for direct creation"]
        P8["PARAM: {boolean} useResearch - Whether to use research model"]
    end
    
    subgraph Constants["Const Declarations"]
        C1["CONST: AiTaskDataSchema, VALUE: Zod schema object for validating AI task output"]
        C2["CONST: logFn, VALUE: logger function wrapper for MCP or CLI context"]
        C3["CONST: effectivePriority, VALUE: resolved task priority value"]
        C4["CONST: targetTag, VALUE: tag context for task placement"]
        C5["CONST: allTasks, VALUE: flat array of all tasks across all tags"]
        C6["CONST: newTaskId, VALUE: next available task ID"]
        C7["CONST: newTask, VALUE: complete task object to be saved"]
    end
    
    subgraph ExecutionFlow["Execution Flow"]
        FL1["Validate and normalize input parameters including priority"]
        FL2["Read existing tasks data and handle legacy format migration"]
        FL3["Determine target tag and validate it exists"]
        FL4["Generate next task ID and validate dependencies"]
        FL5["Either use manual task data or generate with AI service"]
        FL6["Gather context using ContextGatherer for AI generation"]
        FL7["Call AI service with prompts and schema validation"]
        FL8["Create new task object with all required fields"]
        FL9["Add task to target tag and update metadata"]
        FL10["Save updated tasks data to file system"]
        FL11["Display success message with task details and next steps"]
    end
    
    subgraph addTaskJS["add-task.js"]
        Imports
        Dependencies
        FunctionsDefined
        Exports
        Parameters
        Constants
        ExecutionFlow
    end
    
    FL1 --> FL2
    FL2 --> FL3
    FL3 --> FL4
    FL4 --> FL5
    FL5 --> FL6
    FL6 --> FL7
    FL7 --> FL8
    FL8 --> FL9
    FL9 --> FL10
    FL10 --> FL11
