```mermaid
flowchart TB
    subgraph Imports["Imports"]
        I1["IMPORT: path, FROM: path"]
        I2["IMPORT: chalk, FROM: chalk"]
        I3["IMPORT: boxen, FROM: boxen"]
        I4["IMPORT: log, FROM: /claude-task-master/scripts/modules/utils.js"]
        I5["IMPORT: readJSON, FROM: /claude-task-master/scripts/modules/utils.js"]
        I6["IMPORT: writeJSON, FROM: /claude-task-master/scripts/modules/utils.js"]
        I7["IMPORT: taskExists, FROM: /claude-task-master/scripts/modules/utils.js"]
        I8["IMPORT: formatTaskId, FROM: /claude-task-master/scripts/modules/utils.js"]
        I9["IMPORT: findCycles, FROM: /claude-task-master/scripts/modules/utils.js"]
        I10["IMPORT: isSilentMode, FROM: /claude-task-master/scripts/modules/utils.js"]
        I11["IMPORT: displayBanner, FROM: /claude-task-master/scripts/modules/ui.js"]
        I12["IMPORT: generateTaskFiles, FROM: /claude-task-master/scripts/modules/task-manager.js"]
    end
    
    subgraph Dependencies["Dependencies"]
        D1["DEP: File system for JSON operations"]
        D2["DEP: Node.js runtime for process management"]
    end
    
    subgraph FunctionsDefined["Functions Defined"]
        FU1["FUNCTION: addDependency"]
        FU2["FUNCTION: removeDependency"]
        FU3["FUNCTION: isCircularDependency"]
        FU4["FUNCTION: validateTaskDependencies"]
        FU5["FUNCTION: removeDuplicateDependencies"]
        FU6["FUNCTION: cleanupSubtaskDependencies"]
        FU7["FUNCTION: validateDependenciesCommand"]
        FU8["FUNCTION: countAllDependencies"]
        FU9["FUNCTION: fixDependenciesCommand"]
        FU10["FUNCTION: ensureAtLeastOneIndependentSubtask"]
        FU11["FUNCTION: validateAndFixDependencies"]
    end
    
    subgraph Exports["Exports"]
        E1["EXP: addDependency"]
        E2["EXP: removeDependency"]
        E3["EXP: isCircularDependency"]
        E4["EXP: validateTaskDependencies"]
        E5["EXP: validateDependenciesCommand"]
        E6["EXP: fixDependenciesCommand"]
        E7["EXP: removeDuplicateDependencies"]
        E8["EXP: cleanupSubtaskDependencies"]
        E9["EXP: ensureAtLeastOneIndependentSubtask"]
        E10["EXP: validateAndFixDependencies"]
    end
    
    subgraph Parameters["Parameters"]
        P1["PARAM: {string} tasksPath - Path to the tasks.json file"]
        P2["PARAM: {number|string} taskId - ID of the task to add dependency to"]
        P3["PARAM: {number|string} dependencyId - ID of the task to add as dependency"]
        P4["PARAM: {Object} context - Context object containing projectRoot and tag information"]
        P5["PARAM: {Array} tasks - Array of all tasks"]
        P6["PARAM: {Array} chain - Chain of dependencies to check"]
        P7["PARAM: {Object} options - Options object including context"]
    end
    
    subgraph ExecutionFlow["Execution Flow"]
        FL1["Read tasks data from JSON file and validate structure"]
        FL2["Format task and dependency IDs for consistent processing"]
        FL3["Verify dependency target exists in tasks structure"]
        FL4["Check for self-dependencies and circular references"]
        FL5["Perform dependency validation or modification operations"]
        FL6["Update tasks data with changes and write back to file"]
        FL7["Display success messages with visual feedback"]
        FL8["Generate updated task files to reflect changes"]
    end
    
    subgraph dependencyManager["dependency-manager.js"]
        Imports
        Dependencies
        FunctionsDefined
        Exports
        Parameters
        ExecutionFlow
    end
    
    FL1 --> FL2
    FL2 --> FL3
    FL3 --> FL4
    FL4 --> FL5
    FL5 --> FL6
    FL6 --> FL7
    FL7 --> FL8
```