flowchart TB
    %% SHARED INFRASTRUCTURE INHERITANCE - Core Implementation inherits from Shared Infrastructure
    subgraph SharedInfrastructureImports["Shared-Infrastructure-Imports"]
        SI1["IMPORT: path, FROM: path"]
        SI2["IMPORT: fs, FROM: fs"]
        SI3["IMPORT: z, FROM: zod"]
        SI4["IMPORT: chalk, FROM: chalk"]
        SI5["IMPORT: FastMCP, FROM: fastmcp"]
        SI6["IMPORT: LRUCache, FROM: lru-cache"]
        SI7["IMPORT: boxen, FROM: boxen"]
        SI8["IMPORT: Table, FROM: cli-table3"]
        SI9["IMPORT: Fuse, FROM: fuse.js"]
    end
    
    subgraph SharedInfrastructureDependencies["Shared-Infrastructure-Dependencies"]
        SD1["DEP: Node.js file system for file operations"]
        SD2["DEP: Node.js path module for cross-platform paths"]
        SD3["DEP: Zod schema validation library"]
        SD4["DEP: Chalk for console styling"]
        SD5["DEP: FastMCP for MCP server functionality"]
        SD6["DEP: LRU cache for efficient caching"]
        SD7["DEP: AI service providers for task generation"]
        SD8["DEP: Configuration management system"]
    end
    
    subgraph SharedInfrastructureConstants["Shared-Infrastructure-Constants"]
        SC1["CONST: projectRoot, VALUE: resolved project root directory"]
        SC2["CONST: logger, VALUE: unified logging instance"]
        SC3["CONST: config, VALUE: merged configuration with defaults"]
        SC4["CONST: tasksJsonPath, VALUE: resolved tasks file path"]
        SC5["CONST: schema, VALUE: validation schemas for task data"]
    end
    
    subgraph SharedInfrastructureParameters["Shared-Infrastructure-Parameters"]
        SP1["PARAM: {string} tasksJsonPath - Path to tasks.json file"]
        SP2["PARAM: {object|null} session - MCP session object"]
        SP3["PARAM: {object} log - Logger object for output"]
        SP4["PARAM: {object} context - Additional context containing session"]
        SP5["PARAM: {string} projectRoot - Project root directory path"]
        SP6["PARAM: {string} outputFormat - Output format (text or json)"]
    end
    
    %% TASK LIFECYCLE MANAGEMENT FUNCTIONAL AREA
    subgraph TaskLifecycleManagement["Task-Lifecycle-Management-Area"]
        subgraph taskMasterCore["task-master-core.js"]
            subgraph tmcImports["task-master-core-Imports"]
                TMCI1["IMPORT: listTasksDirect, FROM: G:\claude-task-master\claude-task-master\mcp-server\src\core\direct-functions\list-tasks.js"]
                TMCI2["IMPORT: addTaskDirect, FROM: G:\claude-task-master\claude-task-master\mcp-server\src\core\direct-functions\add-task.js"]
                TMCI3["IMPORT: addSubtaskDirect, FROM: G:\claude-task-master\claude-task-master\mcp-server\src\core\direct-functions\add-subtask.js"]
                TMCI4["IMPORT: setTaskStatusDirect, FROM: G:\claude-task-master\claude-task-master\mcp-server\src\core\direct-functions\set-task-status.js"]
            end
            
            subgraph tmcExports["task-master-core-Exports"]
                TMCE1["EXP: directFunctions"]
                TMCE2["EXP: listTasksDirect"]
                TMCE3["EXP: addTaskDirect"]
                TMCE4["EXP: addSubtaskDirect"]
                TMCE5["EXP: setTaskStatusDirect"]
            end
            
            subgraph tmcConstants["task-master-core-Constants"]
                TMCC1["CONST: directFunctions, VALUE: Map of all direct function implementations"]
            end
        end
        
        subgraph addTaskDirect["add-task.js (Direct Function)"]
            subgraph atdImports["add-task-direct-Imports"]
                ATDI1["IMPORT: addTask, FROM: G:\claude-task-master\claude-task-master\scripts\modules\task-manager.js"]
                ATDI2["IMPORT: enableSilentMode, FROM: G:\claude-task-master\claude-task-master\scripts\modules\utils.js"]
                ATDI3["IMPORT: createLogWrapper, FROM: G:\claude-task-master\claude-task-master\mcp-server\src\tools\utils.js"]
            end
            
            subgraph atdFunctions["add-task-direct-Functions"]
                ATDF1["FUNCTION: addTaskDirect"]
            end
            
            subgraph atdExports["add-task-direct-Exports"]
                ATDE1["EXP: addTaskDirect"]
            end
            
            subgraph atdFlow["add-task-direct-Execution Flow"]
                ATDFL1["Enable silent mode to prevent console interference"]
                ATDFL2["Create MCP-compatible logger wrapper"]
                ATDFL3["Validate required parameters (tasksJsonPath)"]
                ATDFL4["Determine manual vs AI-driven task creation"]
                ATDFL5["Process dependencies array and validate"]
                ATDFL6["Delegate to shared task management logic"]
                ATDFL7["Return structured response with success/error"]
            end
        end
        
        subgraph addTaskCore["add-task.js (Core Business Logic)"]
            subgraph atcImports["add-task-core-Imports"]
                ATCI1["IMPORT: AiTaskDataSchema, FROM: zod validation schema"]
                ATCI2["IMPORT: generateObjectService, FROM: G:\claude-task-master\claude-task-master\scripts\modules\ai-services-unified.js"]
                ATCI3["IMPORT: ContextGatherer, FROM: G:\claude-task-master\claude-task-master\scripts\modules\utils\contextGatherer.js"]
                ATCI4["IMPORT: TASK_PRIORITY_OPTIONS, FROM: G:\claude-task-master\claude-task-master\src\constants\task-priority.js"]
            end
            
            subgraph atcFunctions["add-task-core-Functions"]
                ATCF1["FUNCTION: addTask"]
                ATCF2["FUNCTION: getAllTasks"]
                ATCF3["FUNCTION: buildDependencyGraph"]
            end
            
            subgraph atcExports["add-task-core-Exports"]
                ATCE1["EXP: addTask (default)"]
            end
            
            subgraph atcConstants["add-task-core-Constants"]
                ATCC1["CONST: AiTaskDataSchema, VALUE: Zod validation schema for AI responses"]
                ATCC2["CONST: newTaskId, VALUE: calculated next available task ID"]
                ATCC3["CONST: effectivePriority, VALUE: validated and normalized priority"]
                ATCC4["CONST: targetTag, VALUE: resolved tag for task placement"]
            end
            
            subgraph atcFlow["add-task-core-Execution Flow"]
                ATCFL1["Read existing tasks from JSON file"]
                ATCFL2["Handle legacy format migration if needed"]
                ATCFL3["Validate dependencies across all tags"]
                ATCFL4["Generate task data using AI or manual input"]
                ATCFL5["Create new task object with validated data"]
                ATCFL6["Write updated tasks back to JSON file"]
                ATCFL7["Return task ID and telemetry data"]
            end
        end
    end
    
    %% TASK ANALYSIS FUNCTIONAL AREA
    subgraph TaskAnalysisManagement["Task-Analysis-Management-Area"]
        subgraph listTasksDirect["list-tasks.js (Direct Function)"]
            subgraph ltdImports["list-tasks-direct-Imports"]
                LTDI1["IMPORT: listTasks, FROM: G:\claude-task-master\claude-task-master\scripts\modules\task-manager\list-tasks.js"]
                LTDI2["IMPORT: enableSilentMode, FROM: G:\claude-task-master\claude-task-master\scripts\modules\utils.js"]
            end
            
            subgraph ltdFunctions["list-tasks-direct-Functions"]
                LTDF1["FUNCTION: listTasksDirect"]
            end
            
            subgraph ltdExports["list-tasks-direct-Exports"]
                LTDE1["EXP: listTasksDirect"]
            end
            
            subgraph ltdFlow["list-tasks-direct-Execution Flow"]
                LTDFL1["Enable silent mode for MCP compatibility"]
                LTDFL2["Create logger wrapper for consistent output"]
                LTDFL3["Validate parameters and resolve paths"]
                LTDFL4["Delegate to core list tasks business logic"]
                LTDFL5["Return structured JSON response"]
            end
        end
        
        subgraph listTasksCore["list-tasks.js (Core Business Logic)"]
            subgraph ltcImports["list-tasks-core-Imports"]
                LTCI1["IMPORT: Table, FROM: cli-table3"]
                LTCI2["IMPORT: readJSON, FROM: G:\claude-task-master\claude-task-master\scripts\modules\utils.js"]
                LTCI3["IMPORT: getStatusWithColor, FROM: G:\claude-task-master\claude-task-master\scripts\modules\ui.js"]
            end
            
            subgraph ltcFunctions["list-tasks-core-Functions"]
                LTCF1["FUNCTION: listTasks"]
                LTCF2["FUNCTION: filterTasksByStatus"]
                LTCF3["FUNCTION: formatTasksForDisplay"]
            end
            
            subgraph ltcExports["list-tasks-core-Exports"]
                LTCE1["EXP: listTasks (default)"]
            end
            
            subgraph ltcFlow["list-tasks-core-Execution Flow"]
                LTCFL1["Read tasks from JSON file with tag resolution"]
                LTCFL2["Apply status and priority filters"]
                LTCFL3["Sort tasks by specified criteria"]
                LTCFL4["Format output based on requested format"]
                LTCFL5["Return filtered and formatted task data"]
            end
        end
        
        subgraph analyzeComplexityDirect["analyze-task-complexity.js (Direct Function)"]
            subgraph acdImports["analyze-complexity-direct-Imports"]
                ACDI1["IMPORT: analyzeTaskComplexity, FROM: G:\claude-task-master\claude-task-master\scripts\modules\task-manager\analyze-task-complexity.js"]
            end
            
            subgraph acdFunctions["analyze-complexity-direct-Functions"]
                ACDF1["FUNCTION: analyzeTaskComplexityDirect"]
            end
            
            subgraph acdExports["analyze-complexity-direct-Exports"]
                ACDE1["EXP: analyzeTaskComplexityDirect"]
            end
        end
    end
    
    %% TASK ORGANIZATION FUNCTIONAL AREA
    subgraph TaskOrganizationManagement["Task-Organization-Management-Area"]
        subgraph expandTaskDirect["expand-task.js (Direct Function)"]
            subgraph etdImports["expand-task-direct-Imports"]
                ETDI1["IMPORT: expandTask, FROM: G:\claude-task-master\claude-task-master\scripts\modules\task-manager\expand-task.js"]
            end
            
            subgraph etdFunctions["expand-task-direct-Functions"]
                ETDF1["FUNCTION: expandTaskDirect"]
            end
            
            subgraph etdExports["expand-task-direct-Exports"]
                ETDE1["EXP: expandTaskDirect"]
            end
        end
        
        subgraph moveTaskDirect["move-task.js (Direct Function)"]
            subgraph mtdImports["move-task-direct-Imports"]
                MTDI1["IMPORT: moveTask, FROM: G:\claude-task-master\claude-task-master\scripts\modules\task-manager\move-task.js"]
            end
            
            subgraph mtdFunctions["move-task-direct-Functions"]
                MTDF1["FUNCTION: moveTaskDirect"]
            end
            
            subgraph mtdExports["move-task-direct-Exports"]
                MTDE1["EXP: moveTaskDirect"]
            end
        end
        
        subgraph validateDependenciesDirect["validate-dependencies.js (Direct Function)"]
            subgraph vddImports["validate-dependencies-direct-Imports"]
                VDDI1["IMPORT: validateDependencies, FROM: G:\claude-task-master\claude-task-master\scripts\modules\task-manager\validate-dependencies.js"]
            end
            
            subgraph vddFunctions["validate-dependencies-direct-Functions"]
                VDDF1["FUNCTION: validateDependenciesDirect"]
            end
            
            subgraph vddExports["validate-dependencies-direct-Exports"]
                VDDE1["EXP: validateDependenciesDirect"]
            end
        end
    end
    
    %% CORE UTILITIES FUNCTIONAL AREA
    subgraph CoreUtilitiesManagement["Core-Utilities-Management-Area"]
        subgraph envUtils["env-utils.js"]
            subgraph euFunctions["env-utils-Functions"]
                EUF1["FUNCTION: withSessionEnv"]
            end
            
            subgraph euExports["env-utils-Exports"]
                EUE1["EXP: withSessionEnv"]
            end
            
            subgraph euFlow["env-utils-Execution Flow"]
                EUFL1["Store original environment variables"]
                EUFL2["Set temporary environment from session"]
                EUFL3["Execute provided action function"]
                EUFL4["Restore original environment in finally block"]
            end
        end
        
        subgraph pathUtils["path-utils.js"]
            subgraph puImports["path-utils-core-Imports"]
                PUI1["IMPORT: findTasksPath, FROM: G:\claude-task-master\claude-task-master\src\utils\path-utils.js"]
            end
            
            subgraph puFunctions["path-utils-core-Functions"]
                PUF1["FUNCTION: findTasksPath"]
            end
            
            subgraph puExports["path-utils-core-Exports"]
                PUE1["EXP: findTasksPath"]
            end
        end
    end
    
    %% DELEGATION PATTERNS
    addTaskDirect -.->|"delegates business logic to"| addTaskCore
    listTasksDirect -.->|"delegates business logic to"| listTasksCore
    expandTaskDirect & moveTaskDirect & validateDependenciesDirect -.->|"delegates business logic to"| TaskOrganizationManagement
    
    %% SHARED INFRASTRUCTURE INHERITANCE RELATIONSHIPS
    SharedInfrastructureImports -.->|"provides common imports"| TaskLifecycleManagement & TaskAnalysisManagement & TaskOrganizationManagement & CoreUtilitiesManagement
    
    SharedInfrastructureDependencies -.->|"provides core dependencies"| TaskLifecycleManagement
    SharedInfrastructureDependencies -.->|"provides core dependencies"| TaskAnalysisManagement
    SharedInfrastructureDependencies -.->|"provides core dependencies"| TaskOrganizationManagement
    
    SharedInfrastructureConstants -.->|"provides base constants"| TaskLifecycleManagement
    SharedInfrastructureConstants -.->|"provides base constants"| TaskAnalysisManagement
    SharedInfrastructureConstants -.->|"provides base constants"| TaskOrganizationManagement
    
    SharedInfrastructureParameters -.->|"standardizes parameters"| TaskLifecycleManagement
    SharedInfrastructureParameters -.->|"standardizes parameters"| TaskAnalysisManagement
    SharedInfrastructureParameters -.->|"standardizes parameters"| TaskOrganizationManagement
    
    %% CORE IMPLEMENTATION LAYER INTERNAL RELATIONSHIPS
    taskMasterCore -.-> |"orchestrates"| --> TaskLifecycleManagement & TaskAnalysisManagement & TaskOrganizationManagement
    CoreUtilitiesManagement -- "provides utilities to" --> TaskLifecycleManagement & TaskAnalysisManagement & TaskOrganizationManagement
    
    %% CROSS-LAYER RELATIONSHIP TO SHARED INFRASTRUCTURE
    TaskLifecycleManagement -- "uses shared config" --> SharedInfrastructureConstants
    TaskAnalysisManagement -- "uses shared logging" --> SharedInfrastructureConstants
    TaskOrganizationManagement -- "uses shared paths" --> SharedInfrastructureConstants
    
    %% EXECUTION FLOW CONNECTIONS
    ATDFL1 --> ATDFL2
    ATDFL2 --> ATDFL3
    ATDFL3 --> ATDFL4
    ATDFL4 --> ATDFL5
    ATDFL5 --> ATDFL6
    ATDFL6 --> ATDFL7
    
    ATCFL1 --> ATCFL2
    ATCFL2 --> ATCFL3
    ATCFL3 --> ATCFL4
    ATCFL4 --> ATCFL5
    ATCFL5 --> ATCFL6
    ATCFL6 --> ATCFL7
    
    LTDFL1 --> LTDFL2
    LTDFL2 --> LTDFL3
    LTDFL3 --> LTDFL4
    LTDFL4 --> LTDFL5
    
    LTCFL1 --> LTCFL2
    LTCFL2 --> LTCFL3
    LTCFL3 --> LTCFL4
    LTCFL4 --> LTCFL5
    
    EUFL1 --> EUFL2
    EUFL2 --> EUFL3
    EUFL3 --> EUFL4
