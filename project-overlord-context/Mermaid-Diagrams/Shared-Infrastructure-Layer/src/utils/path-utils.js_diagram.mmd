flowchart TB
    subgraph Imports["Imports"]
        I1["IMPORT: path, FROM: path"]
        I2["IMPORT: fs, FROM: fs"]
        I3["IMPORT: TASKMASTER_TASKS_FILE, FROM: /claude-task-master/src/constants/paths.js"]
        I4["IMPORT: LEGACY_TASKS_FILE, FROM: /claude-task-master/src/constants/paths.js"]
        I5["IMPORT: TASKMASTER_DOCS_DIR, FROM: /claude-task-master/src/constants/paths.js"]
        I6["IMPORT: TASKMASTER_REPORTS_DIR, FROM: /claude-task-master/src/constants/paths.js"]
        I7["IMPORT: COMPLEXITY_REPORT_FILE, FROM: /claude-task-master/src/constants/paths.js"]
        I8["IMPORT: TASKMASTER_CONFIG_FILE, FROM: /claude-task-master/src/constants/paths.js"]
        I9["IMPORT: LEGACY_CONFIG_FILE, FROM: /claude-task-master/src/constants/paths.js"]
        I10["IMPORT: getLoggerOrDefault, FROM: /claude-task-master/src/utils/logger-utils.js"]
    end
    
    subgraph Dependencies["Dependencies"]
        D1["DEP: Node.js file system for file existence checks and directory creation"]
        D2["DEP: Node.js path module for cross-platform path operations"]
    end
    
    subgraph FunctionsDefined["Functions Defined"]
        FU1["FUNCTION: normalizeProjectRoot"]
        FU2["FUNCTION: findProjectRoot"]
        FU3["FUNCTION: findTasksPath"]
        FU4["FUNCTION: findPRDPath"]
        FU5["FUNCTION: findComplexityReportPath"]
        FU6["FUNCTION: resolveTasksOutputPath"]
        FU7["FUNCTION: resolveComplexityReportOutputPath"]
        FU8["FUNCTION: findConfigPath"]
    end
    
    subgraph Exports["Exports"]
        E1["EXP: normalizeProjectRoot"]
        E2["EXP: findProjectRoot"]
        E3["EXP: findTasksPath"]
        E4["EXP: findPRDPath"]
        E5["EXP: findComplexityReportPath"]
        E6["EXP: resolveTasksOutputPath"]
        E7["EXP: resolveComplexityReportOutputPath"]
        E8["EXP: findConfigPath"]
    end
    
    subgraph Parameters["Parameters"]
        P1["PARAM: {string} projectRoot - The project root path to normalize"]
        P2["PARAM: {string} startDir - Directory to start searching from"]
        P3["PARAM: {string|null} explicitPath - Explicit path provided by user (highest priority)"]
        P4["PARAM: {Object|null} args - Args object from MCP args (optional)"]
        P5["PARAM: {Object|null} log - Logger object (optional)"]
    end
    
    subgraph Constants["Const Declarations"]
        C1["CONST: projectMarkers, VALUE: array of file patterns that indicate project root"]
        C2["CONST: currentDir, VALUE: resolved starting directory path"]
        C3["CONST: rootDir, VALUE: system root directory from path.parse"]
        C4["CONST: maxDepth, VALUE: 50 to prevent infinite loops"]
        C5["CONST: logger, VALUE: resolved logger instance from getLoggerOrDefault"]
        C6["CONST: rawProjectRoot, VALUE: project root from args or findProjectRoot"]
        C7["CONST: projectRoot, VALUE: normalized project root path"]
        C8["CONST: resolvedPath, VALUE: absolute path resolved from explicit or relative path"]
        C9["CONST: possiblePaths, VALUE: array of potential file locations to check"]
        C10["CONST: locations, VALUE: array of directory locations to search"]
        C11["CONST: fileNames, VALUE: array of possible file names to match"]
        C12["CONST: defaultPath, VALUE: constructed default output path"]
        C13["CONST: outputDir, VALUE: directory portion of output path"]
        C14["CONST: filename, VALUE: tag-aware filename for reports"]
    end
    
    subgraph ExecutionFlow["Execution Flow"]
        FL1["Normalize project paths to prevent double .taskmaster directories"]
        FL2["Search upward through directory tree looking for project markers"]
        FL3["Apply priority-based path resolution with explicit paths taking precedence"]
        FL4["Check multiple possible locations following new vs legacy structure"]
        FL5["Issue deprecation warnings for legacy file locations"]
        FL6["Create necessary output directories when resolving write paths"]
        FL7["Return resolved paths or null if no valid files found"]
    end
    
    subgraph pathUtils["path-utils.js"]
        Imports
        Dependencies
        FunctionsDefined
        Exports
        Parameters
        Constants
        ExecutionFlow
    end
    
    FL1 --> FL2
    FL2 --> FL3
    FL3 --> FL4
    FL4 --> FL5
    FL5 --> FL6
    FL6 --> FL7