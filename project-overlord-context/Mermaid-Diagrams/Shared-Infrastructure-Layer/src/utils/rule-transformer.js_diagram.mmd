```mermaid
flowchart TB
    subgraph Imports["Imports"]
        I1["IMPORT: fs, FROM: fs"]
        I2["IMPORT: path, FROM: path"]
        I3["IMPORT: url, FROM: url"]
        I4["IMPORT: ../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        I5["IMPORT: ../constants/profiles.js, FROM: /claude-task-master/src/constants/profiles.js"]
        I6["IMPORT: ../profiles/index.js, FROM: /claude-task-master/src/profiles/index.js"]
    end
    subgraph Dependencies["Dependencies"]
        D1["DEP: File system"]
        D2["DEP: Path resolution"]
    end
    subgraph FunctionsDefined["Functions Defined"]
        FU1["FUNCTION: isValidProfile"]
        FU2["FUNCTION: getRulesProfile"]
        FU3["FUNCTION: replaceBasicTerms"]
        FU4["FUNCTION: replaceToolReferences"]
        FU5["FUNCTION: updateDocReferences"]
        FU6["FUNCTION: updateFileReferences"]
        FU7["FUNCTION: transformRuleContent"]
        FU8["FUNCTION: convertRuleToProfileRule"]
        FU9["FUNCTION: convertAllRulesToProfileRules"]
        FU10["FUNCTION: removeProfileRules"]
    end
    subgraph Exports["Exports"]
        E1["EXP: isValidProfile"]
        E2["EXP: getRulesProfile"]
        E3["EXP: convertRuleToProfileRule"]
        E4["EXP: convertAllRulesToProfileRules"]
        E5["EXP: removeProfileRules"]
    end
    subgraph Parameters["Parameters"]
        P1["PARAM: {string} name - Profile name"]
        P2["PARAM: {string} content - The content to transform"]
        P3["PARAM: {Object} conversionConfig - The conversion configuration"]
        P4["PARAM: {Object} globalReplacements - Global text replacements"]
        P5["PARAM: {string} sourcePath - Path to the source .mdc file"]
        P6["PARAM: {string} targetPath - Path to the target file"]
        P7["PARAM: {Object} profile - The profile configuration"]
        P8["PARAM: {string} projectRoot - Target project directory"]
        P9["PARAM: {Object} profile - Profile configuration"]
    end
    subgraph Constants["Const Declarations"]
        C1["CONST: profileKey, VALUE: `${name}Profile`"]
        C2["CONST: profile, VALUE: profilesModule[profileKey]"]
        C3["CONST: toolNames, VALUE: conversionConfig.toolNames"]
        C4["CONST: toolReferencePattern, VALUE: new RegExp("]
        C5["CONST: content, VALUE: fs.readFileSync(sourcePath, 'utf8')"]
        C6["CONST: transformedContent, VALUE: transformRuleContent("]
        C7["CONST: targetDir, VALUE: path.dirname(targetPath)"]
        C8["CONST: __filename, VALUE: fileURLToPath(import.meta.url)"]
        C9["CONST: __dirname, VALUE: path.dirname(__filename)"]
        C10["CONST: sourceDir, VALUE: path.join(__dirname, '..', '..', 'assets', 'rules')"]
        C11["CONST: targetDir, VALUE: path.join(projectRoot, profile.rulesDir)"]
        C12["CONST: assetsDir, VALUE: path.join(__dirname, '..', '..', 'assets')"]
        C13["CONST: sourceFiles, VALUE: Object.keys(profile.fileMap)"]
        C14["CONST: isAssetFile, VALUE: !sourceFile.startsWith('rules/')"]
        C15["CONST: sourcePath, VALUE: path.join(assetsDir, sourceFile)"]
        C16["CONST: targetFilename, VALUE: profile.fileMap[sourceFile]"]
        C17["CONST: targetPath, VALUE: path.join(targetDir, targetFilename)"]
        C18["CONST: targetFileDir, VALUE: path.dirname(targetPath)"]
        C19["CONST: targetDir, VALUE: path.join(projectRoot, profile.rulesDir)"]
        C20["CONST: profileDir, VALUE: path.join(projectRoot, profile.profileDir)"]
        C21["CONST: result, VALUE: {"]
        C22["CONST: sourceFiles, VALUE: Object.keys(profile.fileMap)"]
        C23["CONST: taskMasterFiles, VALUE: sourceFiles.map("]
        C24["CONST: allFiles, VALUE: fs.readdirSync(targetDir, { recursive: true })"]
        C25["CONST: allFilePaths, VALUE: allFiles"]
        C26["CONST: fullPath, VALUE: path.join(targetDir, file)"]
        C27["CONST: filePath, VALUE: path.join(targetDir, taskMasterFile)"]
        C28["CONST: remainingFiles, VALUE: allFilePaths.filter("]
        C29["CONST: remainingContents, VALUE: fs.readdirSync(profileDir)"]
        C30["CONST: preservedNotice, VALUE: `Preserved ${remainingContents.length} existing files/folders in ${profile.profileDir}`"]
    end
    subgraph ExecutionFlow["Execution Flow"]
        FL1["Identify and load dependencies and modules"]
        FL2["Define functions and core logic for this module"]
        FL3["Expose public API via exports"]
    end
    subgraph FileName["rule-transformer.js"]
        Imports
        Dependencies
        FunctionsDefined
        Exports
        Parameters
        Constants
        ExecutionFlow
    end
    FL1 --> FL2
    FL2 --> FL3
```