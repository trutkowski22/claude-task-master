flowchart TB
    %% SHARED INFRASTRUCTURE SECTIONS - Common imports used across all components
    subgraph SharedImports["Shared-Infrastructure-Imports"]
        SI1["IMPORT: path, FROM: path"]
        SI2["IMPORT: fs, FROM: fs"]
        SI3["IMPORT: z, FROM: zod"]
        SI4["IMPORT: chalk, FROM: chalk"]
        SI5["IMPORT: FastMCP, FROM: fastmcp"]
        SI6["IMPORT: LRUCache, FROM: lru-cache"]
    end
    
    subgraph SharedDependencies["Shared-Infrastructure-Dependencies"]
        SD1["DEP: Node.js file system for file operations"]
        SD2["DEP: Node.js path module for cross-platform paths"]
        SD3["DEP: Zod schema validation library"]
        SD4["DEP: Chalk for console styling"]
        SD5["DEP: FastMCP for MCP server functionality"]
        SD6["DEP: LRU cache for efficient caching"]
    end
    
    subgraph SharedConstants["Shared-Infrastructure-Constants"]
        SC1["CONST: projectRoot, VALUE: resolved project root directory"]
        SC2["CONST: logger, VALUE: unified logging instance"]
        SC3["CONST: config, VALUE: merged configuration with defaults"]
        SC4["CONST: cache, VALUE: LRU cache instance"]
    end
    
    subgraph SharedParameters["Shared-Infrastructure-Parameters"]
        SP1["PARAM: {string} projectRoot - Project root directory path"]
        SP2["PARAM: {object|null} session - MCP session object"]
        SP3["PARAM: {object} config - Configuration object"]
        SP4["PARAM: {string|null} explicitPath - User-provided explicit path"]
    end
    
    %% SYSTEM INTEGRATION FUNCTIONAL AREA
    subgraph SystemIntegration["System-Integration-Area"]
        subgraph taskMasterCore["task-master-core.js"]
            subgraph tmcImports["task-master-core-Imports"]
                TMCI1["IMPORT: listTasksDirect, FROM: G:\claude-task-master\claude-task-master\mcp-server\src\core\direct-functions\list-tasks.js"]
                TMCI2["IMPORT: findTasksPath, FROM: G:\claude-task-master\claude-task-master\mcp-server\src\core\utils\path-utils.js"]
                TMCI3["IMPORT: 35+ direct function implementations from core directory"]
            end
            
            subgraph tmcConstants["task-master-core-Constants"]
                TMCC1["CONST: directFunctions, VALUE: Map containing all direct function implementations"]
            end
            
            subgraph tmcExports["task-master-core-Exports"]
                TMCE1["EXP: directFunctions - centralized function registry"]
                TMCE2["EXP: findTasksPath - utility re-export"]
                TMCE3["EXP: 35+ individual direct functions"]
            end
        end
        
        subgraph serverJs["server.js"]
            subgraph sjImports["server-Imports"]
                SJI1["IMPORT: TaskMasterMCPServer, FROM: G:\claude-task-master\claude-task-master\mcp-server\src\index.js"]
                SJI2["IMPORT: dotenv, FROM: dotenv"]
                SJI3["IMPORT: logger, FROM: G:\claude-task-master\claude-task-master\mcp-server\src\logger.js"]
            end
            
            subgraph sjFunctions["server-Functions"]
                SJF1["FUNCTION: startServer"]
            end
        end
        
        subgraph devJs["dev.js"]
            subgraph djImports["dev-Imports"]
                DJI1["IMPORT: dotenv, FROM: dotenv"]
                DJI2["IMPORT: runCLI, FROM: G:\claude-task-master\claude-task-master\scripts\modules\commands.js"]
            end
        end
        
        subgraph initJs["init.js"]
            subgraph ijImports["init-Imports"]
                IJI1["IMPORT: fs, path, readline, chalk, figlet, boxen from various packages"]
                IJI2["IMPORT: isSilentMode, FROM: G:\claude-task-master\claude-task-master\scripts\modules\utils.js"]
                IJI3["IMPORT: insideGitWorkTree, FROM: G:\claude-task-master\claude-task-master\scripts\modules\utils\git-utils.js"]
                IJI4["IMPORT: RULE_PROFILES, FROM: G:\claude-task-master\claude-task-master\src\constants\profiles.js"]
                IJI5["IMPORT: All path constants, FROM: G:\claude-task-master\claude-task-master\src\constants\paths.js"]
            end
            
            subgraph ijFunctions["init-Functions"]
                IJF1["FUNCTION: initializeProject"]
                IJF2["FUNCTION: createProjectStructure"]
                IJF3["FUNCTION: displayBanner"]
                IJF4["FUNCTION: addShellAliases"]
                IJF5["FUNCTION: copyTemplateFile"]
            end
            
            subgraph ijExports["init-Exports"]
                IJE1["EXP: initializeProject"]
                IJE2["EXP: log"]
            end
        end
        
        subgraph indexJs["index.js"]
            subgraph idxImports["index-Imports"]
                IDXI1["IMPORT: fileURLToPath, dirname, resolve from url/path modules"]
                IDXI2["IMPORT: spawn, FROM: child_process"]
                IDXI3["IMPORT: Command, FROM: commander"]
            end
            
            subgraph idxFunctions["index-Functions"]
                IDXF1["FUNCTION: initProject"]
                IDXF2["FUNCTION: runInitCLI"]
            end
            
            subgraph idxExports["index-Exports"]
                IDXE1["EXP: devScriptPath"]
                IDXE2["EXP: initProject"]
                IDXE3["EXP: runInitCLI"]
                IDXE4["EXP: version"]
            end
        end
    end
    
    %% PATH MANAGEMENT FUNCTIONAL AREA
    subgraph PathManagement["Path-Management-Area"]
        subgraph taskMaster["task-master.js"]
            subgraph tmImports["task-master-Imports"]
                TMI1["IMPORT: TASKMASTER_DIR, FROM: G:\claude-task-master\claude-task-master\src\constants\paths.js"]
                TMI2["IMPORT: TASKMASTER_TASKS_FILE, FROM: G:\claude-task-master\claude-task-master\src\constants\paths.js"]
                TMI3["IMPORT: findProjectRoot, FROM: G:\claude-task-master\claude-task-master\src\utils\path-utils.js"]
            end
            
            subgraph tmFunctions["task-master-Functions"]
                TMF1["FUNCTION: constructor"]
                TMF2["FUNCTION: getProjectRoot"]
                TMF3["FUNCTION: getTaskMasterDir"]
                TMF4["FUNCTION: getTasksPath"]
                TMF5["FUNCTION: initTaskMaster"]
            end
            
            subgraph tmExports["task-master-Exports"]
                TME1["EXP: TaskMaster"]
                TME2["EXP: initTaskMaster"]
            end
        end
        
        subgraph pathUtils["path-utils.js"]
            subgraph puImports["path-utils-Imports"]
                PUI1["IMPORT: TASKMASTER_TASKS_FILE, FROM: /claude-task-master/src/constants/paths.js"]
                PUI2["IMPORT: getLoggerOrDefault, FROM: /claude-task-master/src/utils/logger-utils.js"]
            end
            
            subgraph puFunctions["path-utils-Functions"]
                PUF1["FUNCTION: normalizeProjectRoot"]
                PUF2["FUNCTION: findProjectRoot"]
                PUF3["FUNCTION: findTasksPath"]
                PUF4["FUNCTION: findConfigPath"]
            end
            
            subgraph puExports["path-utils-Exports"]
                PUE1["EXP: normalizeProjectRoot"]
                PUE2["EXP: findProjectRoot"]
                PUE3["EXP: findTasksPath"]
                PUE4["EXP: findConfigPath"]
            end
        end
        
        subgraph pathsConst["paths.js"]
            subgraph pcExports["paths-Exports"]
                PCE1["EXP: TASKMASTER_DIR"]
                PCE2["EXP: TASKMASTER_TASKS_FILE"]
                PCE3["EXP: TASKMASTER_CONFIG_FILE"]
                PCE4["EXP: PROJECT_MARKERS"]
            end
            
            subgraph pcConstants["paths-Constants"]
                PCC1["CONST: TASKMASTER_DIR, VALUE: .taskmaster directory path"]
                PCC2["CONST: TASKMASTER_TASKS_FILE, VALUE: main tasks JSON file path"]
                PCC3["CONST: PROJECT_MARKERS, VALUE: array of project identification files"]
            end
        end
    end
    
    %% AI SERVICES FUNCTIONAL AREA
    subgraph AIServices["AI-Services-Area"]
        subgraph aiUnified["ai-services-unified.js"]
            subgraph auImports["ai-services-Imports"]
                AUI1["IMPORT: MODEL_MAP, FROM: /claude-task-master/claude-task-master/scripts/modules/config-manager.js"]
                AUI2["IMPORT: findProjectRoot, FROM: /claude-task-master/claude-task-master/scripts/modules/utils.js"]
                AUI3["IMPORT: AnthropicAIProvider, FROM: /claude-task-master/claude-task-master/src/ai-providers/index.js"]
            end
            
            subgraph auFunctions["ai-services-Functions"]
                AUF1["FUNCTION: generateTextService"]
                AUF2["FUNCTION: streamTextService"]
                AUF3["FUNCTION: generateObjectService"]
                AUF4["FUNCTION: logAiUsage"]
            end
            
            subgraph auExports["ai-services-Exports"]
                AUE1["EXP: generateTextService"]
                AUE2["EXP: streamTextService"]
                AUE3["EXP: generateObjectService"]
                AUE4["EXP: logAiUsage"]
            end
            
            subgraph auConstants["ai-services-Constants"]
                AUC1["CONST: PROVIDERS, VALUE: object mapping provider names to instances"]
                AUC2["CONST: MAX_RETRIES, VALUE: 2 maximum retry attempts"]
                AUC3["CONST: userId, VALUE: unique user identifier"]
            end
        end
    end
    
    %% CONFIGURATION MANAGEMENT FUNCTIONAL AREA
    subgraph ConfigurationManagement["Configuration-Management-Area"]
        subgraph configManager["config-manager.js"]
            subgraph cmImports["config-manager-Imports"]
                CMI1["IMPORT: LEGACY_CONFIG_FILE, FROM: G:\claude-task-master\claude-task-master\src\constants\paths.js"]
                CMI2["IMPORT: ALL_PROVIDERS, FROM: G:\claude-task-master\claude-task-master\src\constants\providers.js"]
                CMI3["IMPORT: findConfigPath, FROM: G:\claude-task-master\claude-task-master\src\utils\path-utils.js"]
            end
            
            subgraph cmFunctions["config-manager-Functions"]
                CMF1["FUNCTION: getConfig"]
                CMF2["FUNCTION: writeConfig"]
                CMF3["FUNCTION: validateProvider"]
                CMF4["FUNCTION: getMainProvider"]
                CMF5["FUNCTION: getParametersForRole"]
            end
            
            subgraph cmExports["config-manager-Exports"]
                CME1["EXP: getConfig"]
                CME2["EXP: writeConfig"]
                CME3["EXP: validateProvider"]
                CME4["EXP: MODEL_MAP"]
            end
            
            subgraph cmConstants["config-manager-Constants"]
                CMC1["CONST: MODEL_MAP, VALUE: loaded supported models from JSON"]
                CMC2["CONST: DEFAULTS, VALUE: default configuration values"]
                CMC3["CONST: loadedConfig, VALUE: cached configuration object"]
            end
        end
    end
    
    %% CONTEXT MANAGEMENT FUNCTIONAL AREA
    subgraph ContextManagement["Context-Management-Area"]
        subgraph contextManager["context-manager.js"]
            subgraph ctmImports["context-manager-Imports"]
                CTMI1["IMPORT: FastMCP, FROM: fastmcp"]
                CTMI2["IMPORT: LRUCache, FROM: lru-cache"]
            end
            
            subgraph ctmClasses["context-manager-Classes"]
                CTMC1["CLASS: ContextManager"]
            end
            
            subgraph ctmFunctions["context-manager-Functions"]
                CTMF1["FUNCTION: constructor"]
                CTMF2["FUNCTION: getContext"]
                CTMF3["FUNCTION: updateContext"]
                CTMF4["FUNCTION: invalidateContext"]
                CTMF5["FUNCTION: getStats"]
            end
            
            subgraph ctmExports["context-manager-Exports"]
                CTME1["EXP: ContextManager"]
                CTME2["EXP: contextManager - singleton instance"]
            end
            
            subgraph ctmConstants["context-manager-Constants"]
                CTMC2["CONST: cache, VALUE: LRU cache instance with TTL"]
                CTMC3["CONST: stats, VALUE: tracking object for performance"]
            end
        end
    end
    
    %% CONSTANTS FUNCTIONAL AREA
    subgraph ConstantsManagement["Constants-Management-Area"]
        subgraph taskStatus["task-status.js"]
            subgraph tsExports["task-status-Exports"]
                TSE1["EXP: TASK_STATUS_OPTIONS"]
                TSE2["EXP: isValidTaskStatus"]
            end
            
            subgraph tsFunctions["task-status-Functions"]
                TSF1["FUNCTION: isValidTaskStatus"]
            end
            
            subgraph tsConstants["task-status-Constants"]
                TSC1["CONST: TASK_STATUS_OPTIONS, VALUE: array of valid status strings"]
            end
        end
        
        subgraph taskPriority["task-priority.js"]
            subgraph tpExports["task-priority-Exports"]
                TPE1["EXP: TASK_PRIORITY_OPTIONS"]
                TPE2["EXP: isValidTaskPriority"]
            end
            
            subgraph tpConstants["task-priority-Constants"]
                TPC1["CONST: TASK_PRIORITY_OPTIONS, VALUE: array of valid priority levels"]
            end
        end
    end
    
    %% EMPTY SUBGRAPHS (per instructions - include even if empty)
    subgraph SharedUtilities["Shared-Infrastructure-Utilities"]
        SU1["Various utility functions shared across layers"]
    end
    
    subgraph SharedTypes["Shared-Infrastructure-Types"]
        ST1["Common type definitions and schemas"]
    end
    
    subgraph SharedValidation["Shared-Infrastructure-Validation"]
        SV1["Shared validation logic and schemas"]
    end
    
    %% INHERITANCE RELATIONSHIPS - Show how components inherit from shared infrastructure
    SharedImports -.->|"inherits common imports"| SystemIntegration
    SharedImports -.->|"inherits common imports"| PathManagement
    SharedImports -.->|"inherits common imports"| AIServices
    SharedImports -.->|"inherits common imports"| ConfigurationManagement
    SharedImports -.->|"inherits common imports"| ContextManagement
    SharedImports -.->|"inherits common imports"| ConstantsManagement
    
    SharedDependencies -.->|"provides core dependencies"| SystemIntegration
    SharedDependencies -.->|"provides core dependencies"| PathManagement
    SharedDependencies -.->|"provides core dependencies"| AIServices
    SharedDependencies -.->|"provides core dependencies"| ConfigurationManagement
    SharedDependencies -.->|"provides core dependencies"| ContextManagement
    
    SharedConstants -.->|"provides base constants"| SystemIntegration
    SharedConstants -.->|"provides base constants"| PathManagement
    SharedConstants -.->|"provides base constants"| ConfigurationManagement
    SharedConstants -.->|"provides base constants"| ContextManagement
    
    SharedParameters -.->|"standardizes parameters"| SystemIntegration
    SharedParameters -.->|"standardizes parameters"| PathManagement
    SharedParameters -.->|"standardizes parameters"| AIServices
    SharedParameters -.->|"standardizes parameters"| ConfigurationManagement
    SharedParameters -.->|"standardizes parameters"| ContextManagement
    
    %% FUNCTIONAL AREA RELATIONSHIPS
    SystemIntegration -->|"orchestrates all"| PathManagement
    SystemIntegration -->|"orchestrates all"| ConfigurationManagement
    SystemIntegration -->|"orchestrates all"| AIServices
    SystemIntegration -->|"orchestrates all"| ContextManagement
    PathManagement -->|"provides paths to"| ConfigurationManagement
    PathManagement -->|"provides paths to"| AIServices
    ConfigurationManagement -->|"provides config to"| AIServices
    ContextManagement -->|"provides caching to"| AIServices
    ConstantsManagement -->|"provides validation to"| PathManagement
    ConstantsManagement -->|"provides validation to"| ConfigurationManagement
    
    %% INTERNAL COMPONENT RELATIONSHIPS
    %% System Integration Internal Flow
    taskMasterCore -->|"central orchestration"| SystemIntegration
    serverJs -->|"MCP server lifecycle"| SystemIntegration
    devJs -->|"CLI entry point"| SystemIntegration
    initJs -->|"project initialization"| SystemIntegration
    indexJs -->|"package entry point"| SystemIntegration
    
    %% Cross-area dependencies
    pathsConst -->|"path constants"| pathUtils
    pathUtils -->|"path resolution"| taskMaster
    configManager -->|"configuration"| aiUnified
    contextManager -->|"caching services"| aiUnified
    taskStatus -->|"status validation"| PathManagement
    taskPriority -->|"priority validation"| PathManagement
    
    %% System integration dependencies
    taskMasterCore -->|"uses path utilities"| pathUtils
    serverJs -->|"uses logging"| contextManager
    initJs -->|"uses configuration"| configManager
    indexJs -->|"delegates to"| devJs