flowchart TB
    %% SHARED INFRASTRUCTURE INHERITANCE - Interface Layer inherits from Shared Infrastructure
    subgraph SharedInfrastructureImports["Shared-Infrastructure-Imports"]
        SI1["IMPORT: z, FROM: zod"]
        SI2["IMPORT: path, FROM: path"]
        SI3["IMPORT: fs, FROM: fs"]
        SI4["IMPORT: chalk, FROM: chalk"]
        SI5["IMPORT: FastMCP, FROM: fastmcp"]
        SI6["IMPORT: boxen, FROM: boxen"]
        SI7["IMPORT: Table, FROM: cli-table3"]
        SI8["IMPORT: commander, FROM: commander"]
        SI9["IMPORT: inquirer, FROM: inquirer"]
    end
    
    subgraph SharedInfrastructureDependencies["Shared-Infrastructure-Dependencies"]
        SD1["DEP: Zod schema validation system"]
        SD2["DEP: FastMCP server framework for tool registration"]
        SD3["DEP: Commander.js CLI framework"]
        SD4["DEP: Terminal UI and styling libraries"]
        SD5["DEP: Interactive prompt system"]
        SD6["DEP: File system operations"]
        SD7["DEP: Configuration management system"]
        SD8["DEP: Logging and output formatting"]
    end
    
    subgraph SharedInfrastructureConstants["Shared-Infrastructure-Constants"]
        SC1["CONST: logger, VALUE: unified logging instance"]
        SC2["CONST: config, VALUE: merged configuration with defaults"]
        SC3["CONST: projectRoot, VALUE: resolved project root directory"]
        SC4["CONST: program, VALUE: configured Commander.js program instance"]
        SC5["CONST: schema, VALUE: validation schemas for parameters"]
    end
    
    subgraph SharedInfrastructureParameters["Shared-Infrastructure-Parameters"]
        SP1["PARAM: {Object} server - FastMCP server instance"]
        SP2["PARAM: {Object} programInstance - Commander program instance"]
        SP3["PARAM: {Array} argv - Command line arguments array"]
        SP4["PARAM: {string|null} projectRoot - The resolved project root directory"]
        SP5["PARAM: {Object} context - Additional context containing session"]
        SP6["PARAM: {string} outputFormat - Output format (text or json)"]
    end
    
    %% MCP TOOLS INTERFACE - Protocol interface for MCP clients
    subgraph MCPToolsInterface["MCP-Tools-Interface-Area"]
        subgraph mcpToolsIndex["MCP Tools Registry (index.js)"]
            subgraph mtiImports["mcp-tools-index-Imports"]
                MTII1["IMPORT: registerListTasksTool, FROM: ./get-tasks.js"]
                MTII2["IMPORT: registerSetTaskStatusTool, FROM: ./set-task-status.js"]
                MTII3["IMPORT: registerAddTaskTool, FROM: ./add-task.js"]
                MTII4["IMPORT: registerAddSubtaskTool, FROM: ./add-subtask.js"]
                MTII5["IMPORT: registerShowTaskTool, FROM: ./get-task.js"]
                MTII6["IMPORT: registerExpandTaskTool, FROM: ./expand-task.js"]
                MTII7["IMPORT: registerUpdateTaskTool, FROM: ./update-task.js"]
                MTII8["IMPORT: registerValidateDependenciesTool, FROM: ./validate-dependencies.js"]
                MTII9["IMPORT: registerAnalyzeProjectComplexityTool, FROM: ./analyze.js"]
                MTII10["IMPORT: logger, FROM: ../logger.js"]
            end
            
            subgraph mtiFunctions["mcp-tools-index-Functions"]
                MTIF1["FUNCTION: registerTaskMasterTools"]
            end
            
            subgraph mtiExports["mcp-tools-index-Exports"]
                MTIE1["EXP: registerTaskMasterTools"]
                MTIE2["EXP: default object with registerTaskMasterTools"]
            end
            
            subgraph mtiFlow["mcp-tools-index-Execution Flow"]
                MTIFL1["Register all Task Master tools in logical workflow groups"]
                MTIFL2["Group 1: Initialize project setup and configuration tools"]
                MTIFL3["Group 2: Register task analysis and expansion tools"]
                MTIFL4["Group 3: Register task listing and viewing tools"]
                MTIFL5["Group 4: Register task status and management tools"]
                MTIFL6["Group 5: Register task creation and modification tools"]
                MTIFL7["Group 6: Register dependency management tools"]
                MTIFL8["Group 7: Register tag management tools"]
                MTIFL9["Group 8: Register research and utility features"]
                MTIFL10["Handle errors and log registration failures"]
            end
        end
        
        subgraph mcpAddTask["MCP Add Task Tool (add-task.js)"]
            subgraph matImports["mcp-add-task-Imports"]
                MATI1["IMPORT: z, FROM: zod"]
                MATI2["IMPORT: createErrorResponse, FROM: ./utils.js"]
                MATI3["IMPORT: handleApiResult, FROM: ./utils.js"]
                MATI4["IMPORT: withNormalizedProjectRoot, FROM: ./utils.js"]
                MATI5["IMPORT: addTaskDirect, FROM: ../core/task-master-core.js"]
                MATI6["IMPORT: findTasksPath, FROM: ../core/utils/path-utils.js"]
                MATI7["IMPORT: resolveTag, FROM: ../../../scripts/modules/utils.js"]
            end
            
            subgraph matFunctions["mcp-add-task-Functions"]
                MATF1["FUNCTION: registerAddTaskTool"]
            end
            
            subgraph matExports["mcp-add-task-Exports"]
                MATE1["EXP: registerAddTaskTool"]
            end
            
            subgraph matFlow["mcp-add-task-Execution Flow"]
                MATFL1["Register MCP tool with server using name 'add_task'"]
                MATFL2["Define Zod schema parameters for task creation"]
                MATFL3["Resolve tag context for project organization"]
                MATFL4["Find tasks.json file path in project structure"]
                MATFL5["Delegate to core implementation: addTaskDirect"]
                MATFL6["Handle API result and return formatted response"]
            end
        end
        
        subgraph mcpGetTasks["MCP Get Tasks Tool (get-tasks.js)"]
            subgraph mgtImports["mcp-get-tasks-Imports"]
                MGTI1["IMPORT: z, FROM: zod"]
                MGTI2["IMPORT: createErrorResponse, FROM: ./utils.js"]
                MGTI3["IMPORT: handleApiResult, FROM: ./utils.js"]
                MGTI4["IMPORT: listTasksDirect, FROM: ../core/task-master-core.js"]
                MGTI5["IMPORT: findTasksPath, FROM: ../core/utils/path-utils.js"]
            end
            
            subgraph mgtFunctions["mcp-get-tasks-Functions"]
                MGTF1["FUNCTION: registerListTasksTool"]
            end
            
            subgraph mgtExports["mcp-get-tasks-Exports"]
                MGTE1["EXP: registerListTasksTool"]
            end
            
            subgraph mgtFlow["mcp-get-tasks-Execution Flow"]
                MGTFL1["Register MCP tool with server using name 'list_tasks'"]
                MGTFL2["Define Zod schema parameters for task filtering"]
                MGTFL3["Validate and normalize filter parameters"]
                MGTFL4["Find tasks.json file path in project structure"]
                MGTFL5["Delegate to core implementation: listTasksDirect"]
                MGTFL6["Handle API result and return formatted response"]
            end
        end
    end
    
    %% CLI COMMANDS INTERFACE - Command-line interface for users
    subgraph CLICommandsInterface["CLI-Commands-Interface-Area"]
        subgraph cliCommands["CLI Commands Registry (commands.js)"]
            subgraph ccImports["cli-commands-Imports"]
                CCI1["IMPORT: program, FROM: commander"]
                CCI2["IMPORT: chalk, FROM: chalk"]
                CCI3["IMPORT: boxen, FROM: boxen"]
                CCI4["IMPORT: inquirer, FROM: inquirer"]
                CCI5["IMPORT: log, FROM: /claude-task-master/scripts/modules/utils.js"]
                CCI6["IMPORT: parsePRD, FROM: /claude-task-master/scripts/modules/task-manager.js"]
                CCI7["IMPORT: addDependency, FROM: /claude-task-master/scripts/modules/dependency-manager.js"]
                CCI8["IMPORT: isApiKeySet, FROM: /claude-task-master/scripts/modules/config-manager.js"]
                CCI9["IMPORT: initTaskMaster, FROM: /claude-task-master/src/task-master.js"]
                CCI10["IMPORT: displayBanner, FROM: /claude-task-master/scripts/modules/ui.js"]
            end
            
            subgraph ccFunctions["cli-commands-Functions"]
                CCF1["FUNCTION: runInteractiveSetup"]
                CCF2["FUNCTION: registerCommands"]
                CCF3["FUNCTION: setupCLI"]
                CCF4["FUNCTION: runCLI"]
                CCF5["FUNCTION: checkForUpdate"]
                CCF6["FUNCTION: resolveComplexityReportPath"]
            end
            
            subgraph ccExports["cli-commands-Exports"]
                CCE1["EXP: registerCommands"]
                CCE2["EXP: setupCLI"]
                CCE3["EXP: runCLI"]
                CCE4["EXP: checkForUpdate"]
            end
            
            subgraph ccFlow["cli-commands-Execution Flow"]
                CCFL1["Parse and validate command line arguments using Commander.js"]
                CCFL2["Register all available CLI commands with their options and handlers"]
                CCFL3["Set up interactive model configuration and API key management"]
                CCFL4["Handle command execution with proper error handling and validation"]
                CCFL5["Route commands to appropriate task management functions"]
                CCFL6["Display formatted output and user guidance messages"]
                CCFL7["Provide interactive setup for model selection with external API calls"]
                CCFL8["Manage project initialization and configuration file creation"]
            end
        end
        
        subgraph cliAddTask["CLI Add Task Command (task-manager/add-task.js)"]
            subgraph catImports["cli-add-task-Imports"]
                CATI1["IMPORT: chalk, FROM: chalk"]
                CATI2["IMPORT: boxen, FROM: boxen"]
                CATI3["IMPORT: z, FROM: zod"]
                CATI4["IMPORT: generateObjectService, FROM: /claude-task-master/scripts/modules/ai-services-unified.js"]
                CATI5["IMPORT: getDefaultPriority, FROM: /claude-task-master/scripts/modules/config-manager.js"]
                CATI6["IMPORT: ContextGatherer, FROM: /claude-task-master/scripts/modules/utils/contextGatherer.js"]
                CATI7["IMPORT: TASK_PRIORITY_OPTIONS, FROM: /claude-task-master/src/constants/task-priority.js"]
            end
            
            subgraph catFunctions["cli-add-task-Functions"]
                CATF1["FUNCTION: addTask"]
                CATF2["FUNCTION: getAllTasks"]
                CATF3["FUNCTION: buildDependencyGraph"]
            end
            
            subgraph catExports["cli-add-task-Exports"]
                CATE1["EXP: addTask"]
            end
            
            subgraph catFlow["cli-add-task-Execution Flow"]
                CATFL1["Validate and normalize input parameters including priority"]
                CATFL2["Read existing tasks data and handle legacy format migration"]
                CATFL3["Determine target tag and validate it exists"]
                CATFL4["Generate next task ID and validate dependencies"]
                CATFL5["Either use manual task data or generate with AI service"]
                CATFL6["Gather context using ContextGatherer for AI generation"]
                CATFL7["Create new task object with all required fields"]
                CATFL8["Add task to target tag and update metadata"]
                CATFL9["Save updated tasks data to file system"]
                CATFL10["Display success message with task details and next steps"]
            end
        end
        
        subgraph cliListTasks["CLI List Tasks Command (task-manager/list-tasks.js)"]
            subgraph cltImports["cli-list-tasks-Imports"]
                CLTI1["IMPORT: Table, FROM: cli-table3"]
                CLTI2["IMPORT: readJSON, FROM: /claude-task-master/scripts/modules/utils.js"]
                CLTI3["IMPORT: getStatusWithColor, FROM: /claude-task-master/scripts/modules/ui.js"]
                CLTI4["IMPORT: findTasksPath, FROM: /claude-task-master/src/utils/path-utils.js"]
            end
            
            subgraph cltFunctions["cli-list-tasks-Functions"]
                CLTF1["FUNCTION: listTasks"]
                CLTF2["FUNCTION: filterTasksByStatus"]
                CLTF3["FUNCTION: formatTasksForDisplay"]
            end
            
            subgraph cltExports["cli-list-tasks-Exports"]
                CLTE1["EXP: listTasks"]
            end
            
            subgraph cltFlow["cli-list-tasks-Execution Flow"]
                CLTFL1["Read tasks from JSON file with tag resolution"]
                CLTFL2["Apply status and priority filters"]
                CLTFL3["Sort tasks by specified criteria"]
                CLTFL4["Format output based on requested format"]
                CLTFL5["Return filtered and formatted task data"]
            end
        end
    end
    
    %% CORE IMPLEMENTATION DELEGATION - Show delegation to core business logic
    subgraph CoreImplementationDelegation["Core-Implementation-Delegation-Target"]
        subgraph coreTaskMaster["Core Task Master (task-master-core.js)"]
            CTMI1["Direct Functions: addTaskDirect, listTasksDirect"]
            CTMI2["Business Logic: Task lifecycle management"]
            CTMI3["Data Persistence: JSON file operations"]
            CTMI4["Validation: Schema and dependency validation"]
        end
        
        subgraph coreBusinessLogic["Core Business Logic Modules"]
            CBLI1["Task Management: scripts/modules/task-manager/"]
            CBLI2["AI Services: scripts/modules/ai-services-unified.js"]
            CBLI3["Configuration: scripts/modules/config-manager.js"]
            CBLI4["Utilities: Context gathering, path resolution"]
        end
    end
    
    %% PARALLEL FUNCTIONALITY PATTERN - Show same operations through different interfaces
    subgraph ParallelFunctionality["Parallel-Functionality-Pattern"]
        PF1["Add Task: MCP Tool ↔ CLI Command"]
        PF2["List Tasks: MCP Tool ↔ CLI Command"]
        PF3["Update Task: MCP Tool ↔ CLI Command"]
        PF4["Analyze Tasks: MCP Tool ↔ CLI Command"]
        PF5["Manage Dependencies: MCP Tool ↔ CLI Command"]
    end
    
    %% INTERFACE REGISTRATION PATTERNS
    subgraph InterfaceRegistration["Interface-Registration-Patterns"]
        subgraph mcpRegistration["MCP Tool Registration"]
            MR1["server.addTool() with Zod schemas"]
            MR2["Parameter validation and normalization"]
            MR3["Error handling and response formatting"]
            MR4["Session context management"]
        end
        
        subgraph cliRegistration["CLI Command Registration"]
            CR1["program.command() with Commander.js"]
            CR2["Argument parsing and validation"]
            CR3["Interactive prompts and confirmations"]
            CR4["Formatted console output"]
        end
    end
    
    %% SHARED INFRASTRUCTURE INHERITANCE RELATIONSHIPS
    SharedInfrastructureImports -.->|"provides common imports"| MCPToolsInterface
    SharedInfrastructureImports -.->|"provides common imports"| CLICommandsInterface
    
    SharedInfrastructureDependencies -.->|"provides core dependencies"| MCPToolsInterface
    SharedInfrastructureDependencies -.->|"provides core dependencies"| CLICommandsInterface
    
    SharedInfrastructureConstants -.->|"provides base constants"| MCPToolsInterface
    SharedInfrastructureConstants -.->|"provides base constants"| CLICommandsInterface
    
    SharedInfrastructureParameters -.->|"standardizes parameters"| MCPToolsInterface
    SharedInfrastructureParameters -.->|"standardizes parameters"| CLICommandsInterface
    
    %% DELEGATION RELATIONSHIPS - Both interfaces delegate to same core implementation
    mcpAddTask -.->|"delegates business logic to"| coreTaskMaster
    mcpGetTasks -.->|"delegates business logic to"| coreTaskMaster
    cliAddTask -.->|"delegates business logic to"| coreBusinessLogic
    cliListTasks -.->|"delegates business logic to"| coreBusinessLogic
    
    %% INTERFACE COORDINATION - Show parallel access patterns
    MCPToolsInterface -.->|"parallel interface to"| CLICommandsInterface
    mcpToolsIndex -.->|"same functionality as"| cliCommands
    
    %% CORE IMPLEMENTATION RELATIONSHIPS
    coreTaskMaster -->|"uses"| coreBusinessLogic
    CoreImplementationDelegation -->|"provides business logic to"| MCPToolsInterface
    CoreImplementationDelegation -->|"provides business logic to"| CLICommandsInterface
    
    %% REGISTRATION PATTERN RELATIONSHIPS
    mcpRegistration -->|"registers tools for"| MCPToolsInterface
    cliRegistration -->|"registers commands for"| CLICommandsInterface
    InterfaceRegistration -->|"manages"| ParallelFunctionality
    
    %% EXECUTION FLOW CONNECTIONS
    MTIFL1 --> MTIFL2
    MTIFL2 --> MTIFL3
    MTIFL3 --> MTIFL4
    MTIFL4 --> MTIFL5
    MTIFL5 --> MTIFL6
    MTIFL6 --> MTIFL7
    MTIFL7 --> MTIFL8
    MTIFL8 --> MTIFL9
    MTIFL9 --> MTIFL10
    
    MATFL1 --> MATFL2
    MATFL2 --> MATFL3
    MATFL3 --> MATFL4
    MATFL4 --> MATFL5
    MATFL5 --> MATFL6
    
    MGTFL1 --> MGTFL2
    MGTFL2 --> MGTFL3
    MGTFL3 --> MGTFL4
    MGTFL4 --> MGTFL5
    MGTFL5 --> MGTFL6
    
    CCFL1 --> CCFL2
    CCFL2 --> CCFL3
    CCFL3 --> CCFL4
    CCFL4 --> CCFL5
    CCFL5 --> CCFL6
    CCFL6 --> CCFL7
    CCFL7 --> CCFL8
    
    CATFL1 --> CATFL2
    CATFL2 --> CATFL3
    CATFL3 --> CATFL4
    CATFL4 --> CATFL5
    CATFL5 --> CATFL6
    CATFL6 --> CATFL7
    CATFL7 --> CATFL8
    CATFL8 --> CATFL9
    CATFL9 --> CATFL10
    
    CLTFL1 --> CLTFL2
    CLTFL2 --> CLTFL3
    CLTFL3 --> CLTFL4
    CLTFL4 --> CLTFL5