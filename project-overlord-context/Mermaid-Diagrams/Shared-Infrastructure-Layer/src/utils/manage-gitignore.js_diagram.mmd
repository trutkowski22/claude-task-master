```mermaid
flowchart TB
    subgraph Imports["Imports"]
        I1["IMPORT: fs, FROM: fs"]
        I2["IMPORT: path, FROM: path"]
    end
    subgraph Dependencies["Dependencies"]
        D1["DEP: File system"]
        D2["DEP: Path resolution"]
    end
    subgraph FunctionsDefined["Functions Defined"]
        FU1["FUNCTION: normalizeLine"]
        FU2["FUNCTION: isTaskLine"]
        FU3["FUNCTION: adjustTaskLinesInTemplate"]
        FU4["FUNCTION: removeExistingTaskSection"]
        FU5["FUNCTION: filterNewTemplateLines"]
        FU6["FUNCTION: buildTaskFilesSection"]
        FU7["FUNCTION: addSeparatorIfNeeded"]
        FU8["FUNCTION: validateInputs"]
        FU9["FUNCTION: createNewGitignoreFile"]
        FU10["FUNCTION: mergeWithExistingFile"]
        FU11["FUNCTION: manageGitignoreFile"]
    end
    subgraph Exports["Exports"]
        E1["EXP: manageGitignoreFile"]
        E2["EXP: normalizeLine"]
        E3["EXP: isTaskLine"]
        E4["EXP: buildTaskFilesSection"]
        E5["EXP: TASK_FILES_COMMENT"]
        E6["EXP: TASK_JSON_PATTERN"]
        E7["EXP: TASK_DIR_PATTERN"]
    end
    subgraph Parameters["Parameters"]
        P1["PARAM: {string} line - Line to normalize"]
        P2["PARAM: {string} line - Line to check"]
        P3["PARAM: {string[]} templateLines - Array of template lines"]
        P4["PARAM: {boolean} storeTasksInGit - Whether to comment out task lines"]
        P5["PARAM: {string[]} existingLines - Existing file lines"]
        P6["PARAM: {string[]} templateLines - Template lines"]
        P7["PARAM: {Set<string>} existingLinesSet - Set of existing trimmed lines"]
        P8["PARAM: {boolean} storeTasksInGit - Whether to comment out task lines"]
        P9["PARAM: {string[]} lines - Current lines array"]
        P10["PARAM: {string} targetPath - Path to .gitignore file"]
        P11["PARAM: {string} content - Template content"]
        P12["PARAM: {boolean} storeTasksInGit - Storage preference"]
        P13["PARAM: {string} targetPath - Path to create file at"]
        P14["PARAM: {string[]} templateLines - Adjusted template lines"]
        P15["PARAM: {function} log - Logging function"]
        P16["PARAM: {string} targetPath - Path to existing file"]
        P17["PARAM: {string[]} templateLines - Adjusted template lines"]
        P18["PARAM: {boolean} storeTasksInGit - Storage preference"]
        P19["PARAM: {function} log - Logging function"]
        P20["PARAM: {string} targetPath - Path to the .gitignore file"]
        P21["PARAM: {string} content - Template content for .gitignore"]
        P22["PARAM: {boolean} storeTasksInGit - Whether to store tasks in git or not"]
        P23["PARAM: {function} log - Logging function (level, message)"]
    end
    subgraph Constants["Const Declarations"]
        C1["CONST: TASK_FILES_COMMENT, VALUE: '# Task files'"]
        C2["CONST: TASK_JSON_PATTERN, VALUE: 'tasks.json'"]
        C3["CONST: TASK_DIR_PATTERN, VALUE: 'tasks/'"]
        C4["CONST: normalized, VALUE: normalizeLine(line)"]
        C5["CONST: normalized, VALUE: normalizeLine(line)"]
        C6["CONST: originalTrailingSpace, VALUE: line.match(/\\s*$/)[0]"]
        C7["CONST: cleanedLines, VALUE: []"]
        C8["CONST: trimmed, VALUE: line.trim()"]
        C9["CONST: section, VALUE: [TASK_FILES_COMMENT]"]
        C10["CONST: lastLine, VALUE: lines[lines.length - 1]"]
        C11["CONST: existingContent, VALUE: fs.readFileSync(targetPath, 'utf8')"]
        C12["CONST: existingLines, VALUE: existingContent.split('\\n')"]
        C13["CONST: cleanedExistingLines, VALUE: removeExistingTaskSection(existingLines)"]
        C14["CONST: existingLinesSet, VALUE: new Set("]
        C15["CONST: newLines, VALUE: filterNewTemplateLines(templateLines, existingLinesSet)"]
        C16["CONST: finalLines, VALUE: [...cleanedExistingLines]"]
        C17["CONST: hasNewContent, VALUE: newLines.length > 0 ? ' and merged new content' : ''"]
        C18["CONST: templateLines, VALUE: content.split('\\n')"]
        C19["CONST: adjustedTemplateLines, VALUE: adjustTaskLinesInTemplate("]
    end
    subgraph ExecutionFlow["Execution Flow"]
        FL1["Identify and load dependencies and modules"]
        FL2["Define functions and core logic for this module"]
        FL3["Expose public API via exports"]
    end
    subgraph FileName["manage-gitignore.js"]
        Imports
        Dependencies
        FunctionsDefined
        Exports
        Parameters
        Constants
        ExecutionFlow
    end
    FL1 --> FL2
    FL2 --> FL3
```