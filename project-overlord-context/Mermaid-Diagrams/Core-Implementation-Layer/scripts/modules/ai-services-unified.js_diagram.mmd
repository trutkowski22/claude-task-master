```mermaid
flowchart TB
    subgraph Imports["Imports"]
        I1["IMPORT: ai, FROM: ai"]
        I2["IMPORT: ../../src/provider-registry/index.js, FROM: /claude-task-master/src/provider-registry/index.js"]
        I3["IMPORT: path, FROM: path"]
        I4["IMPORT: fs, FROM: fs"]
    end
    subgraph Dependencies["Dependencies"]
        D1["DEP: File system"]
        D2["DEP: Path resolution"]
    end
    subgraph FunctionsDefined["Functions Defined"]
        FU1["FUNCTION: _getProvider"]
        FU2["FUNCTION: _getCostForModel"]
        FU3["FUNCTION: _getTagInfo"]
        FU4["FUNCTION: isRetryableError"]
        FU5["FUNCTION: _extractErrorMessage"]
        FU6["FUNCTION: _resolveApiKey"]
        FU7["FUNCTION: _attemptProviderCallWithRetries"]
        FU8["FUNCTION: _unifiedServiceRunner"]
        FU9["FUNCTION: generateTextService"]
        FU10["FUNCTION: streamTextService"]
        FU11["FUNCTION: generateObjectService"]
        FU12["FUNCTION: logAiUsage"]
    end
    subgraph Exports["Exports"]
        E1["EXP: generateTextService"]
        E2["EXP: streamTextService"]
        E3["EXP: generateObjectService"]
        E4["EXP: logAiUsage"]
    end
    subgraph Parameters["Parameters"]
        P1["PARAM: {Error | object | any} error - The error object."]
        P2["PARAM: {string} providerName - The name of the provider (lowercase)."]
        P3["PARAM: {object|null} session - Optional MCP session object."]
        P4["PARAM: {string|null} projectRoot - Optional project root path for .env fallback."]
        P5["PARAM: {function} providerApiFn - The specific provider function to call (e.g., generateAnthropicText)."]
        P6["PARAM: {object} callParams - Parameters object for the provider function."]
        P7["PARAM: {string} providerName - Name of the provider (for logging)."]
        P8["PARAM: {string} modelId - Specific model ID (for logging)."]
        P9["PARAM: {string} attemptRole - The role being attempted (for logging)."]
        P10["PARAM: {string} serviceType - Type of service ('generateText', 'streamText', 'generateObject')."]
        P11["PARAM: {object} params - Original parameters passed to the service function."]
        P12["PARAM: {string} params.role - The initial client role."]
        P13["PARAM: {string} [params.projectRoot] - Optional project root path."]
        P14["PARAM: {string} params.commandName - Name of the command invoking the service."]
        P15["PARAM: {string} params.outputType - 'cli' or 'mcp'."]
        P16["PARAM: {string} [params.systemPrompt] - Optional system prompt."]
        P17["PARAM: {string} [params.prompt] - The prompt for the AI."]
        P18["PARAM: {string} [params.schema] - The Zod schema for the expected object."]
        P19["PARAM: {string} [params.objectName] - Name for object/tool."]
        P20["PARAM: {object} params - Parameters for the service call."]
        P21["PARAM: {string} params.role - The initial client role ('main', 'research', 'fallback')."]
        P22["PARAM: {string} params.prompt - The prompt for the AI."]
        P23["PARAM: {string} [params.systemPrompt] - Optional system prompt."]
        P24["PARAM: {string} params.commandName - Name of the command invoking the service."]
        P25["PARAM: {object} params - Parameters for the service call."]
        P26["PARAM: {string} params.role - The initial client role ('main', 'research', 'fallback')."]
        P27["PARAM: {string} params.prompt - The prompt for the AI."]
        P28["PARAM: {string} [params.systemPrompt] - Optional system prompt."]
        P29["PARAM: {string} params.commandName - Name of the command invoking the service."]
        P30["PARAM: {object} params - Parameters for the service call."]
        P31["PARAM: {string} params.role - The initial client role ('main', 'research', 'fallback')."]
        P32["PARAM: {import('zod').ZodSchema} params.schema - The Zod schema for the expected object."]
        P33["PARAM: {string} params.prompt - The prompt for the AI."]
        P34["PARAM: {string} [params.systemPrompt] - Optional system prompt."]
        P35["PARAM: {string} params.commandName - Name of the command invoking the service."]
        P36["PARAM: {object} params - Telemetry parameters."]
        P37["PARAM: {string} params.userId - Unique user identifier."]
        P38["PARAM: {string} params.commandName - The command that triggered the AI call."]
        P39["PARAM: {string} params.providerName - The AI provider used (e.g., 'openai')."]
        P40["PARAM: {string} params.modelId - The specific AI model ID used."]
        P41["PARAM: {number} params.inputTokens - Number of input tokens."]
        P42["PARAM: {number} params.outputTokens - Number of output tokens."]
    end
    subgraph Constants["Const Declarations"]
        C1["CONST: PROVIDERS, VALUE: {"]
        C2["CONST: providerRegistry, VALUE: ProviderRegistry.getInstance()"]
        C3["CONST: modelData, VALUE: MODEL_MAP[providerName].find((m) => m.id === modelId)"]
        C4["CONST: currency, VALUE: modelData.cost_per_1m_tokens.currency || 'USD'"]
        C5["CONST: currentTag, VALUE: getCurrentTag(projectRoot)"]
        C6["CONST: path, VALUE: require('path')"]
        C7["CONST: fs, VALUE: require('fs')"]
        C8["CONST: tasksPath, VALUE: path.join("]
        C9["CONST: tasksData, VALUE: JSON.parse(fs.readFileSync(tasksPath, 'utf8'))"]
        C10["CONST: potentialTags, VALUE: Object.keys(tasksData).filter("]
        C11["CONST: MAX_RETRIES, VALUE: 2"]
        C12["CONST: INITIAL_RETRY_DELAY_MS, VALUE: 1000"]
        C13["CONST: errorMessage, VALUE: error.message?.toLowerCase() || ''"]
        C14["CONST: body, VALUE: JSON.parse(error.responseBody)"]
        C15["CONST: provider, VALUE: _getProvider(providerName)"]
        C16["CONST: envVarName, VALUE: provider.getRequiredApiKeyName()"]
        C17["CONST: apiKey, VALUE: resolveEnvVariable(envVarName, session, projectRoot)"]
        C18["CONST: fnName, VALUE: serviceType"]
        C19["CONST: result, VALUE: await provider[serviceType](callParams)"]
        C20["CONST: delay, VALUE: INITIAL_RETRY_DELAY_MS * 2 ** (retries - 1)"]
        C21["CONST: effectiveProjectRoot, VALUE: projectRoot || findProjectRoot()"]
        C22["CONST: userId, VALUE: getUserId(effectiveProjectRoot)"]
        C23["CONST: projectId, VALUE: getVertexProjectId(effectiveProjectRoot) ||"]
        C24["CONST: location, VALUE: getVertexLocation(effectiveProjectRoot) ||"]
        C25["CONST: credentialsPath, VALUE: resolveEnvVariable("]
        C26["CONST: messages, VALUE: []"]
        C27["CONST: responseLanguage, VALUE: getResponseLanguage(effectiveProjectRoot)"]
        C28["CONST: systemPromptWithLanguage, VALUE: `${systemPrompt} \\n\\n Always respond in ${responseLanguage}.`"]
        C29["CONST: callParams, VALUE: {"]
        C30["CONST: tagInfo, VALUE: _getTagInfo(effectiveProjectRoot)"]
        C31["CONST: cleanMessage, VALUE: _extractErrorMessage(error)"]
        C32["CONST: lowerCaseMessage, VALUE: cleanMessage.toLowerCase()"]
        C33["CONST: specificErrorMsg, VALUE: `Model '${modelId || 'unknown'}' via provider '${providerName || 'unknown'}' does not support the 'tool use' required..."]
        C34["CONST: defaults, VALUE: { outputType: 'cli' }"]
        C35["CONST: combinedParams, VALUE: { ...defaults, ...params }"]
        C36["CONST: defaults, VALUE: { outputType: 'cli' }"]
        C37["CONST: combinedParams, VALUE: { ...defaults, ...params }"]
        C38["CONST: defaults, VALUE: {"]
        C39["CONST: combinedParams, VALUE: { ...defaults, ...params }"]
        C40["CONST: isMCP, VALUE: outputType === 'mcp'"]
        C41["CONST: timestamp, VALUE: new Date().toISOString()"]
        C42["CONST: totalTokens, VALUE: (inputTokens || 0) + (outputTokens || 0)"]
        C43["CONST: totalCost, VALUE: ((inputTokens || 0) / 1_000_000) * inputCost +"]
        C44["CONST: telemetryData, VALUE: {"]
    end
    subgraph ExecutionFlow["Execution Flow"]
        FL1["Identify and load dependencies and modules"]
        FL2["Define functions and core logic for this module"]
        FL3["Expose public API via exports"]
    end
    subgraph FileName["ai-services-unified.js"]
        Imports
        Dependencies
        FunctionsDefined
        Exports
        Parameters
        Constants
        ExecutionFlow
    end
    FL1 --> FL2
    FL2 --> FL3
```