```mermaid
flowchart TB
    subgraph Imports["Imports"]
        I1["IMPORT: https, FROM: https"]
        I2["IMPORT: http, FROM: http"]
        I3["IMPORT: ../../../src/utils/path-utils.js, FROM: /claude-task-master/src/utils/path-utils.js"]
        I4["IMPORT: ../utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        I5["IMPORT: ../../../src/constants/providers.js, FROM: /claude-task-master/src/constants/providers.js"]
    end
    subgraph Dependencies["Dependencies"]
        D1["DEP: Path resolution"]
    end
    subgraph FunctionsDefined["Functions Defined"]
        FU1["FUNCTION: fetchOpenRouterModels"]
        FU2["FUNCTION: fetchOllamaModels"]
        FU3["FUNCTION: getModelConfiguration"]
        FU4["FUNCTION: getAvailableModelsList"]
        FU5["FUNCTION: setModel"]
        FU6["FUNCTION: getApiKeyStatusReport"]
        FU7["FUNCTION: report"]
    end
    subgraph Exports["Exports"]
        E1["EXP: getModelConfiguration"]
        E2["EXP: getAvailableModelsList"]
        E3["EXP: setModel"]
        E4["EXP: getApiKeyStatusReport"]
    end
    subgraph Parameters["Parameters"]
        P1["PARAM: {string} baseURL - The base URL for the Ollama API (e.g., \"http://localhost:11434/api\")"]
        P2["PARAM: {Object} [options] - Options for the operation"]
        P3["PARAM: {Object} [options.session] - Session object containing environment variables (for MCP)"]
        P4["PARAM: {Function} [options.mcpLog] - MCP logger object (for MCP)"]
        P5["PARAM: {string} [options.projectRoot] - Project root directory"]
        P6["PARAM: {Object} [options] - Options for the operation"]
        P7["PARAM: {Object} [options.session] - Session object containing environment variables (for MCP)"]
        P8["PARAM: {Function} [options.mcpLog] - MCP logger object (for MCP)"]
        P9["PARAM: {string} [options.projectRoot] - Project root directory"]
        P10["PARAM: {string} role - The model role to update ('main', 'research', 'fallback')"]
        P11["PARAM: {string} modelId - The model ID to set for the role"]
        P12["PARAM: {Object} [options] - Options for the operation"]
        P13["PARAM: {string} [options.providerHint] - Provider hint if already determined ('openrouter' or 'ollama')"]
        P14["PARAM: {Object} [options.session] - Session object containing environment variables (for MCP)"]
        P15["PARAM: {Function} [options.mcpLog] - MCP logger object (for MCP)"]
        P16["PARAM: {string} [options.projectRoot] - Project root directory"]
        P17["PARAM: {Object} [options] - Options for the operation"]
        P18["PARAM: {Object} [options.session] - Session object containing environment variables (for MCP)"]
        P19["PARAM: {Function} [options.mcpLog] - MCP logger object (for MCP)"]
        P20["PARAM: {string} [options.projectRoot] - Project root directory"]
    end
    subgraph Constants["Const Declarations"]
        C1["CONST: CONFIG_MISSING_ERROR, VALUE: 'The configuration file is missing. Run \"task-master init\" to create it.'"]
        C2["CONST: options, VALUE: {"]
        C3["CONST: req, VALUE: https.request(options, (res) => {"]
        C4["CONST: parsedData, VALUE: JSON.parse(data)"]
        C5["CONST: url, VALUE: new URL(baseURL)"]
        C6["CONST: isHttps, VALUE: url.protocol === 'https:'"]
        C7["CONST: port, VALUE: url.port || (isHttps ? 443 : 80)"]
        C8["CONST: basePath, VALUE: url.pathname.endsWith('/')"]
        C9["CONST: options, VALUE: {"]
        C10["CONST: requestLib, VALUE: isHttps ? https : http"]
        C11["CONST: req, VALUE: requestLib.request(options, (res) => {"]
        C12["CONST: parsedData, VALUE: JSON.parse(data)"]
        C13["CONST: report, VALUE: (level, ...args) => {"]
        C14["CONST: configPath, VALUE: findConfigPath(null, { projectRoot })"]
        C15["CONST: configExists, VALUE: isConfigFilePresent(projectRoot)"]
        C16["CONST: mainProvider, VALUE: getMainProvider(projectRoot)"]
        C17["CONST: mainModelId, VALUE: getMainModelId(projectRoot)"]
        C18["CONST: researchProvider, VALUE: getResearchProvider(projectRoot)"]
        C19["CONST: researchModelId, VALUE: getResearchModelId(projectRoot)"]
        C20["CONST: fallbackProvider, VALUE: getFallbackProvider(projectRoot)"]
        C21["CONST: fallbackModelId, VALUE: getFallbackModelId(projectRoot)"]
        C22["CONST: mainCliKeyOk, VALUE: isApiKeySet(mainProvider, session, projectRoot)"]
        C23["CONST: mainMcpKeyOk, VALUE: getMcpApiKeyStatus(mainProvider, projectRoot)"]
        C24["CONST: researchCliKeyOk, VALUE: isApiKeySet("]
        C25["CONST: researchMcpKeyOk, VALUE: getMcpApiKeyStatus(researchProvider, projectRoot)"]
        C26["CONST: fallbackCliKeyOk, VALUE: fallbackProvider"]
        C27["CONST: fallbackMcpKeyOk, VALUE: fallbackProvider"]
        C28["CONST: availableModels, VALUE: getAvailableModels(projectRoot)"]
        C29["CONST: mainModelData, VALUE: availableModels.find((m) => m.id === mainModelId)"]
        C30["CONST: researchModelData, VALUE: availableModels.find("]
        C31["CONST: fallbackModelData, VALUE: fallbackModelId"]
        C32["CONST: report, VALUE: (level, ...args) => {"]
        C33["CONST: configPath, VALUE: findConfigPath(null, { projectRoot })"]
        C34["CONST: configExists, VALUE: isConfigFilePresent(projectRoot)"]
        C35["CONST: allAvailableModels, VALUE: getAvailableModels(projectRoot)"]
        C36["CONST: mainModelId, VALUE: getMainModelId(projectRoot)"]
        C37["CONST: researchModelId, VALUE: getResearchModelId(projectRoot)"]
        C38["CONST: fallbackModelId, VALUE: getFallbackModelId(projectRoot)"]
        C39["CONST: activeIds, VALUE: [mainModelId, researchModelId, fallbackModelId].filter("]
        C40["CONST: otherAvailableModels, VALUE: allAvailableModels.map((model) => ({"]
        C41["CONST: report, VALUE: (level, ...args) => {"]
        C42["CONST: configPath, VALUE: findConfigPath(null, { projectRoot })"]
        C43["CONST: configExists, VALUE: isConfigFilePresent(projectRoot)"]
        C44["CONST: availableModels, VALUE: getAvailableModels(projectRoot)"]
        C45["CONST: currentConfig, VALUE: getConfig(projectRoot)"]
        C46["CONST: openRouterModels, VALUE: await fetchOpenRouterModels()"]
        C47["CONST: ollamaBaseURL, VALUE: getBaseUrlForRole(role, projectRoot)"]
        C48["CONST: ollamaModels, VALUE: await fetchOllamaModels(ollamaBaseURL)"]
        C49["CONST: tagsUrl, VALUE: `${ollamaBaseURL}/tags`"]
        C50["CONST: claudeCodeModels, VALUE: availableModels.filter("]
        C51["CONST: claudeCodeModelData, VALUE: claudeCodeModels.find("]
        C52["CONST: geminiCliModels, VALUE: availableModels.filter("]
        C53["CONST: geminiCliModelData, VALUE: geminiCliModels.find("]
        C54["CONST: writeResult, VALUE: writeConfig(currentConfig, projectRoot)"]
        C55["CONST: successMessage, VALUE: `Successfully set ${role} model to ${modelId} (Provider: ${determinedProvider})`"]
        C56["CONST: report, VALUE: (level, ...args) => {"]
        C57["CONST: providers, VALUE: getAllProviders()"]
        C58["CONST: providersToCheck, VALUE: providers.filter("]
        C59["CONST: statusReport, VALUE: providersToCheck.map((provider) => {"]
        C60["CONST: cliOk, VALUE: isApiKeySet(provider, session, projectRoot)"]
        C61["CONST: mcpOk, VALUE: getMcpApiKeyStatus(provider, projectRoot)"]
    end
    subgraph ExecutionFlow["Execution Flow"]
        FL1["Identify and load dependencies and modules"]
        FL2["Define functions and core logic for this module"]
        FL3["Expose public API via exports"]
    end
    subgraph FileName["models.js"]
        Imports
        Dependencies
        FunctionsDefined
        Exports
        Parameters
        Constants
        ExecutionFlow
    end
    FL1 --> FL2
    FL2 --> FL3
```