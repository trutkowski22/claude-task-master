```mermaid
flowchart TB
    subgraph Imports["Imports"]
        I1["IMPORT: fs, FROM: fs"]
        I2["IMPORT: path, FROM: path"]
        I3["IMPORT: inquirer, FROM: inquirer"]
        I4["IMPORT: chalk, FROM: chalk"]
        I5["IMPORT: boxen, FROM: boxen"]
        I6["IMPORT: ../../scripts/modules/utils.js, FROM: /claude-task-master/scripts/modules/utils.js"]
        I7["IMPORT: ./rule-transformer.js, FROM: /claude-task-master/src/utils/rule-transformer.js"]
        I8["IMPORT: ../constants/profiles.js, FROM: /claude-task-master/src/constants/profiles.js"]
    end
    subgraph Dependencies["Dependencies"]
        D1["DEP: File system"]
        D2["DEP: Path resolution"]
    end
    subgraph FunctionsDefined["Functions Defined"]
        FU1["FUNCTION: getProfileDisplayName"]
        FU2["FUNCTION: getInstalledProfiles"]
        FU3["FUNCTION: wouldRemovalLeaveNoProfiles"]
        FU4["FUNCTION: runInteractiveProfilesSetup"]
        FU5["FUNCTION: generateProfileSummary"]
        FU6["FUNCTION: generateProfileRemovalSummary"]
        FU7["FUNCTION: categorizeProfileResults"]
        FU8["FUNCTION: categorizeRemovalResults"]
    end
    subgraph Exports["Exports"]
        E1["EXP: getProfileDisplayName"]
        E2["EXP: getInstalledProfiles"]
        E3["EXP: wouldRemovalLeaveNoProfiles"]
        E4["EXP: generateProfileSummary"]
        E5["EXP: generateProfileRemovalSummary"]
        E6["EXP: categorizeProfileResults"]
        E7["EXP: categorizeRemovalResults"]
    end
    subgraph Parameters["Parameters"]
        P1["PARAM: {string} profileName - The profile name"]
        P2["PARAM: {string} projectRoot - Project directory path"]
        P3["PARAM: {string} projectRoot - Project root directory"]
        P4["PARAM: {string[]} profilesToRemove - Array of profile names to remove"]
        P5["PARAM: {string} profileName - Name of the profile"]
        P6["PARAM: {Object} addResult - Result object with success/failed counts"]
        P7["PARAM: {string} profileName - Name of the profile"]
        P8["PARAM: {Object} removeResult - Result object from removal operation"]
        P9["PARAM: {Array} addResults - Array of add result objects"]
        P10["PARAM: {Array} removalResults - Array of removal result objects"]
    end
    subgraph Constants["Const Declarations"]
        C1["CONST: profile, VALUE: getRulesProfile(profileName)"]
        C2["CONST: installedProfiles, VALUE: []"]
        C3["CONST: profile, VALUE: getRulesProfile(profileName)"]
        C4["CONST: profileDir, VALUE: path.join(projectRoot, profile.profileDir)"]
        C5["CONST: rulesDir, VALUE: path.join(projectRoot, profile.rulesDir)"]
        C6["CONST: ruleFiles, VALUE: Object.values(profile.fileMap)"]
        C7["CONST: hasRuleFiles, VALUE: ruleFiles.some((ruleFile) =>"]
        C8["CONST: installedProfiles, VALUE: getInstalledProfiles(projectRoot)"]
        C9["CONST: remainingProfiles, VALUE: installedProfiles.filter("]
        C10["CONST: profileDescriptions, VALUE: RULE_PROFILES.map((profileName) => {"]
        C11["CONST: displayName, VALUE: getProfileDisplayName(profileName)"]
        C12["CONST: profile, VALUE: getRulesProfile(profileName)"]
        C13["CONST: hasRules, VALUE: Object.keys(profile.fileMap).length > 0"]
        C14["CONST: hasMcpConfig, VALUE: profile.mcpConfig === true"]
        C15["CONST: profileListText, VALUE: profileDescriptions"]
        C16["CONST: sortedChoices, VALUE: profileDescriptions.map("]
        C17["CONST: ruleProfilesQuestion, VALUE: {"]
        C18["CONST: profileConfig, VALUE: getRulesProfile(profileName)"]
        C19["CONST: profileConfig, VALUE: getRulesProfile(profileName)"]
        C20["CONST: baseMessage, VALUE: `Summary for ${profileName}: Integration guide removed`"]
        C21["CONST: baseMessage, VALUE: `Summary for ${profileName}: Rule profile removed`"]
        C22["CONST: successfulProfiles, VALUE: []"]
        C23["CONST: successfulRemovals, VALUE: []"]
        C24["CONST: skippedRemovals, VALUE: []"]
        C25["CONST: failedRemovals, VALUE: []"]
        C26["CONST: removalsWithNotices, VALUE: []"]
    end
    subgraph ExecutionFlow["Execution Flow"]
        FL1["Identify and load dependencies and modules"]
        FL2["Define functions and core logic for this module"]
        FL3["Expose public API via exports"]
    end
    subgraph FileName["profiles.js"]
        Imports
        Dependencies
        FunctionsDefined
        Exports
        Parameters
        Constants
        ExecutionFlow
    end
    FL1 --> FL2
    FL2 --> FL3
```