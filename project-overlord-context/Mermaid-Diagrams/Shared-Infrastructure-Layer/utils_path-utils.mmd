flowchart TB
    subgraph pathUtils-Imports["pathUtils-Imports"]
        I1["IMPORT: path, FROM: path"]
        I2["IMPORT: fs, FROM: fs"]
        I3["IMPORT: TASKMASTER_TASKS_FILE, LEGACY_TASKS_FILE, etc., FROM: /claude-task-master/src/constants/paths.js"]
        I4["IMPORT: getLoggerOrDefault, FROM: /claude-task-master/src/utils/logger-utils.js"]
    end
    
    subgraph pathUtils-FunctionsDefined["pathUtils-Functions Defined"]
        FU1["FUNCTION: normalizeProjectRoot"]
        FU2["FUNCTION: findProjectRoot"]
        FU3["FUNCTION: findTasksPath"]
        FU4["FUNCTION: findPRDPath"]
        FU5["FUNCTION: findComplexityReportPath"]
        FU6["FUNCTION: resolveTasksOutputPath"]
        FU7["FUNCTION: resolveComplexityReportOutputPath"]
        FU8["FUNCTION: findConfigPath"]
    end
    
    subgraph pathUtils-Exports["pathUtils-Exports"]
        E1["EXP: normalizeProjectRoot"]
        E2["EXP: findProjectRoot"]
        E3["EXP: findTasksPath"]
        E4["EXP: findPRDPath"]
        E5["EXP: findComplexityReportPath"]
        E6["EXP: resolveTasksOutputPath"]
        E7["EXP: resolveComplexityReportOutputPath"]
        E8["EXP: findConfigPath"]
    end
    
    subgraph pathUtils-Parameters["pathUtils-Parameters"]
        P1["PARAM: {string} projectRoot - The project root path to normalize"]
        P2["PARAM: {string} startDir - Directory to start searching from"]
        P3["PARAM: {string|null} explicitPath - Explicit path provided by user"]
        P4["PARAM: {Object|null} args - Args object from MCP args"]
        P5["PARAM: {Object|null} log - Logger object"]
    end
    
    subgraph pathUtils-Constants["pathUtils-Const Declarations"]
        C1["CONST: segments, VALUE: projectRoot.split(path.sep)"]
        C2["CONST: taskmasterIndex, VALUE: segments.findIndex for .taskmaster"]
        C3["CONST: projectMarkers, VALUE: array of project marker files"]
        C4["CONST: currentDir, VALUE: path.resolve(startDir)"]
        C5["CONST: rootDir, VALUE: path.parse(currentDir).root"]
        C6["CONST: logger, VALUE: getLoggerOrDefault(log)"]
        C7["CONST: rawProjectRoot, VALUE: args?.projectRoot || findProjectRoot()"]
        C8["CONST: possiblePaths, VALUE: array of possible file locations"]
        C9["CONST: locations, VALUE: array of directory locations to check"]
        C10["CONST: fileNames, VALUE: array of possible file names"]
    end
    
    subgraph pathUtils-ExecutionFlow["pathUtils-Execution Flow"]
        FL1["Normalize project root to prevent double .taskmaster paths"]
        FL2["Find project root by searching for project markers upward"]
        FL3["Find tasks.json with fallback logic and deprecation warnings"]
        FL4["Find PRD document in multiple locations with format support"]
        FL5["Find complexity report with tag-aware naming"]
        FL6["Resolve output paths for new file creation"]
        FL7["Create directories if they don't exist for output paths"]
        FL8["Issue deprecation warnings for legacy file locations"]
        FL9["Support both explicit paths and automatic discovery"]
        FL10["Handle MCP context with args object integration"]
        FL11["Provide consistent error handling and logging"]
    end
    
    subgraph pathUtils["path-utils.js"]
        pathUtils-Imports
        pathUtils-FunctionsDefined
        pathUtils-Exports
        pathUtils-Parameters
        pathUtils-Constants
        pathUtils-ExecutionFlow
    end
    
    FL1 --> FL2
    FL2 --> FL3
    FL3 --> FL4
    FL4 --> FL5
    FL5 --> FL6
    FL6 --> FL7
    FL7 --> FL8
    FL8 --> FL9
    FL9 --> FL10
    FL10 --> FL11