```mermaid
flowchart TB
    subgraph Imports["Imports"]
        I1["IMPORT: ./errors.js, FROM: /claude-task-master/mcp-server/src/custom-sdk/errors.js"]
        I2["IMPORT: ./json-extractor.js, FROM: /claude-task-master/mcp-server/src/custom-sdk/json-extractor.js"]
    end
    subgraph Exports["Exports"]
        E1["EXP: MCPLanguageModel"]
    end
    subgraph Parameters["Parameters"]
        P1["PARAM: {object} options - Generation options"]
        P2["PARAM: {Array} options.prompt - AI SDK prompt format"]
        P3["PARAM: {AbortSignal} options.abortSignal - Abort signal"]
        P4["PARAM: {object} options - Generation options"]
        P5["PARAM: {Array} options.prompt - AI SDK prompt format"]
        P6["PARAM: {import('zod').ZodSchema} options.schema - Zod schema for validation"]
        P7["PARAM: {AbortSignal} options.abortSignal - Abort signal"]
        P8["PARAM: {object} options - Generation options"]
        P9["PARAM: {object} result - Complete generation result"]
    end
    subgraph Constants["Const Declarations"]
        C1["CONST: response, VALUE: await this.session.requestSampling("]
        C2["CONST: result, VALUE: convertFromMCPFormat(response)"]
        C3["CONST: objectName, VALUE: restOptions.objectName || 'generated_object'"]
        C4["CONST: jsonInstructions, VALUE: convertSchemaToInstructions(schema, objectName)"]
        C5["CONST: enhancedPrompt, VALUE: enhancePromptForJSON("]
        C6["CONST: response, VALUE: await this.session.requestSampling("]
        C7["CONST: result, VALUE: convertFromMCPFormat(response)"]
        C8["CONST: jsonText, VALUE: extractJson(result.text)"]
        C9["CONST: validatedObject, VALUE: schema.parse(parsedObject)"]
        C10["CONST: result, VALUE: await this.doGenerate(options)"]
        C11["CONST: text, VALUE: result.text"]
        C12["CONST: chunkSize, VALUE: Math.max(1, Math.floor(text.length / 10))"]
        C13["CONST: chunk, VALUE: text.slice(i, i + chunkSize)"]
        C14["CONST: isLast, VALUE: i + chunkSize >= text.length"]
    end
    subgraph ExecutionFlow["Execution Flow"]
        FL1["Identify and load dependencies and modules"]
        FL2["Expose public API via exports"]
    end
    subgraph FileName["language-model.js"]
        Imports
        Exports
        Parameters
        Constants
        ExecutionFlow
    end
    FL1 --> FL2
```