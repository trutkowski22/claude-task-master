```mermaid
flowchart TB
    subgraph FunctionsDefined["Functions Defined"]
        FU1["FUNCTION: convertSchemaToInstructions"]
        FU2["FUNCTION: generateExampleFromSchema"]
        FU3["FUNCTION: enhancePromptForJSON"]
    end
    subgraph Exports["Exports"]
        E1["EXP: convertSchemaToInstructions"]
        E2["EXP: enhancePromptForJSON"]
    end
    subgraph Parameters["Parameters"]
        P1["PARAM: {import('zod').ZodSchema} schema - Zod schema object"]
        P2["PARAM: {import('zod').ZodSchema} schema - Zod schema"]
        P3["PARAM: {Array} prompt - AI SDK prompt array"]
        P4["PARAM: {string} jsonInstructions - JSON generation instructions"]
    end
    subgraph Constants["Const Declarations"]
        C1["CONST: exampleStructure, VALUE: generateExampleFromSchema(schema)"]
        C2["CONST: def, VALUE: schema._def"]
        C3["CONST: result, VALUE: {}"]
        C4["CONST: shape, VALUE: def.shape()"]
        C5["CONST: elementExample, VALUE: generateExampleFromSchema(def.type)"]
        C6["CONST: enhancedPrompt, VALUE: [...prompt]"]
        C7["CONST: currentContent, VALUE: enhancedPrompt[systemMessageIndex].content"]
    end
    subgraph ExecutionFlow["Execution Flow"]
        FL1["Define functions and core logic for this module"]
        FL2["Expose public API via exports"]
    end
    subgraph FileName["schema-converter.js"]
        FunctionsDefined
        Exports
        Parameters
        Constants
        ExecutionFlow
    end
    FL1 --> FL2
```