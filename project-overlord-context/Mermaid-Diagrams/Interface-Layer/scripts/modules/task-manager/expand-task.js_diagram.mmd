flowchart TB
    subgraph Imports["Imports"]
        I1["IMPORT: fs, FROM: fs"]
        I2["IMPORT: path, FROM: path"]
        I3["IMPORT: z, FROM: zod"]
        I4["IMPORT: log, readJSON, writeJSON, isSilentMode, getTagAwareFilePath, FROM: /claude-task-master/claude-task-master/scripts/modules/utils.js"]
        I5["IMPORT: startLoadingIndicator, stopLoadingIndicator, displayAiUsageSummary, FROM: /claude-task-master/claude-task-master/scripts/modules/ui.js"]
        I6["IMPORT: generateTextService, FROM: /claude-task-master/claude-task-master/scripts/modules/ai-services-unified.js"]
        I7["IMPORT: getDefaultSubtasks, getDebugFlag, getMainProvider, getResearchProvider, FROM: /claude-task-master/claude-task-master/scripts/modules/config-manager.js"]
        I8["IMPORT: getPromptManager, FROM: /claude-task-master/claude-task-master/scripts/modules/prompt-manager.js"]
        I9["IMPORT: generateTaskFiles, FROM: /claude-task-master/claude-task-master/scripts/modules/task-manager/generate-task-files.js"]
        I10["IMPORT: COMPLEXITY_REPORT_FILE, FROM: /claude-task-master/claude-task-master/src/constants/paths.js"]
        I11["IMPORT: CUSTOM_PROVIDERS, FROM: /claude-task-master/claude-task-master/src/constants/providers.js"]
        I12["IMPORT: ContextGatherer, FROM: /claude-task-master/claude-task-master/scripts/modules/utils/contextGatherer.js"]
        I13["IMPORT: FuzzyTaskSearch, FROM: /claude-task-master/claude-task-master/scripts/modules/utils/fuzzyTaskSearch.js"]
        I14["IMPORT: flattenTasksWithSubtasks, findProjectRoot, FROM: /claude-task-master/claude-task-master/scripts/modules/utils.js"]
    end
    
    subgraph Dependencies["Dependencies"]
        D1["DEP: Zod validation library for subtask schema validation"]
        D2["DEP: AI service provider for task expansion"]
        D3["DEP: File system for reading/writing tasks and complexity reports"]
        D4["DEP: Terminal/console for user interface display"]
    end
    
    subgraph FunctionsDefined["Functions Defined"]
        FU1["FUNCTION: parseSubtasksFromText"]
        FU2["FUNCTION: expandTask"]
    end
    
    subgraph Exports["Exports"]
        E1["EXP: expandTask"]
    end
    
    subgraph Parameters["Parameters"]
        P1["PARAM: {string} text - Response text from AI"]
        P2["PARAM: {number} startId - Starting subtask ID expected"]
        P3["PARAM: {number} expectedCount - Expected number of subtasks"]
        P4["PARAM: {number} parentTaskId - Parent task ID for context"]
        P5["PARAM: {Object} logger - Logging object (mcpLog or console log)"]
        P6["PARAM: {string} tasksPath - Path to the tasks.json file"]
        P7["PARAM: {number} taskId - Task ID to expand"]
        P8["PARAM: {number|null|undefined} numSubtasks - Optional: Explicit target number of subtasks"]
        P9["PARAM: {boolean} useResearch - Whether to use the research AI role"]
        P10["PARAM: {string} additionalContext - Optional additional context"]
        P11["PARAM: {Object} context - Context object containing session and mcpLog"]
        P12["PARAM: {Object} context.session - Session object from MCP"]
        P13["PARAM: {Object} context.mcpLog - MCP logger object"]
        P14["PARAM: {string} context.projectRoot - Project root path"]
        P15["PARAM: {string} context.tag - Tag for the task"]
        P16["PARAM: {boolean} force - If true, replace existing subtasks; otherwise, append"]
    end
    
    subgraph Constants["Const Declarations"]
        C1["CONST: subtaskSchema, VALUE: Zod schema for validating individual subtasks"]
        C2["CONST: subtaskArraySchema, VALUE: Zod schema for validating array of subtasks"]
        C3["CONST: subtaskWrapperSchema, VALUE: Zod schema for validating subtasks wrapper object"]
        C4["CONST: originalTrimmedResponse, VALUE: trimmed AI response text"]
        C5["CONST: jsonToParse, VALUE: cleaned JSON string ready for parsing"]
        C6["CONST: parsedObject, VALUE: parsed JSON object from AI response"]
        C7["CONST: validatedSubtasks, VALUE: array of subtasks that passed validation"]
        C8["CONST: projectRoot, VALUE: determined project root directory"]
        C9["CONST: logger, VALUE: appropriate logging interface based on context"]
        C10["CONST: data, VALUE: readJSON result from tasks file"]
        C11["CONST: task, VALUE: found task object to be expanded"]
        C12["CONST: gatheredContext, VALUE: context gathered using ContextGatherer"]
        C13["CONST: finalSubtaskCount, VALUE: determined number of subtasks to generate"]
        C14["CONST: taskAnalysis, VALUE: complexity analysis data for the task"]
        C15["CONST: nextSubtaskId, VALUE: next sequential ID for new subtasks"]
        C16["CONST: promptParams, VALUE: parameters for prompt generation"]
        C17["CONST: systemPrompt, VALUE: system prompt for AI generation"]
        C18["CONST: userPrompt, VALUE: user prompt for AI generation"]
        C19["CONST: generatedSubtasks, VALUE: subtasks generated by AI"]
        C20["CONST: aiServiceResponse, VALUE: complete response from AI service"]
    end
    
    subgraph ExecutionFlow["Execution Flow"]
        FL1["Determine project root and set up appropriate logger"]
        FL2["Read tasks from JSON file and find target task to expand"]
        FL3["Handle force flag: clear existing subtasks if force is true"]
        FL4["Gather project context using ContextGatherer and FuzzyTaskSearch"]
        FL5["Check complexity report for task analysis and subtask recommendations"]
        FL6["Determine final subtask count from explicit parameter, complexity report, or config default"]
        FL7["Load appropriate prompt template using PromptManager"]
        FL8["Set up prompt parameters including context and expansion guidance"]
        FL9["Start loading indicator and call AI service for subtask generation"]
        FL10["Parse AI response text to extract subtasks JSON"]
        FL11["Validate parsed subtasks using Zod schemas"]
        FL12["Clean and correct subtask data (IDs, dependencies, status)"]
        FL13["Append validated subtasks to parent task's subtasks array"]
        FL14["Write updated tasks back to JSON file"]
        FL15["Display AI usage summary and return updated task with telemetry"]
    end
    
    subgraph expandTaskJs["expand-task.js"]
        Imports
        Dependencies
        FunctionsDefined
        Exports
        Parameters
        Constants
        ExecutionFlow
    end
    
    FL1 --> FL2
    FL2 --> FL3
    FL3 --> FL4
    FL4 --> FL5
    FL5 --> FL6
    FL6 --> FL7
    FL7 --> FL8
    FL8 --> FL9
    FL9 --> FL10
    FL10 --> FL11
    FL11 --> FL12
    FL12 --> FL13
    FL13 --> FL14
    FL14 --> FL15